import{_ as o,c as u,b as a,e as n,w as i,d as s,a as t,r as d,o as p}from"./app-B3IBTyxf.js";const b={},v={id:"java-io-知识体系",tabindex:"-1"},m={class:"header-anchor",href:"#java-io-知识体系"},g={id:"初识-java-io",tabindex:"-1"},f={class:"header-anchor",href:"#初识-java-io"},y={id:"传输方式划分",tabindex:"-1"},S={class:"header-anchor",href:"#传输方式划分"},w={id:"操作对象划分",tabindex:"-1"},F={class:"header-anchor",href:"#操作对象划分"},q={id:"文件",tabindex:"-1"},x={class:"header-anchor",href:"#文件"},O={id:"数组-内存",tabindex:"-1"},j={class:"header-anchor",href:"#数组-内存"},I={id:"管道",tabindex:"-1"},W={class:"header-anchor",href:"#管道"},E={id:"基本数据类型",tabindex:"-1"},B={class:"header-anchor",href:"#基本数据类型"},U={id:"缓冲",tabindex:"-1"},k={class:"header-anchor",href:"#缓冲"},R={id:"打印",tabindex:"-1"},T={class:"header-anchor",href:"#打印"},P={id:"对象序列化-反序列化",tabindex:"-1"},A={class:"header-anchor",href:"#对象序列化-反序列化"},z={id:"转换",tabindex:"-1"},C={class:"header-anchor",href:"#转换"},D={id:"文件流",tabindex:"-1"},N={class:"header-anchor",href:"#文件流"},J={id:"file-构造方法",tabindex:"-1"},L={class:"header-anchor",href:"#file-构造方法"},V={id:"file-常用方法",tabindex:"-1"},G={class:"header-anchor",href:"#file-常用方法"},K={id:"获取功能的方法",tabindex:"-1"},M={class:"header-anchor",href:"#获取功能的方法"},H={id:"绝对路径和相对路径",tabindex:"-1"},X={class:"header-anchor",href:"#绝对路径和相对路径"},Z={id:"判断功能的方法",tabindex:"-1"},$={class:"header-anchor",href:"#判断功能的方法"},Q={id:"创建、删除功能的方法",tabindex:"-1"},Y={class:"header-anchor",href:"#创建、删除功能的方法"},c={id:"目录的遍历",tabindex:"-1"},h={class:"header-anchor",href:"#目录的遍历"},_={id:"递归遍历",tabindex:"-1"},ll={class:"header-anchor",href:"#递归遍历"},sl={id:"randomaccessfile",tabindex:"-1"},nl={class:"header-anchor",href:"#randomaccessfile"},el={id:"构造方法",tabindex:"-1"},il={class:"header-anchor",href:"#构造方法"},al={href:"https://javabetter.cn/io/file-path.html#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},tl={id:"主要方法",tabindex:"-1"},rl={class:"header-anchor",href:"#主要方法"},dl={href:"https://javabetter.cn/io/file-path.html#%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},ol={id:"apache-fileutils-类",tabindex:"-1"},ul={class:"header-anchor",href:"#apache-fileutils-类"},pl={id:"复制文件或目录",tabindex:"-1"},bl={class:"header-anchor",href:"#复制文件或目录"},vl={id:"删除文件或目录",tabindex:"-1"},ml={class:"header-anchor",href:"#删除文件或目录"},gl={id:"移动文件或目录",tabindex:"-1"},fl={class:"header-anchor",href:"#移动文件或目录"},yl={id:"查询文件或目录的信息",tabindex:"-1"},Sl={class:"header-anchor",href:"#查询文件或目录的信息"},wl={id:"hutool-fileutil-类",tabindex:"-1"},Fl={class:"header-anchor",href:"#hutool-fileutil-类"},ql={id:"字符流",tabindex:"-1"},xl={class:"header-anchor",href:"#字符流"},Ol={id:"字符输入流-reader",tabindex:"-1"},jl={class:"header-anchor",href:"#字符输入流-reader"},Il={id:"filereader构造方法",tabindex:"-1"},Wl={class:"header-anchor",href:"#filereader构造方法"},El={id:"filereader读取字符数据",tabindex:"-1"},Bl={class:"header-anchor",href:"#filereader读取字符数据"},Ul={id:"字符输出流-writer",tabindex:"-1"},kl={class:"header-anchor",href:"#字符输出流-writer"},Rl={id:"filewriter-构造方法",tabindex:"-1"},Tl={class:"header-anchor",href:"#filewriter-构造方法"},Pl={id:"filewriter写入数据",tabindex:"-1"},Al={class:"header-anchor",href:"#filewriter写入数据"},zl={id:"关闭close和刷新flush",tabindex:"-1"},Cl={class:"header-anchor",href:"#关闭close和刷新flush"},Dl={id:"filewriter的续写和换行",tabindex:"-1"},Nl={class:"header-anchor",href:"#filewriter的续写和换行"},Jl={href:"https://javabetter.cn/io/stream.html",target:"_blank",rel:"noopener noreferrer"},Ll={id:"文本文件复制",tabindex:"-1"},Vl={class:"header-anchor",href:"#文本文件复制"},Gl={id:"io异常的处理",tabindex:"-1"},Kl={class:"header-anchor",href:"#io异常的处理"},Ml={id:"小结",tabindex:"-1"},Hl={class:"header-anchor",href:"#小结"},Xl={id:"字节流-java-io-基石",tabindex:"-1"},Zl={class:"header-anchor",href:"#字节流-java-io-基石"},$l={id:"字节输出流-outputstream",tabindex:"-1"},Ql={class:"header-anchor",href:"#字节输出流-outputstream"},Yl={id:"fileoutputstream类",tabindex:"-1"},cl={class:"header-anchor",href:"#fileoutputstream类"},hl={id:"fileoutputstream-的构造方法",tabindex:"-1"},_l={class:"header-anchor",href:"#fileoutputstream-的构造方法"},ls={id:"fileoutputstream-写入字节数据",tabindex:"-1"},ss={class:"header-anchor",href:"#fileoutputstream-写入字节数据"},ns={id:"fileoutputstream实现数据追加、换行",tabindex:"-1"},es={class:"header-anchor",href:"#fileoutputstream实现数据追加、换行"},is={id:"字节输入流-inputstream",tabindex:"-1"},as={class:"header-anchor",href:"#字节输入流-inputstream"},ts={id:"fileinputstream类",tabindex:"-1"},rs={class:"header-anchor",href:"#fileinputstream类"},ds={id:"fileinputstream的构造方法",tabindex:"-1"},os={class:"header-anchor",href:"#fileinputstream的构造方法"},us={id:"fileinputstream读取字节数据",tabindex:"-1"},ps={class:"header-anchor",href:"#fileinputstream读取字节数据"},bs={id:"字节流fileinputstream复制图片",tabindex:"-1"},vs={class:"header-anchor",href:"#字节流fileinputstream复制图片"},ms={id:"小结-1",tabindex:"-1"},gs={class:"header-anchor",href:"#小结-1"},fs={href:"https://javabetter.cn/io/stream.html#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"},ys={id:"缓冲流",tabindex:"-1"},Ss={class:"header-anchor",href:"#缓冲流"},ws={id:"字节缓冲流",tabindex:"-1"},Fs={class:"header-anchor",href:"#字节缓冲流"},qs={id:"构造方法-1",tabindex:"-1"},xs={class:"header-anchor",href:"#构造方法-1"},Os={id:"缓冲流的高效",tabindex:"-1"},js={class:"header-anchor",href:"#缓冲流的高效"},Is={id:"为什么字节缓冲流会这么快",tabindex:"-1"},Ws={class:"header-anchor",href:"#为什么字节缓冲流会这么快"},Es={id:"byte-0xff",tabindex:"-1"},Bs={class:"header-anchor",href:"#byte-0xff"},Us={id:"字符缓冲流",tabindex:"-1"},ks={class:"header-anchor",href:"#字符缓冲流"},Rs={id:"构造方法-2",tabindex:"-1"},Ts={class:"header-anchor",href:"#构造方法-2"},Ps={id:"字符缓冲流特有方法",tabindex:"-1"},As={class:"header-anchor",href:"#字符缓冲流特有方法"},zs={id:"字符缓冲流练习",tabindex:"-1"},Cs={class:"header-anchor",href:"#字符缓冲流练习"},Ds={id:"转换流",tabindex:"-1"},Ns={class:"header-anchor",href:"#转换流"},Js={id:"编码和解码",tabindex:"-1"},Ls={class:"header-anchor",href:"#编码和解码"},Vs={id:"字符集",tabindex:"-1"},Gs={class:"header-anchor",href:"#字符集"},Ks={id:"ascii-字符集",tabindex:"-1"},Ms={class:"header-anchor",href:"#ascii-字符集"},Hs={id:"unicode-字符集",tabindex:"-1"},Xs={class:"header-anchor",href:"#unicode-字符集"},Zs={id:"gbk-字符集",tabindex:"-1"},$s={class:"header-anchor",href:"#gbk-字符集"},Qs={id:"乱码",tabindex:"-1"},Ys={class:"header-anchor",href:"#乱码"},cs={id:"inputstreamreader",tabindex:"-1"},hs={class:"header-anchor",href:"#inputstreamreader"},_s={id:"构造方法-3",tabindex:"-1"},ln={class:"header-anchor",href:"#构造方法-3"},sn={id:"解决编码问题",tabindex:"-1"},nn={class:"header-anchor",href:"#解决编码问题"},en={id:"outputstreamwriter",tabindex:"-1"},an={class:"header-anchor",href:"#outputstreamwriter"},tn={id:"小结-2",tabindex:"-1"},rn={class:"header-anchor",href:"#小结-2"},dn={id:"序列流-序列化和反序列化",tabindex:"-1"},on={class:"header-anchor",href:"#序列流-序列化和反序列化"},un={id:"objectoutputstream",tabindex:"-1"},pn={class:"header-anchor",href:"#objectoutputstream"},bn={id:"objectinputstream",tabindex:"-1"},vn={class:"header-anchor",href:"#objectinputstream"},mn={id:"kryo",tabindex:"-1"},gn={class:"header-anchor",href:"#kryo"},fn={id:"序列接口-serializable",tabindex:"-1"},yn={class:"header-anchor",href:"#序列接口-serializable"},Sn={id:"先来点理论",tabindex:"-1"},wn={class:"header-anchor",href:"#先来点理论"},Fn={id:"再来点实战",tabindex:"-1"},qn={class:"header-anchor",href:"#再来点实战"},xn={id:"再来点注意事项",tabindex:"-1"},On={class:"header-anchor",href:"#再来点注意事项"},jn={id:"再来点干货",tabindex:"-1"},In={class:"header-anchor",href:"#再来点干货"},Wn={id:"再来点甜点",tabindex:"-1"},En={class:"header-anchor",href:"#再来点甜点"},Bn={id:"transient-关键字",tabindex:"-1"},Un={class:"header-anchor",href:"#transient-关键字"},kn={id:"transient-的作用及使用方法",tabindex:"-1"},Rn={class:"header-anchor",href:"#transient-的作用及使用方法"},Tn={id:"transient-使用小结",tabindex:"-1"},Pn={class:"header-anchor",href:"#transient-使用小结"},An={id:"transient-修饰的字段真的不能被序列化",tabindex:"-1"},zn={class:"header-anchor",href:"#transient-修饰的字段真的不能被序列化"},Cn={id:"小结-3",tabindex:"-1"},Dn={class:"header-anchor",href:"#小结-3"},Nn={id:"打印流",tabindex:"-1"},Jn={class:"header-anchor",href:"#打印流"};function Ln(Vn,l){const e=d("font"),r=d("ExternalLinkIcon");return p(),u("div",null,[a("h2",v,[a("a",m,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[0]||(l[0]=[s("Java IO 知识体系")])),_:1})])])]),l[1556]||(l[1556]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727436392665-6fedbe04-d6b9-4b23-a4e0-c51cc44664ad.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1]||(l[1]=[s("好久没搞过 IO 了，老王看到这幅思维导图也是吃了一惊。想想也是，他当初学习 Java IO 的时候头也大，乌央乌央的一片，全是类，估计是所有 Java 包里面类最多的，一会是 Input 一会是 Output，一会是 Reader 一会是 Writer，真不知道 Java 的设计者是怎么想的。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[2]||(l[2]=[s("看着肺都快要气炸的小二，老王深深地吸了一口气，耐心地对小二说：“主要是 Java 的设计者考虑得比较多吧，所以 IO 给人一种很乱的感觉，我来给你梳理一下。”")])),_:1}),a("h3",g,[a("a",f,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[3]||(l[3]=[s("初识 Java IO")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[4]||(l[4]=[s("IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[5]||(l[5]=[s("Java 中是通过流处理 IO 的，那么什么是流？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[6]||(l[6]=[s("流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以先进先出的方式发送信息的通道。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[7]||(l[7]=[s("当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[8]||(l[8]=[s("一般来说关于流的特性有下面几点：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[9]||(l[9]=[s("先进先出：最先写入输出流的数据最先被输入流读取到。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[10]||(l[10]=[s("顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[11]||(l[11]=[s("只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流。")])),_:1})])]),a("h3",y,[a("a",S,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[12]||(l[12]=[s("传输方式划分")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[13]||(l[13]=[s("就按照你的那副思维导图来说吧。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[14]||(l[14]=[s("传输方式有两种，字节和字符，那首先得搞明白字节和字符有什么区别，对吧？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[15]||(l[15]=[s("字节（byte）是计算机中用来表示存储容量的一个计量单位，通常情况下，一个字节有 8 位（bit）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[16]||(l[16]=[s("字符（char）可以是计算机中使用的字母、数字、和符号，比如说 A 1 $ 这些。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[17]||(l[17]=[s("通常来说，一个字母或者一个字符占用一个字节，一个汉字占用两个字节。")])),_:1}),l[1557]||(l[1557]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727436383981-ff562789-3576-48b2-aa89-bc59d99aee18.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[18]||(l[18]=[s("具体还要看字符编码，比如说在")])),_:1}),l[1558]||(l[1558]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[19]||(l[19]=[s(" UTF-8 编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为三个字节")])),_:1}),l[1559]||(l[1559]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[20]||(l[20]=[s("；在 Unicode 编码中，一个英文字母为一个字节，一个中文汉字为两个字节。")])),_:1}),a("blockquote",null,[n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[21]||(l[21]=[s("PS：关于字符编码，可以看前面的章节：")])),_:1}),l[23]||(l[23]=s("[")),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[22]||(l[22]=[s("锟斤拷")])),_:1}),l[24]||(l[24]=s("](https://javabetter.cn/basic-extra-meal/java-unicode.html)"))]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[25]||(l[25]=[s("明白了字节与字符的区别，再来看字节流和字符流就会轻松多了。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[26]||(l[26]=[s("字节流用来处理二进制文件，比如说图片啊、MP3 啊、视频啊。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[27]||(l[27]=[s("字符流用来处理文本文件，文本文件可以看作是一种特殊的二进制文件，只不过经过了编码，便于人们阅读。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[28]||(l[28]=[s("换句话说就是，字节流可以处理一切文件，而字符流只能处理文本。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[29]||(l[29]=[s("虽然 IO 类很多，但核心的就是 4 个抽象类：InputStream、OutputStream、Reader、Writer。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[30]||(l[30]=[s("（")])),_:1}),l[1560]||(l[1560]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[31]||(l[31]=[s("抽象大法真好")])),_:1}),l[1561]||(l[1561]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[32]||(l[32]=[s("）")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[33]||(l[33]=[s("虽然 IO 类的方法也很多，但核心的也就 2 个：read 和 write。")])),_:1}),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[34]||(l[34]=[s("InputStream 类")])),_:1})])]),a("ul",null,[a("li",null,[l[36]||(l[36]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[35]||(l[35]=[s("：读取数据")])),_:1})]),a("li",null,[l[38]||(l[38]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read(byte b[], int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[37]||(l[37]=[s("：从第 off 位置开始读，读取 len 长度的字节，然后放入数组 b 中")])),_:1})]),a("li",null,[l[40]||(l[40]=a("code",null,'<font style="color:rgb(44, 62, 80);">long skip(long n)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[39]||(l[39]=[s("：跳过指定个数的字节")])),_:1})]),a("li",null,[l[42]||(l[42]=a("code",null,'<font style="color:rgb(44, 62, 80);">int available()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[41]||(l[41]=[s("：返回可读的字节数")])),_:1})]),a("li",null,[l[44]||(l[44]=a("code",null,'<font style="color:rgb(44, 62, 80);">void close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[43]||(l[43]=[s("：关闭流，释放资源")])),_:1})])]),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[45]||(l[45]=[s("OutputStream 类")])),_:1})])]),a("ul",null,[a("li",null,[l[47]||(l[47]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(int b)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[46]||(l[46]=[s("： 写入一个字节，虽然参数是一个 int 类型，但只有低 8 位才会写入，高 24 位会舍弃（这块后面再讲）")])),_:1})]),a("li",null,[l[49]||(l[49]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(byte b[], int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[48]||(l[48]=[s("： 将数组 b 中的从 off 位置开始，长度为 len 的字节写入")])),_:1})]),a("li",null,[l[51]||(l[51]=a("code",null,'<font style="color:rgb(44, 62, 80);">void flush()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[50]||(l[50]=[s("： 强制刷新，将缓冲区的数据写入")])),_:1})]),a("li",null,[l[53]||(l[53]=a("code",null,'<font style="color:rgb(44, 62, 80);">void close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[52]||(l[52]=[s("：关闭流")])),_:1})])]),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[54]||(l[54]=[s("Reader 类")])),_:1})])]),a("ul",null,[a("li",null,[l[56]||(l[56]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[55]||(l[55]=[s("：读取单个字符")])),_:1})]),a("li",null,[l[58]||(l[58]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read(char cbuf[], int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[57]||(l[57]=[s("：从第 off 位置开始读，读取 len 长度的字符，然后放入数组 b 中")])),_:1})]),a("li",null,[l[60]||(l[60]=a("code",null,'<font style="color:rgb(44, 62, 80);">long skip(long n)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[59]||(l[59]=[s("：跳过指定个数的字符")])),_:1})]),a("li",null,[l[62]||(l[62]=a("code",null,'<font style="color:rgb(44, 62, 80);">int ready()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[61]||(l[61]=[s("：是否可以读了")])),_:1})]),a("li",null,[l[64]||(l[64]=a("code",null,'<font style="color:rgb(44, 62, 80);">void close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[63]||(l[63]=[s("：关闭流，释放资源")])),_:1})])]),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[65]||(l[65]=[s("Writer 类")])),_:1})])]),a("ul",null,[a("li",null,[l[67]||(l[67]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(int c)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[66]||(l[66]=[s("： 写入一个字符")])),_:1})]),a("li",null,[l[69]||(l[69]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write( char cbuf[], int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[68]||(l[68]=[s("： 将数组 cbuf 中的从 off 位置开始，长度为 len 的字符写入")])),_:1})]),a("li",null,[l[71]||(l[71]=a("code",null,'<font style="color:rgb(44, 62, 80);">void flush()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[70]||(l[70]=[s("： 强制刷新，将缓冲区的数据写入")])),_:1})]),a("li",null,[l[73]||(l[73]=a("code",null,'<font style="color:rgb(44, 62, 80);">void close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[72]||(l[72]=[s("：关闭流")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[74]||(l[74]=[s("理解了上面这些方法，基本上 IO 的灵魂也就全部掌握了。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[75]||(l[75]=[s("字节流和字符流的区别：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[76]||(l[76]=[s("字节流一般用来处理图像、视频、音频、PPT、Word等类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，但不能处理图像视频等非文本文件。用一句话说就是：字节流可以处理一切文件，而字符流只能处理纯文本文件。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[77]||(l[77]=[s("字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[78]||(l[78]=[s("以写文件为例，我们查看字符流的源码，发现确实有利用到缓冲区：")])),_:1}),l[1562]||(l[1562]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 声明一个 char 类型的数组，用于写入输出流</span>
<span class="line">private char[] writeBuffer;</span>
<span class="line"></span>
<span class="line">// 定义 writeBuffer 数组的大小，必须 &gt;= 1</span>
<span class="line">private static final int WRITE_BUFFER_SIZE = 1024;</span>
<span class="line"></span>
<span class="line">// 写入给定字符串中的一部分到输出流中</span>
<span class="line">public void write(String str, int off, int len) throws IOException {</span>
<span class="line">    // 使用 synchronized 关键字同步代码块，确保线程安全</span>
<span class="line">    synchronized (lock) {</span>
<span class="line">        char cbuf[];</span>
<span class="line">        // 如果 len &lt;= WRITE_BUFFER_SIZE，则使用 writeBuffer 数组进行写入</span>
<span class="line">        if (len &lt;= WRITE_BUFFER_SIZE) {</span>
<span class="line">            // 如果 writeBuffer 为 null，则创建一个大小为 WRITE_BUFFER_SIZE 的新 char 数组</span>
<span class="line">            if (writeBuffer == null) {</span>
<span class="line">                writeBuffer = new char[WRITE_BUFFER_SIZE];</span>
<span class="line">            }</span>
<span class="line">            cbuf = writeBuffer;</span>
<span class="line">        } else {    // 如果 len &gt; WRITE_BUFFER_SIZE，则不永久分配非常大的缓冲区</span>
<span class="line">            // 创建一个大小为 len 的新 char 数组</span>
<span class="line">            cbuf = new char[len];</span>
<span class="line">        }</span>
<span class="line">        // 将 str 中的一部分（从 off 开始，长度为 len）拷贝到 cbuf 数组中</span>
<span class="line">        str.getChars(off, (off + len), cbuf, 0);</span>
<span class="line">        // 将 cbuf 数组中的数据写入输出流中</span>
<span class="line">        write(cbuf, 0, len);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[79]||(l[79]=[s("这段代码是 Java IO 类库中的 OutputStreamWriter 类的 write 方法，可以看到缓冲区的大小是 1024 个 char。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[80]||(l[80]=[s("我们再以文件的字符流和字节流来做一下对比，代码差别很小。")])),_:1}),l[1563]||(l[1563]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 字节流</span>
<span class="line">try (FileInputStream fis = new FileInputStream(&quot;input.txt&quot;);</span>
<span class="line">     FileOutputStream fos = new FileOutputStream(&quot;output.txt&quot;)) {</span>
<span class="line">    byte[] buffer = new byte[1024];</span>
<span class="line">    int len;</span>
<span class="line">    while ((len = fis.read(buffer)) != -1) {</span>
<span class="line">        fos.write(buffer, 0, len);</span>
<span class="line">    }</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 字符流</span>
<span class="line">try (FileReader fr = new FileReader(&quot;input.txt&quot;);</span>
<span class="line">     FileWriter fw = new FileWriter(&quot;output.txt&quot;)) {</span>
<span class="line">    char[] buffer = new char[1024];</span>
<span class="line">    int len;</span>
<span class="line">    while ((len = fr.read(buffer)) != -1) {</span>
<span class="line">        fw.write(buffer, 0, len);</span>
<span class="line">    }</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h3",w,[a("a",F,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[81]||(l[81]=[s("操作对象划分")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[82]||(l[82]=[s("小二，你细想一下，IO IO，不就是输入输出（Input/Output）嘛：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[83]||(l[83]=[s("Input：将外部的数据读入内存，比如说把文件从硬盘读取到内存，从网络读取数据到内存等等")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[84]||(l[84]=[s("Output：将内存中的数据写入到外部，比如说把数据从内存写入到文件，把数据从内存输出到网络等等。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[85]||(l[85]=[s("所有的程序，在执行的时候，都是在内存上进行的，一旦关机，内存中的数据就没了，那如果想要持久化，就需要把内存中的数据输出到外部，比如说文件。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[86]||(l[86]=[s("文件操作算是 IO 中最典型的操作了，也是最频繁的操作。那其实你可以换个角度来思考，比如说按照 IO 的操作对象来思考，IO 就可以分类为：文件、数组、管道、基本数据类型、缓冲、打印、对象序列化/反序列化，以及转换等。")])),_:1}),l[1564]||(l[1564]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727436380851-29bd9a79-4e4c-4b09-90ed-6c551cf18473.png"},null,-1)),a("h4",q,[a("a",x,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[87]||(l[87]=[s("文件")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[88]||(l[88]=[s("文件流也就是直接操作文件的流，可以细分为字节流（FileInputStream 和 FileOuputStream）和字符流（FileReader 和 FileWriter）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[89]||(l[89]=[s("FileInputStream 的例子：")])),_:1}),l[1565]||(l[1565]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span>
<span class="line">int b;</span>
<span class="line">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span>
<span class="line">FileInputStream fis1 = new FileInputStream(&quot;fis.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 循环读取文件中的数据</span>
<span class="line">while ((b = fis1.read()) != -1) {</span>
<span class="line">    // 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span>
<span class="line">    System.out.println((char)b);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭 FileInputStream 对象，释放资源</span>
<span class="line">fis1.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[90]||(l[90]=[s("FileOutputStream 的例子：")])),_:1}),l[1566]||(l[1566]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileOutputStream 对象，用于写入数据到文件 fos.txt 中</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 向文件中写入数据，这里写入的是字符串 &quot;沉默王二&quot; 对应的字节数组</span>
<span class="line">fos.write(&quot;沉默王二&quot;.getBytes());</span>
<span class="line"></span>
<span class="line">// 关闭 FileOutputStream 对象，释放资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[91]||(l[91]=[s("FileReader 的例子：")])),_:1}),l[1567]||(l[1567]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 声明一个 int 类型的变量 b，用于存储读取到的字符</span>
<span class="line">int b = 0;</span>
<span class="line"></span>
<span class="line">// 创建一个 FileReader 对象，用于读取文件 read.txt 中的数据</span>
<span class="line">FileReader fileReader = new FileReader(&quot;read.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 循环读取文件中的数据</span>
<span class="line">while ((b = fileReader.read()) != -1) {</span>
<span class="line">    // 将读取到的字符强制转换为 char 类型，并输出到控制台</span>
<span class="line">    System.out.println((char)b);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭 FileReader 对象，释放资源</span>
<span class="line">fileReader.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[92]||(l[92]=[s("FileWriter 的例子：")])),_:1}),l[1568]||(l[1568]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileWriter 对象，用于写入数据到文件 fw.txt 中</span>
<span class="line">FileWriter fileWriter = new FileWriter(&quot;fw.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 将字符串 &quot;沉默王二&quot; 转换为字符数组</span>
<span class="line">char[] chars = &quot;沉默王二&quot;.toCharArray();</span>
<span class="line"></span>
<span class="line">// 向文件中写入数据，这里写入的是 chars 数组中的所有字符</span>
<span class="line">fileWriter.write(chars, 0, chars.length);</span>
<span class="line"></span>
<span class="line">// 关闭 FileWriter 对象，释放资源</span>
<span class="line">fileWriter.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[93]||(l[93]=[s("文件流还可以用于创建、删除、重命名文件等操作。FileOutputStream 和 FileWriter 构造函数的第二个参数可以指定是否追加数据到文件末尾。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[94]||(l[94]=[s("示例代码：")])),_:1}),l[1569]||(l[1569]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建文件</span>
<span class="line">File file = new File(&quot;test.txt&quot;);</span>
<span class="line">if (file.createNewFile()) {</span>
<span class="line">    System.out.println(&quot;文件创建成功&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;文件已存在&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 删除文件</span>
<span class="line">if (file.delete()) {</span>
<span class="line">    System.out.println(&quot;文件删除成功&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;文件删除失败&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 重命名文件</span>
<span class="line">File oldFile = new File(&quot;old.txt&quot;);</span>
<span class="line">File newFile = new File(&quot;new.txt&quot;);</span>
<span class="line">if (oldFile.renameTo(newFile)) {</span>
<span class="line">    System.out.println(&quot;文件重命名成功&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;文件重命名失败&quot;);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[95]||(l[95]=[s("当掌握了文件的输入输出，其他的自然也就掌握了，都大差不差。")])),_:1}),a("h4",O,[a("a",j,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[96]||(l[96]=[s("数组（内存）")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[97]||(l[97]=[s("通常来说，针对文件的读写操作，使用文件流配合缓冲流就够用了，但为了提升效率，频繁地读写文件并不是太好，那么就出现了数组流，有时候也称为内存流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[98]||(l[98]=[s("ByteArrayInputStream 的例子：")])),_:1}),l[1570]||(l[1570]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 ByteArrayInputStream 对象，用于从字节数组中读取数据</span>
<span class="line">InputStream is = new BufferedInputStream(</span>
<span class="line">        new ByteArrayInputStream(</span>
<span class="line">                &quot;沉默王二&quot;.getBytes(StandardCharsets.UTF_8)));</span>
<span class="line"></span>
<span class="line">// 定义一个字节数组用于存储读取到的数据</span>
<span class="line">byte[] flush = new byte[1024];</span>
<span class="line"></span>
<span class="line">// 定义一个变量用于存储每次读取到的字节数</span>
<span class="line">int len = 0;</span>
<span class="line"></span>
<span class="line">// 循环读取字节数组中的数据，并输出到控制台</span>
<span class="line">while (-1 != (len = is.read(flush))) {</span>
<span class="line">    // 将读取到的字节转换为对应的字符串，并输出到控制台</span>
<span class="line">    System.out.println(new String(flush, 0, len));</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭输入流，释放资源</span>
<span class="line">is.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[99]||(l[99]=[s("ByteArrayOutputStream 的例子：")])),_:1}),l[1571]||(l[1571]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 ByteArrayOutputStream 对象，用于写入数据到内存缓冲区中</span>
<span class="line">ByteArrayOutputStream bos = new ByteArrayOutputStream();</span>
<span class="line"></span>
<span class="line">// 定义一个字节数组用于存储要写入内存缓冲区中的数据</span>
<span class="line">byte[] info = &quot;沉默王二&quot;.getBytes();</span>
<span class="line"></span>
<span class="line">// 向内存缓冲区中写入数据，这里写入的是 info 数组中的所有字节</span>
<span class="line">bos.write(info, 0, info.length);</span>
<span class="line"></span>
<span class="line">// 将内存缓冲区中的数据转换为字节数组</span>
<span class="line">byte[] dest = bos.toByteArray();</span>
<span class="line"></span>
<span class="line">// 关闭 ByteArrayOutputStream 对象，释放资源</span>
<span class="line">bos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[100]||(l[100]=[s("数组流可以用于在内存中读写数据，比如将数据存储在字节数组中进行压缩、加密、序列化等操作。它的优点是不需要创建临时文件，可以提高程序的效率。但是，数组流也有缺点，它只能存储有限的数据量，如果存储的数据量过大，会导致内存溢出。")])),_:1}),a("h4",I,[a("a",W,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[101]||(l[101]=[s("管道")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[102]||(l[102]=[s("Java 中的管道和 Unix/Linux 中的管道不同，在 Unix/Linux 中，不同的进程之间可以通过管道来通信，但 Java 中，通信的双方必须在同一个进程中，也就是在同一个 JVM 中，管道为线程之间的通信提供了通信能力。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[103]||(l[103]=[s("一个线程通过 PipedOutputStream 写入的数据可以被另外一个线程通过相关联的 PipedInputStream 读取出来。")])),_:1}),l[1572]||(l[1572]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 PipedOutputStream 对象和一个 PipedInputStream 对象</span>
<span class="line">final PipedOutputStream pipedOutputStream = new PipedOutputStream();</span>
<span class="line">final PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream);</span>
<span class="line"></span>
<span class="line">// 创建一个线程，向 PipedOutputStream 中写入数据</span>
<span class="line">Thread thread1 = new Thread(new Runnable() {</span>
<span class="line">    @Override</span>
<span class="line">    public void run() {</span>
<span class="line">        try {</span>
<span class="line">            // 将字符串 &quot;沉默王二&quot; 转换为字节数组，并写入到 PipedOutputStream 中</span>
<span class="line">            pipedOutputStream.write(&quot;沉默王二&quot;.getBytes(StandardCharsets.UTF_8));</span>
<span class="line">            // 关闭 PipedOutputStream，释放资源</span>
<span class="line">            pipedOutputStream.close();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">});</span>
<span class="line"></span>
<span class="line">// 创建一个线程，从 PipedInputStream 中读取数据并输出到控制台</span>
<span class="line">Thread thread2 = new Thread(new Runnable() {</span>
<span class="line">    @Override</span>
<span class="line">    public void run() {</span>
<span class="line">        try {</span>
<span class="line">            // 定义一个字节数组用于存储读取到的数据</span>
<span class="line">            byte[] flush = new byte[1024];</span>
<span class="line">            // 定义一个变量用于存储每次读取到的字节数</span>
<span class="line">            int len = 0;</span>
<span class="line">            // 循环读取字节数组中的数据，并输出到控制台</span>
<span class="line">            while (-1 != (len = pipedInputStream.read(flush))) {</span>
<span class="line">                // 将读取到的字节转换为对应的字符串，并输出到控制台</span>
<span class="line">                System.out.println(new String(flush, 0, len));</span>
<span class="line">            }</span>
<span class="line">            // 关闭 PipedInputStream，释放资源</span>
<span class="line">            pipedInputStream.close();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">});</span>
<span class="line"></span>
<span class="line">// 启动线程1和线程2</span>
<span class="line">thread1.start();</span>
<span class="line">thread2.start();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[104]||(l[104]=[s("使用管道流可以实现不同线程之间的数据传输，可以用于线程间的通信、数据的传递等。但是，管道流也有一些局限性，比如只能在同一个 JVM 中的线程之间使用，不能跨越不同的 JVM 进程。")])),_:1}),a("h4",E,[a("a",B,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[105]||(l[105]=[s("基本数据类型")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[106]||(l[106]=[s("基本数据类型输入输出流是一个字节流，该流不仅可以读写字节和字符，还可以读写基本数据类型。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[107]||(l[107]=[s("DataInputStream 提供了一系列可以读基本数据类型的方法：")])),_:1}),l[1573]||(l[1573]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 DataInputStream 对象，用于从文件中读取数据</span>
<span class="line">DataInputStream dis = new DataInputStream(new FileInputStream(&quot;das.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 读取一个字节，将其转换为 byte 类型</span>
<span class="line">byte b = dis.readByte();</span>
<span class="line"></span>
<span class="line">// 读取两个字节，将其转换为 short 类型</span>
<span class="line">short s = dis.readShort();</span>
<span class="line"></span>
<span class="line">// 读取四个字节，将其转换为 int 类型</span>
<span class="line">int i = dis.readInt();</span>
<span class="line"></span>
<span class="line">// 读取八个字节，将其转换为 long 类型</span>
<span class="line">long l = dis.readLong();</span>
<span class="line"></span>
<span class="line">// 读取四个字节，将其转换为 float 类型</span>
<span class="line">float f = dis.readFloat();</span>
<span class="line"></span>
<span class="line">// 读取八个字节，将其转换为 double 类型</span>
<span class="line">double d = dis.readDouble();</span>
<span class="line"></span>
<span class="line">// 读取一个字节，将其转换为 boolean 类型</span>
<span class="line">boolean bb = dis.readBoolean();</span>
<span class="line"></span>
<span class="line">// 读取两个字节，将其转换为 char 类型</span>
<span class="line">char ch = dis.readChar();</span>
<span class="line"></span>
<span class="line">// 关闭 DataInputStream，释放资源</span>
<span class="line">dis.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[108]||(l[108]=[s("DataOutputStream 提供了一系列可以写基本数据类型的方法：")])),_:1}),l[1574]||(l[1574]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 DataOutputStream 对象，用于将数据写入到文件中</span>
<span class="line">DataOutputStream das = new DataOutputStream(new FileOutputStream(&quot;das.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 将一个 byte 类型的数据写入到文件中</span>
<span class="line">das.writeByte(10);</span>
<span class="line"></span>
<span class="line">// 将一个 short 类型的数据写入到文件中</span>
<span class="line">das.writeShort(100);</span>
<span class="line"></span>
<span class="line">// 将一个 int 类型的数据写入到文件中</span>
<span class="line">das.writeInt(1000);</span>
<span class="line"></span>
<span class="line">// 将一个 long 类型的数据写入到文件中</span>
<span class="line">das.writeLong(10000L);</span>
<span class="line"></span>
<span class="line">// 将一个 float 类型的数据写入到文件中</span>
<span class="line">das.writeFloat(12.34F);</span>
<span class="line"></span>
<span class="line">// 将一个 double 类型的数据写入到文件中</span>
<span class="line">das.writeDouble(12.56);</span>
<span class="line"></span>
<span class="line">// 将一个 boolean 类型的数据写入到文件中</span>
<span class="line">das.writeBoolean(true);</span>
<span class="line"></span>
<span class="line">// 将一个 char 类型的数据写入到文件中</span>
<span class="line">das.writeChar(&#39;A&#39;);</span>
<span class="line"></span>
<span class="line">// 关闭 DataOutputStream，释放资源</span>
<span class="line">das.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[109]||(l[109]=[s("除了 DataInputStream 和 DataOutputStream，Java IO 还提供了其他一些读写基本数据类型和字符串的流类，包括 ObjectInputStream 和 ObjectOutputStream（用于读写对象）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[110]||(l[110]=[s("示例代码：")])),_:1}),l[1575]||(l[1575]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void main(String[] args) {</span>
<span class="line">    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;person.dat&quot;))) {</span>
<span class="line">        Person p = new Person(&quot;张三&quot;, 20);</span>
<span class="line">        oos.writeObject(p);</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;person.dat&quot;))) {</span>
<span class="line">        Person p = (Person) ois.readObject();</span>
<span class="line">        System.out.println(p);</span>
<span class="line">    } catch (IOException | ClassNotFoundException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[111]||(l[111]=[s("以上代码创建了一个 Person 对象，将其写入文件中，然后从文件中读取该对象，并打印在控制台上。")])),_:1}),a("h4",U,[a("a",k,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[112]||(l[112]=[s("缓冲")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[113]||(l[113]=[s("CPU 很快，它比内存快 100 倍，比磁盘快百万倍。那也就意味着，程序和内存交互会很快，和硬盘交互相对就很慢，这样就会导致性能问题。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[114]||(l[114]=[s("为了减少程序和硬盘的交互，提升程序的效率，就引入了缓冲流，也就是类名前缀带有 Buffer 的那些，比如说 BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter。")])),_:1}),l[1576]||(l[1576]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727436386136-651d69f2-0a16-4247-a69f-7d9c7b8cd96c.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[115]||(l[115]=[s("缓冲流在内存中设置了一个缓冲区，只有缓冲区存储了足够多的带操作的数据后，才会和内存或者硬盘进行交互。简单来说，就是一次多读/写点，少读/写几次，这样程序的性能就会提高。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[116]||(l[116]=[s("以下是一个使用 BufferedInputStream 读取文件的示例代码：")])),_:1}),l[1577]||(l[1577]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 BufferedInputStream 对象，用于从文件中读取数据</span>
<span class="line">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;data.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 创建一个字节数组，作为缓存区</span>
<span class="line">byte[] buffer = new byte[1024];</span>
<span class="line"></span>
<span class="line">// 读取文件中的数据，并将其存储到缓存区中</span>
<span class="line">int bytesRead;</span>
<span class="line">while ((bytesRead = bis.read(buffer)) != -1) {</span>
<span class="line">    // 对缓存区中的数据进行处理</span>
<span class="line">    // 这里只是简单地将读取到的字节数组转换为字符串并打印出来</span>
<span class="line">    System.out.println(new String(buffer, 0, bytesRead));</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭 BufferedInputStream，释放资源</span>
<span class="line">bis.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[117]||(l[117]=[s("上述代码中，首先创建了一个 BufferedInputStream 对象，用于从文件中读取数据。然后创建了一个字节数组作为缓存区，每次读取数据时将数据存储到缓存区中。读取数据的过程是通过 while 循环实现的，每次读取数据后对缓存区中的数据进行处理。最后关闭 BufferedInputStream，释放资源。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[118]||(l[118]=[s("以下是一个使用 BufferedOutputStream 写入文件的示例代码：")])),_:1}),l[1578]||(l[1578]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 BufferedOutputStream 对象，用于将数据写入到文件中</span>
<span class="line">BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;data.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 创建一个字节数组，作为缓存区</span>
<span class="line">byte[] buffer = new byte[1024];</span>
<span class="line"></span>
<span class="line">// 将数据写入到文件中</span>
<span class="line">String data = &quot;沉默王二是个大傻子!&quot;;</span>
<span class="line">buffer = data.getBytes();</span>
<span class="line">bos.write(buffer);</span>
<span class="line"></span>
<span class="line">// 刷新缓存区，将缓存区中的数据写入到文件中</span>
<span class="line">bos.flush();</span>
<span class="line"></span>
<span class="line">// 关闭 BufferedOutputStream，释放资源</span>
<span class="line">bos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[119]||(l[119]=[s("上述代码中，首先创建了一个 BufferedOutputStream 对象，用于将数据写入到文件中。然后创建了一个字节数组作为缓存区，将数据写入到缓存区中。写入数据的过程是通过 write() 方法实现的，将字节数组作为参数传递给 write() 方法即可。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[120]||(l[120]=[s("最后，通过 flush() 方法将缓存区中的数据写入到文件中。在写入数据时，由于使用了 BufferedOutputStream，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[121]||(l[121]=[s("以下是一个使用 BufferedReader 读取文件的示例代码：")])),_:1}),l[1579]||(l[1579]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 BufferedReader 对象，用于从文件中读取数据</span>
<span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;data.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 读取文件中的数据，并将其存储到字符串中</span>
<span class="line">String line;</span>
<span class="line">while ((line = br.readLine()) != null) {</span>
<span class="line">    // 对读取到的数据进行处理</span>
<span class="line">    // 这里只是简单地将读取到的每一行字符串打印出来</span>
<span class="line">    System.out.println(line);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭 BufferedReader，释放资源</span>
<span class="line">br.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[122]||(l[122]=[s("上述代码中，首先创建了一个 BufferedReader 对象，用于从文件中读取数据。然后使用 readLine() 方法读取文件中的数据，每次读取一行数据并将其存储到一个字符串中。读取数据的过程是通过 while 循环实现的。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[123]||(l[123]=[s("以下是一个使用 BufferedWriter 写入文件的示例代码：")])),_:1}),l[1580]||(l[1580]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 BufferedWriter 对象，用于将数据写入到文件中</span>
<span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;data.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 将数据写入到文件中</span>
<span class="line">String data = &quot;沉默王二，真帅气&quot;;</span>
<span class="line">bw.write(data);</span>
<span class="line"></span>
<span class="line">// 刷新缓存区，将缓存区中的数据写入到文件中</span>
<span class="line">bw.flush();</span>
<span class="line"></span>
<span class="line">// 关闭 BufferedWriter，释放资源</span>
<span class="line">bw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[124]||(l[124]=[s("上述代码中，首先创建了一个 BufferedWriter 对象，用于将数据写入到文件中。然后使用 write() 方法将数据写入到缓存区中，写入数据的过程和使用 FileWriter 类似。需要注意的是，使用 BufferedWriter 写入数据时，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[125]||(l[125]=[s("最后，通过 flush() 方法将缓存区中的数据写入到文件中，并通过 close() 方法关闭 BufferedWriter，释放资源。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[126]||(l[126]=[s("使用缓冲流可以提高读写效率，减少了频繁的读写磁盘或网络的次数，从而提高了程序的性能。但是，在使用缓冲流时需要注意缓冲区的大小和清空缓冲区的时机，以避免数据丢失或不完整的问题。")])),_:1}),a("h4",R,[a("a",T,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[127]||(l[127]=[s("打印")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[128]||(l[128]=[s("Java 的打印流是一组用于打印输出数据的类，包括 PrintStream 和 PrintWriter 两个类。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[129]||(l[129]=[s("恐怕 Java 程序员一生当中最常用的就是打印流了：")])),_:1}),l[1581]||(l[1581]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[130]||(l[130]=[s("System.out")])),_:1}),l[1582]||(l[1582]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[131]||(l[131]=[s("其实返回的就是一个 PrintStream 对象，可以用来打印各式各样的对象。")])),_:1}),l[1583]||(l[1583]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">System.out.println(&quot;沉默王二是真的二！&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[132]||(l[132]=[s("PrintStream 最终输出的是字节数据，而 PrintWriter 则是扩展了 Writer 接口，所以它的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1584]||(l[1584]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[133]||(l[133]=[s("print()/println()")])),_:1}),l[1585]||(l[1585]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[134]||(l[134]=[s("方法最终输出的是字符数据。使用上几乎和 PrintStream 一模一样。")])),_:1}),l[1586]||(l[1586]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">StringWriter buffer = new StringWriter();</span>
<span class="line">try (PrintWriter pw = new PrintWriter(buffer)) {</span>
<span class="line">    pw.println(&quot;沉默王二&quot;);</span>
<span class="line">}</span>
<span class="line">System.out.println(buffer.toString());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",P,[a("a",A,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[135]||(l[135]=[s("对象序列化/反序列化")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[136]||(l[136]=[s("序列化本质上是将一个 Java 对象转成字节数组，然后可以将其保存到文件中，或者通过网络传输到远程。")])),_:1}),l[1587]||(l[1587]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据</span>
<span class="line">ByteArrayOutputStream buffer = new ByteArrayOutputStream();</span>
<span class="line"></span>
<span class="line">// 使用 try-with-resources 语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联</span>
<span class="line">try (ObjectOutputStream output = new ObjectOutputStream(buffer)) {</span>
<span class="line">    </span>
<span class="line">    // 使用 writeUTF() 方法将字符串 &quot;沉默王二&quot; 写入到缓冲区中</span>
<span class="line">    output.writeUTF(&quot;沉默王二&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 使用 toByteArray() 方法将缓冲区中的数据转换成字节数组，并输出到控制台</span>
<span class="line">System.out.println(Arrays.toString(buffer.toByteArray()));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[137]||(l[137]=[s("与其对应的，有序列化，就有反序列化，也就是再将字节数组转成 Java 对象的过程。")])),_:1}),l[1588]||(l[1588]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">try (ObjectInputStream input = new ObjectInputStream(new FileInputStream(</span>
<span class="line">        new File(&quot;Person.txt&quot;)))) {</span>
<span class="line">    String s = input.readUTF();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[138]||(l[138]=[s('这段代码主要使用了 Java 的 ByteArrayOutputStream 和 ObjectOutputStream 类，将字符串 "沉默王二" 写入到一个字节数组缓冲区中，并将缓冲区中的数据转换成字节数组输出到控制台。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[139]||(l[139]=[s("具体的执行过程如下：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[140]||(l[140]=[s("创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[141]||(l[141]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[144]||(l[144]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[142]||(l[142]=[s("try-with-resources")])),_:1}),l[145]||(l[145]=s("](https://javabetter.cn/exception/try-with-resources.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[143]||(l[143]=[s("语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[146]||(l[146]=[s('使用 writeUTF() 方法将字符串 "沉默王二" 写入到缓冲区中。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[147]||(l[147]=[s("当 try-with-resources 语句执行完毕时，会自动调用 output 的 close() 方法关闭输出流，释放资源。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[148]||(l[148]=[s("使用 toByteArray() 方法将缓冲区中的数据转换成字节数组。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[149]||(l[149]=[s("使用 Arrays.toString() 方法将字节数组转换成字符串，并输出到控制台。")])),_:1})])]),a("h4",z,[a("a",C,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[150]||(l[150]=[s("转换")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[151]||(l[151]=[s("InputStreamReader 是从字节流到字符流的桥连接，它使用指定的字符集读取字节并将它们解码为字符。")])),_:1}),l[1589]||(l[1589]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 InputStreamReader 对象 isr，使用 FileInputStream 对象读取文件 demo.txt 的内容并将其转换为字符流</span>
<span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;demo.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 创建一个字符数组 cha，用于存储读取的字符数据，其中 1024 表示数组的长度</span>
<span class="line">char[] cha = new char[1024];</span>
<span class="line"></span>
<span class="line">// 使用 read() 方法读取 isr 中的数据，并将读取的字符数据存储到 cha 数组中，返回值 len 表示读取的字符数</span>
<span class="line">int len = isr.read(cha);</span>
<span class="line"></span>
<span class="line">// 将 cha 数组中从下标 0 开始、长度为 len 的部分转换成字符串，并输出到控制台</span>
<span class="line">System.out.println(new String(cha, 0, len));</span>
<span class="line"></span>
<span class="line">// 关闭 InputStreamReader 对象 isr，释放资源</span>
<span class="line">isr.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[152]||(l[152]=[s("这段代码主要使用了 Java 的 InputStreamReader 和 FileInputStream 类，从文件 demo.txt 中读取数据并将其转换为字符流，然后将读取的字符数据存储到一个字符数组中，并输出转换成字符串后的结果到控制台。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[153]||(l[153]=[s("OutputStreamWriter 将一个字符流的输出对象变为字节流的输出对象，是字符流通向字节流的桥梁。")])),_:1}),l[1590]||(l[1590]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 File 对象 f，表示文件 test.txt</span>
<span class="line">File f = new File(&quot;test.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 创建一个 OutputStreamWriter 对象 out，使用 FileOutputStream 对象将数据写入到文件 f 中，并将字节流转换成字符流</span>
<span class="line">Writer out = new OutputStreamWriter(new FileOutputStream(f));</span>
<span class="line"></span>
<span class="line">// 使用 write() 方法将字符串 &quot;沉默王二!!&quot; 写入到文件 f 中</span>
<span class="line">out.write(&quot;沉默王二!!&quot;);</span>
<span class="line"></span>
<span class="line">// 关闭 Writer 对象 out，释放资源</span>
<span class="line">out.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[154]||(l[154]=[s("使用转换流可以方便地在字节流和字符流之间进行转换。在进行文本文件读写时，通常使用字符流进行操作，而在进行网络传输或与设备进行通信时，通常使用字节流进行操作。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[155]||(l[155]=[s("另外，在使用转换流时需要注意字符编码的问题。如果不指定字符编码，则使用默认的字符编码，可能会出现乱码问题。因此，建议在使用转换流时，始终指定正确的字符编码，以避免出现乱码问题。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[156]||(l[156]=[s("“小二啊，你看，经过我的梳理，是不是感觉 IO 也没多少东西！针对不同的场景、不同的业务，选择对应的 IO 流就可以了，用法上就是读和写。”老王一口气讲完这些，长长的舒了一口气。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[157]||(l[157]=[s("此时此刻的小二，还沉浸在老王的滔滔不绝中。不仅感觉老王的肺活量是真的大，还感慨老王不愧是工作了十多年的“老油条”，一下子就把自己感觉头大的 IO 给梳理得很清晰了。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),a("h2",D,[a("a",N,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[158]||(l[158]=[s("文件流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[159]||(l[159]=[s("在 IO 操作中，文件的操作相对来说是比较复杂的，但也是使用频率最高的部分，我们几乎所有的项目中几乎都躺着一个叫做 FileUtil 或者 FileUtils 的工具类。")])),_:1}),a("p",null,[l[161]||(l[161]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.File</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[160]||(l[160]=[s("类是专门对文件进行操作的类，注意只能对文件本身进行操作，不能对文件内容进行操作，想要操作内容，必须借助输入输出流。")])),_:1})]),a("p",null,[l[163]||(l[163]=a("code",null,'<font style="color:rgb(44, 62, 80);">File</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[162]||(l[162]=[s("类是文件和目录的抽象表示，主要用于文件和目录的创建、查找和删除等操作。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[164]||(l[164]=[s("怎么理解上面两句话？其实很简单！")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[165]||(l[165]=[s("第一句是说 File 跟流无关，File 类不能对文件进行读和写，也就是输入和输出！")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[166]||(l[166]=[s("第二句是说 File 可以表示")])),_:1}),l[1591]||(l[1591]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[167]||(l[167]=[s("D:\\\\文件目录1")])),_:1}),l[1592]||(l[1592]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[168]||(l[168]=[s("与")])),_:1}),l[1593]||(l[1593]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[169]||(l[169]=[s("D:\\\\文件目录1\\\\文件.txt")])),_:1}),l[1594]||(l[1594]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[170]||(l[170]=[s("，前者是文件夹（Directory，或者叫目录）后者是文件(file)，File 类就是用来操作它俩的。")])),_:1}),a("h3",J,[a("a",L,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[171]||(l[171]=[s("File 构造方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[172]||(l[172]=[s("在 Java 中，一切皆是对象，File 类也不例外，不论是哪个对象都应该从该对象的构造说起，所以我们来分析分析")])),_:1}),l[1595]||(l[1595]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[173]||(l[173]=[s("File")])),_:1}),l[1596]||(l[1596]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[174]||(l[174]=[s("类的构造方法。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[175]||(l[175]=[s("比较常用的构造方法有三个：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[176]||(l[176]=[s("1、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1597]||(l[1597]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[177]||(l[177]=[s("File(String pathname)")])),_:1}),l[1598]||(l[1598]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[178]||(l[178]=[s("：通过给定的")])),_:1}),l[1599]||(l[1599]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[179]||(l[179]=[s("路径")])),_:1}),l[1600]||(l[1600]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[180]||(l[180]=[s("来创建新的 File 实例。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[181]||(l[181]=[s("2、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1601]||(l[1601]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[182]||(l[182]=[s("File(String parent, String child)")])),_:1}),l[1602]||(l[1602]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[183]||(l[183]=[s("：从")])),_:1}),l[1603]||(l[1603]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[184]||(l[184]=[s("父路径（字符串）和子路径")])),_:1}),l[1604]||(l[1604]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[185]||(l[185]=[s("创建新的 File 实例。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[186]||(l[186]=[s("3、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1605]||(l[1605]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[187]||(l[187]=[s("File(File parent, String child)")])),_:1}),l[1606]||(l[1606]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[188]||(l[188]=[s("：从")])),_:1}),l[1607]||(l[1607]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[189]||(l[189]=[s("父路径（File）和子路径名字符串")])),_:1}),l[1608]||(l[1608]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[190]||(l[190]=[s("创建新的 File 实例。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[191]||(l[191]=[s("看文字描述不够生动、不够形象、不得劲？没事，通过举例马上就生动形象了，代码如下：")])),_:1}),l[1609]||(l[1609]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 文件路径名</span>
<span class="line">String path = &quot;/Users/username/123.txt&quot;;</span>
<span class="line">File file1 = new File(path);</span>
<span class="line">// 文件路径名</span>
<span class="line">String path2 = &quot;/Users/username/1/2.txt&quot;;</span>
<span class="line">File file2 = new File(path2); -------------相当于/Users/username/1/2.txt</span>
<span class="line">// 通过父路径和子路径字符串</span>
<span class="line">String parent = &quot;/Users/username/aaa&quot;;</span>
<span class="line">String child = &quot;bbb.txt&quot;;</span>
<span class="line">File file3 = new File(parent, child); --------相当于/Users/username/aaa/bbb.txt</span>
<span class="line">// 通过父级File对象和子路径字符串</span>
<span class="line">File parentDir = new File(&quot;/Users/username/aaa&quot;);</span>
<span class="line">String child = &quot;bbb.txt&quot;;</span>
<span class="line">File file4 = new File(parentDir, child); --------相当于/Users/username/aaa/bbb.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[192]||(l[192]=[s("注意，")])),_:1}),l[1610]||(l[1610]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[193]||(l[193]=[s("macOS 路径使用正斜杠（")])),_:1}),l[1611]||(l[1611]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[194]||(l[194]=[s("/")])),_:1}),l[1612]||(l[1612]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[195]||(l[195]=[s("）作为路径分隔符，而 Windows 路径使用反斜杠（")])),_:1}),l[1613]||(l[1613]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[196]||(l[196]=[s("\\")])),_:1}),l[1614]||(l[1614]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[197]||(l[197]=[s("）作为路径分隔符。所以在遇到路径分隔符的时候，不要直接去写")])),_:1}),l[1615]||(l[1615]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[198]||(l[198]=[s("/")])),_:1}),l[1616]||(l[1616]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[199]||(l[199]=[s("或者")])),_:1}),l[1617]||(l[1617]=s("**`**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[200]||(l[200]=[s("\\")])),_:1}),l[1618]||(l[1618]=s("**`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[201]||(l[201]=[s("。")])),_:1}),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[202]||(l[202]=[s("Java 中提供了一个跨平台的方法来获取路径分隔符，即使用 ")])),_:1})]),l[204]||(l[204]=a("code",null,'**<font style="color:rgb(44, 62, 80);">File.separator</font>**',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[203]||(l[203]=[s("，这个属性会根据操作系统自动返回正确的路径分隔符。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[205]||(l[205]=[s("File 类的注意点：")])),_:1}),a("ol",null,[a("li",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[206]||(l[206]=[s("一个 File 对象代表硬盘中实际存在的一个文件或者目录")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[207]||(l[207]=[s("。")])),_:1})]),a("li",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[208]||(l[208]=[s("File 类的构造方法不会检验这个文件或目录是否真实存在，因此无论该路径下是否存在文件或者目录，都不影响 File 对象的创建")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[209]||(l[209]=[s("。")])),_:1})])]),a("h3",V,[a("a",G,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[210]||(l[210]=[s("File 常用方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[211]||(l[211]=[s("File 的常用方法主要分为")])),_:1}),l[1619]||(l[1619]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[212]||(l[212]=[s("获取功能")])),_:1}),l[1620]||(l[1620]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[213]||(l[213]=[s("、")])),_:1}),l[1621]||(l[1621]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[214]||(l[214]=[s("获取绝对路径和相对路径")])),_:1}),l[1622]||(l[1622]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[215]||(l[215]=[s("、")])),_:1}),l[1623]||(l[1623]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[216]||(l[216]=[s("判断功能")])),_:1}),l[1624]||(l[1624]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[217]||(l[217]=[s("、")])),_:1}),l[1625]||(l[1625]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[218]||(l[218]=[s("创建删除功能")])),_:1}),l[1626]||(l[1626]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[219]||(l[219]=[s("的方法。")])),_:1}),a("h4",K,[a("a",M,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[220]||(l[220]=[s("获取功能的方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[221]||(l[221]=[s("1、")])),_:1}),l[1627]||(l[1627]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[222]||(l[222]=[s("getAbsolutePath()")])),_:1}),l[1628]||(l[1628]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[223]||(l[223]=[s("：返回此 File 的绝对路径。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[224]||(l[224]=[s("2、")])),_:1}),l[1629]||(l[1629]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[225]||(l[225]=[s("getPath()")])),_:1}),l[1630]||(l[1630]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[226]||(l[226]=[s("：结果和 getAbsolutePath 一致。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[227]||(l[227]=[s("3、")])),_:1}),l[1631]||(l[1631]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[228]||(l[228]=[s("getName()")])),_:1}),l[1632]||(l[1632]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[229]||(l[229]=[s("：返回文件名或目录名。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[230]||(l[230]=[s("4、")])),_:1}),l[1633]||(l[1633]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[231]||(l[231]=[s("length()")])),_:1}),l[1634]||(l[1634]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[232]||(l[232]=[s("：返回文件长度，以字节为单位。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[233]||(l[233]=[s("测试代码如下【注意测试以你自己的电脑文件夹为准】：")])),_:1}),l[1635]||(l[1635]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File f = new File(&quot;/Users/username/aaa/bbb.java&quot;);</span>
<span class="line">System.out.println(&quot;文件绝对路径:&quot;+f.getAbsolutePath());</span>
<span class="line">System.out.println(&quot;文件构造路径:&quot;+f.getPath());</span>
<span class="line">System.out.println(&quot;文件名称:&quot;+f.getName());</span>
<span class="line">System.out.println(&quot;文件长度:&quot;+f.length()+&quot;字节&quot;);</span>
<span class="line"></span>
<span class="line">File f2 = new File(&quot;/Users/username/aaa&quot;);</span>
<span class="line">System.out.println(&quot;目录绝对路径:&quot;+f2.getAbsolutePath());</span>
<span class="line">System.out.println(&quot;目录构造路径:&quot;+f2.getPath());</span>
<span class="line">System.out.println(&quot;目录名称:&quot;+f2.getName());</span>
<span class="line">System.out.println(&quot;目录长度:&quot;+f2.length());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[234]||(l[234]=[s("注意：")])),_:1}),l[1636]||(l[1636]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[235]||(l[235]=[s("length()")])),_:1}),l[1637]||(l[1637]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[236]||(l[236]=[s("表示文件的长度，")])),_:1}),l[1638]||(l[1638]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[237]||(l[237]=[s("File")])),_:1}),l[1639]||(l[1639]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[238]||(l[238]=[s("对象表示目录的时候，返回值并无意义。")])),_:1}),a("h4",H,[a("a",X,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[239]||(l[239]=[s("绝对路径和相对路径")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[240]||(l[240]=[s('绝对路径是从文件系统的根目录开始的完整路径，它描述了一个文件或目录在文件系统中的确切位置。在 Windows 系统中，绝对路径通常以盘符（如 C:）开始，例如 "')])),_:1}),l[1640]||(l[1640]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[241]||(l[241]=[s("C:\\Program Files\\Java\\jdk1.8.0_291\\bin\\java.exe")])),_:1}),l[1641]||(l[1641]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[242]||(l[242]=[s('"。在 macOS 和 Linux 系统中，绝对路径通常以斜杠（')])),_:1}),l[1642]||(l[1642]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[243]||(l[243]=[s("/")])),_:1}),l[1643]||(l[1643]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[244]||(l[244]=[s('）开始，例如 "')])),_:1}),l[1644]||(l[1644]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[245]||(l[245]=[s("/usr/local/bin/python3")])),_:1}),l[1645]||(l[1645]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[246]||(l[246]=[s('"。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[247]||(l[247]=[s('相对路径是相对于当前工作目录的路径，它描述了一个文件或目录与当前工作目录之间的位置关系。在 Java 中，相对路径通常是相对于当前 Java 程序所在的目录，例如 "')])),_:1}),l[1646]||(l[1646]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[248]||(l[248]=[s("config/config.properties")])),_:1}),l[1647]||(l[1647]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[249]||(l[249]=[s('"。如果当前工作目录是 "')])),_:1}),l[1648]||(l[1648]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[250]||(l[250]=[s("/Users/username/project")])),_:1}),l[1649]||(l[1649]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[251]||(l[251]=[s('"，那么相对路径 "')])),_:1}),l[1650]||(l[1650]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[252]||(l[252]=[s("config/config.properties")])),_:1}),l[1651]||(l[1651]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[253]||(l[253]=[s('" 就表示 "')])),_:1}),l[1652]||(l[1652]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[254]||(l[254]=[s("/Users/username/project/config/config.properties")])),_:1}),l[1653]||(l[1653]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[255]||(l[255]=[s('"。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[256]||(l[256]=[s("注意：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[257]||(l[257]=[s('在 Windows 操作系统中，文件系统默认是不区分大小写的，即在文件系统中，文件名和路径的大小写可以混合使用。例如，"')])),_:1}),l[262]||(l[262]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[258]||(l[258]=[s("C:\\Users\\username\\Documents\\example.txt")])),_:1}),l[263]||(l[263]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[259]||(l[259]=[s('" 和 "')])),_:1}),l[264]||(l[264]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[260]||(l[260]=[s("C:\\Users\\Username\\Documents\\Example.txt")])),_:1}),l[265]||(l[265]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[261]||(l[261]=[s('" 表示的是同一个文件。但是，Windows 操作系统提供了一个区分大小写的选项，可以在格式化磁盘时选择启用，这样文件系统就会区分大小写。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[266]||(l[266]=[s('在 macOS 和 Linux 等 Unix 系统中，文件系统默认是区分大小写的。例如，在 macOS 系统中，"')])),_:1}),l[271]||(l[271]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[267]||(l[267]=[s("/Users/username/Documents/example.txt")])),_:1}),l[272]||(l[272]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[268]||(l[268]=[s('" 和 "')])),_:1}),l[273]||(l[273]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[269]||(l[269]=[s("/Users/username/Documents/Example.txt")])),_:1}),l[274]||(l[274]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[270]||(l[270]=[s('" 表示的是两个不同的文件。')])),_:1})])]),l[1654]||(l[1654]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 绝对路径示例</span>
<span class="line">File absoluteFile = new File(&quot;/Users/username/example/test.txt&quot;);</span>
<span class="line">System.out.println(&quot;绝对路径：&quot; + absoluteFile.getAbsolutePath());</span>
<span class="line"></span>
<span class="line">// 相对路径示例</span>
<span class="line">File relativeFile = new File(&quot;example/test.txt&quot;);</span>
<span class="line">System.out.println(&quot;相对路径：&quot; + relativeFile.getPath());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Z,[a("a",$,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[275]||(l[275]=[s("判断功能的方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[276]||(l[276]=[s("1、 ")])),_:1}),l[1655]||(l[1655]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[277]||(l[277]=[s("exists()")])),_:1}),l[1656]||(l[1656]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[278]||(l[278]=[s(" ：判断文件或目录是否存在。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[279]||(l[279]=[s("2、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1657]||(l[1657]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[280]||(l[280]=[s("isDirectory()")])),_:1}),l[1658]||(l[1658]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[281]||(l[281]=[s("：判断是否为目录。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[282]||(l[282]=[s("3、")])),_:1}),l[1659]||(l[1659]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[283]||(l[283]=[s("isFile()")])),_:1}),l[1660]||(l[1660]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[284]||(l[284]=[s("：判断是否为文件。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[285]||(l[285]=[s("方法演示，代码如下：")])),_:1}),l[1661]||(l[1661]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;/Users/username/example&quot;);</span>
<span class="line"></span>
<span class="line">// 判断文件或目录是否存在</span>
<span class="line">if (file.exists()) {</span>
<span class="line">    System.out.println(&quot;文件或目录存在&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;文件或目录不存在&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 判断是否是目录</span>
<span class="line">if (file.isDirectory()) {</span>
<span class="line">    System.out.println(&quot;是目录&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;不是目录&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 判断是否是文件</span>
<span class="line">if (file.isFile()) {</span>
<span class="line">    System.out.println(&quot;是文件&quot;);</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;不是文件&quot;);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Q,[a("a",Y,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[286]||(l[286]=[s("创建、删除功能的方法")])),_:1})])])]),a("ul",null,[a("li",null,[l[290]||(l[290]=a("code",null,'<font style="color:rgb(44, 62, 80);">createNewFile()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[287]||(l[287]=[s("：文件不存在，创建一个新的空文件并返回")])),_:1}),l[291]||(l[291]=a("code",null,'<font style="color:rgb(44, 62, 80);">true</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[288]||(l[288]=[s("，文件存在，不创建文件并返回")])),_:1}),l[292]||(l[292]=a("code",null,'<font style="color:rgb(44, 62, 80);">false</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[289]||(l[289]=[s("。")])),_:1})]),a("li",null,[l[294]||(l[294]=a("code",null,'<font style="color:rgb(44, 62, 80);">delete()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[293]||(l[293]=[s("：删除文件或目录。如果是目录，只有目录为空才能删除。")])),_:1})]),a("li",null,[l[296]||(l[296]=a("code",null,'<font style="color:rgb(44, 62, 80);">mkdir()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[295]||(l[295]=[s("：只能创建一级目录，如果父目录不存在，则创建失败。返回 true 表示创建成功，返回 false 表示创建失败。")])),_:1})]),a("li",null,[l[298]||(l[298]=a("code",null,'<font style="color:rgb(44, 62, 80);">mkdirs()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[297]||(l[297]=[s("：可以创建多级目录，如果父目录不存在，则会一并创建。返回 true 表示创建成功，返回 false 表示创建失败或目录已经存在。")])),_:1})])]),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[299]||(l[299]=[s("开发中一般用")])),_:1})]),l[301]||(l[301]=a("code",null,'<font style="color:rgb(44, 62, 80);">mkdirs()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[300]||(l[300]=[s(";")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[302]||(l[302]=[s("方法测试，代码如下：")])),_:1}),l[1662]||(l[1662]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建文件</span>
<span class="line">File file = new File(&quot;/Users/username/example/test.txt&quot;);</span>
<span class="line">if (file.createNewFile()) {</span>
<span class="line">    System.out.println(&quot;创建文件成功：&quot; + file.getAbsolutePath());</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;创建文件失败：&quot; + file.getAbsolutePath());</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 删除文件</span>
<span class="line">if (file.delete()) {</span>
<span class="line">    System.out.println(&quot;删除文件成功：&quot; + file.getAbsolutePath());</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;删除文件失败：&quot; + file.getAbsolutePath());</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 创建多级目录</span>
<span class="line">File directory = new File(&quot;/Users/username/example/subdir1/subdir2&quot;);</span>
<span class="line">if (directory.mkdirs()) {</span>
<span class="line">    System.out.println(&quot;创建目录成功：&quot; + directory.getAbsolutePath());</span>
<span class="line">} else {</span>
<span class="line">    System.out.println(&quot;创建目录失败：&quot; + directory.getAbsolutePath());</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",c,[a("a",h,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[303]||(l[303]=[s("目录的遍历")])),_:1})])])]),a("ul",null,[a("li",null,[l[305]||(l[305]=a("code",null,'<font style="color:rgb(44, 62, 80);">String[] list()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[304]||(l[304]=[s("：返回一个 String 数组，表示该 File 目录中的所有子文件或目录。")])),_:1})]),a("li",null,[l[307]||(l[307]=a("code",null,'<font style="color:rgb(44, 62, 80);">File[] listFiles()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[306]||(l[306]=[s("：返回一个 File 数组，表示该 File 目录中的所有的子文件或目录。")])),_:1})])]),l[1663]||(l[1663]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File directory = new File(&quot;/Users/itwanger/Documents/Github/paicoding&quot;);</span>
<span class="line"></span>
<span class="line">// 列出目录下的文件名</span>
<span class="line">String[] files = directory.list();</span>
<span class="line">System.out.println(&quot;目录下的文件名：&quot;);</span>
<span class="line">for (String file : files) {</span>
<span class="line">    System.out.println(file);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 列出目录下的文件和子目录</span>
<span class="line">File[] filesAndDirs = directory.listFiles();</span>
<span class="line">System.out.println(&quot;目录下的文件和子目录：&quot;);</span>
<span class="line">for (File fileOrDir : filesAndDirs) {</span>
<span class="line">    if (fileOrDir.isFile()) {</span>
<span class="line">        System.out.println(&quot;文件：&quot; + fileOrDir.getName());</span>
<span class="line">    } else if (fileOrDir.isDirectory()) {</span>
<span class="line">        System.out.println(&quot;目录：&quot; + fileOrDir.getName());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[308]||(l[308]=[s("listFiles")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[309]||(l[309]=[s("在获取指定目录下的文件或者子目录时必须满足下面两个条件：")])),_:1})]),l[1664]||(l[1664]=a("pre",null,[a("code",null,`1. **<font style="color:rgb(44, 62, 80);">指定的目录必须存在</font>**
2. **<font style="color:rgb(44, 62, 80);">指定的必须是目录。否则容易引发 NullPointerException 异常</font>**
`)],-1)),a("h4",_,[a("a",ll,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[310]||(l[310]=[s("递归遍历")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[311]||(l[311]=[s("不说啥了，直接上代码：")])),_:1}),l[1665]||(l[1665]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void main(String[] args) {</span>
<span class="line">    File directory = new File(&quot;/Users/itwanger/Documents/Github/paicoding&quot;);</span>
<span class="line"></span>
<span class="line">    // 递归遍历目录下的文件和子目录</span>
<span class="line">    traverseDirectory(directory);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">public static void traverseDirectory(File directory) {</span>
<span class="line">    // 列出目录下的所有文件和子目录</span>
<span class="line">    File[] filesAndDirs = directory.listFiles();</span>
<span class="line"></span>
<span class="line">    // 遍历每个文件和子目录</span>
<span class="line">    for (File fileOrDir : filesAndDirs) {</span>
<span class="line">        if (fileOrDir.isFile()) {</span>
<span class="line">            // 如果是文件，输出文件名</span>
<span class="line">            System.out.println(&quot;文件：&quot; + fileOrDir.getName());</span>
<span class="line">        } else if (fileOrDir.isDirectory()) {</span>
<span class="line">            // 如果是目录，递归遍历子目录</span>
<span class="line">            System.out.println(&quot;目录：&quot; + fileOrDir.getName());</span>
<span class="line">            traverseDirectory(fileOrDir);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h3",sl,[a("a",nl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[312]||(l[312]=[s("RandomAccessFile")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[313]||(l[313]=[s("RandomAccessFile 是 Java 中一个非常特殊的类，它既可以用来读取文件，也可以用来写入文件。与其他 IO 类（如 FileInputStream 和 FileOutputStream）不同，RandomAccessFile 允许您跳转到文件的任何位置，从那里开始读取或写入。这使得它特别适用于需要在文件中随机访问数据的场景，如数据库系统。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[314]||(l[314]=[s("下面是一个使用 RandomAccessFile 的示例，包括写入和读取文件：")])),_:1}),l[1666]||(l[1666]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">import java.io.IOException;</span>
<span class="line">import java.io.RandomAccessFile;</span>
<span class="line"></span>
<span class="line">public class RandomAccessFileDemo {</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String filePath = &quot;logs/javabetter/itwanger.txt&quot;;</span>
<span class="line"></span>
<span class="line">        try {</span>
<span class="line">            // 使用 RandomAccessFile 写入文件</span>
<span class="line">            writeToFile(filePath, &quot;Hello, 沉默王二!&quot;);</span>
<span class="line"></span>
<span class="line">            // 使用 RandomAccessFile 读取文件</span>
<span class="line">            String content = readFromFile(filePath);</span>
<span class="line">            System.out.println(&quot;文件内容: &quot; + content);</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    private static void writeToFile(String filePath, String content) throws IOException {</span>
<span class="line">        try (RandomAccessFile randomAccessFile = new RandomAccessFile(filePath, &quot;rw&quot;)) {</span>
<span class="line">            // 将文件指针移动到文件末尾（在此处追加内容）</span>
<span class="line">            randomAccessFile.seek(randomAccessFile.length());</span>
<span class="line"></span>
<span class="line">            // 写入内容</span>
<span class="line">            randomAccessFile.writeUTF(content);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    private static String readFromFile(String filePath) throws IOException {</span>
<span class="line">        StringBuilder content = new StringBuilder();</span>
<span class="line"></span>
<span class="line">        try (RandomAccessFile randomAccessFile = new RandomAccessFile(filePath, &quot;r&quot;)) {</span>
<span class="line">            // 将文件指针移动到文件开始处（从头开始读取）</span>
<span class="line">            randomAccessFile.seek(0);</span>
<span class="line"></span>
<span class="line">            content.append(randomAccessFile.readUTF());</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        return content.toString();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[315]||(l[315]=[s("为了避免中文乱码问题，我们使用 RandomAccessFile 的 ")])),_:1}),l[1667]||(l[1667]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[316]||(l[316]=[s("writeUTF")])),_:1}),l[1668]||(l[1668]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[317]||(l[317]=[s(" 和 ")])),_:1}),l[1669]||(l[1669]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[318]||(l[318]=[s("readUTF")])),_:1}),l[1670]||(l[1670]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[319]||(l[319]=[s(" 方法，它们将使用 ")])),_:1}),l[1671]||(l[1671]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[320]||(l[320]=[s("UTF-8")])),_:1}),l[1672]||(l[1672]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[321]||(l[321]=[s(" 编码处理字符串。大家可以运行一下这段代码，体验一下。")])),_:1}),l[1673]||(l[1673]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727437920099-4c5aefb5-fee5-4fb8-89cc-08c422daeaa0.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[322]||(l[322]=[s("接下来，会详细介绍一下 RandomAccessFile 的构造方法和常用的方法。")])),_:1}),a("h4",el,[a("a",il,[a("span",null,[a("a",al,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[323]||(l[323]=[s("构造方法")])),_:1}),n(r)])])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[324]||(l[324]=[s("RandomAccessFile 主要有两个构造方法：")])),_:1}),a("ul",null,[a("li",null,[l[326]||(l[326]=a("code",null,'<font style="color:rgb(44, 62, 80);">RandomAccessFile(File file, String mode)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[325]||(l[325]=[s("：使用给定的文件对象和访问模式创建一个新的 RandomAccessFile 实例。")])),_:1})]),a("li",null,[l[328]||(l[328]=a("code",null,'<font style="color:rgb(44, 62, 80);">RandomAccessFile(String name, String mode)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[327]||(l[327]=[s("：使用给定的文件名和访问模式创建一个新的 RandomAccessFile 实例。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[329]||(l[329]=[s("访问模式 mode 的值可以是：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[330]||(l[330]=[s('"r"：以只读模式打开文件。调用结果对象的任何 write 方法都将导致 IOException。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[331]||(l[331]=[s('"rw"：以读写模式打开文件。如果文件不存在，它将被创建。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[332]||(l[332]=[s('"rws"：以读写模式打开文件，并要求对内容或元数据的每个更新都被立即写入到底层存储设备。这种模式是同步的，可以确保在系统崩溃时不会丢失数据。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[333]||(l[333]=[s('"rwd"：与“rws”类似，以读写模式打开文件，但仅要求对文件内容的更新被立即写入。元数据可能会被延迟写入。')])),_:1})])]),a("h4",tl,[a("a",rl,[a("span",null,[a("a",dl,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[334]||(l[334]=[s("主要方法")])),_:1}),n(r)])])])]),a("ul",null,[a("li",null,[l[336]||(l[336]=a("code",null,'<font style="color:rgb(44, 62, 80);">long getFilePointer()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[335]||(l[335]=[s("：返回文件指针的当前位置。")])),_:1})]),a("li",null,[l[338]||(l[338]=a("code",null,'<font style="color:rgb(44, 62, 80);">long length()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[337]||(l[337]=[s("：返回此文件的长度。")])),_:1})]),a("li",null,[l[340]||(l[340]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[339]||(l[339]=[s("：从该文件中读取一个字节数据。")])),_:1})]),a("li",null,[l[342]||(l[342]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read(byte[] b)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[341]||(l[341]=[s("：从该文件中读取字节数据并将其存储到指定的字节数组中。")])),_:1})]),a("li",null,[l[344]||(l[344]=a("code",null,'<font style="color:rgb(44, 62, 80);">int read(byte[] b, int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[343]||(l[343]=[s("：从该文件中读取字节数据并将其存储到指定的字节数组中，从偏移量 off 开始，最多读取 len 个字节。")])),_:1})]),a("li",null,[l[346]||(l[346]=a("code",null,'<font style="color:rgb(44, 62, 80);">String readLine()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[345]||(l[345]=[s("：从该文件中读取一行文本。")])),_:1})]),a("li",null,[l[348]||(l[348]=a("code",null,'<font style="color:rgb(44, 62, 80);">readUTF()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[347]||(l[347]=[s("：从文件读取 UTF-8 编码的字符串。此方法首先读取两个字节的长度信息，然后根据这个长度读取字符串的 UTF-8 字节。最后，这些字节被转换为 Java 字符串。这意味着当你使用 readUTF 方法读取字符串时，需要确保文件中的字符串是使用 writeUTF 方法写入的，这样它们之间的长度信息和编码方式才能保持一致。")])),_:1})]),a("li",null,[l[350]||(l[350]=a("code",null,'<font style="color:rgb(44, 62, 80);">void seek(long pos)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[349]||(l[349]=[s("：将文件指针设置到文件中的 pos 位置。")])),_:1})]),a("li",null,[l[352]||(l[352]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(byte[] b)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[351]||(l[351]=[s("：将指定的字节数组的所有字节写入该文件。")])),_:1})]),a("li",null,[l[354]||(l[354]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(byte[] b, int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[353]||(l[353]=[s("：将指定字节数组的部分字节写入该文件，从偏移量 off 开始，写入 len 个字节。")])),_:1})]),a("li",null,[l[356]||(l[356]=a("code",null,'<font style="color:rgb(44, 62, 80);">void write(int b)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[355]||(l[355]=[s("：将指定的字节写入该文件。")])),_:1})]),a("li",null,[l[358]||(l[358]=a("code",null,'<font style="color:rgb(44, 62, 80);">writeUTF(String str)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[357]||(l[357]=[s("：将一个字符串以 UTF-8 编码写入文件。此方法首先写入两个字节的长度信息，表示字符串的 UTF-8 字节长度，然后写入 UTF-8 字节本身。因此，当你使用 writeUTF 写入字符串时，实际写入的字节数会比字符串的 UTF-8 字节长度多两个字节。这两个字节用于在读取字符串时确定正确的字符串长度。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[359]||(l[359]=[s("再来看一个示例，结合前面的讲解，就会彻底掌握 RandomAccessFile。")])),_:1}),l[1674]||(l[1674]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;logs/javabetter/itwanger.txt&quot;);</span>
<span class="line"></span>
<span class="line">try (RandomAccessFile raf = new RandomAccessFile(file, &quot;rw&quot;)) {</span>
<span class="line">    // 写入文件</span>
<span class="line">    raf.writeUTF(&quot;Hello, 沉默王二!&quot;);</span>
<span class="line"></span>
<span class="line">    // 将文件指针移动到文件开头</span>
<span class="line">    raf.seek(0);</span>
<span class="line"></span>
<span class="line">    // 读取文件内容</span>
<span class="line">    String content = raf.readUTF();</span>
<span class="line">    System.out.println(&quot;内容: &quot; + content);</span>
<span class="line"></span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[360]||(l[360]=[s("在这个示例中，我们首先创建了一个名为 itwanger.txt 的文件对象。然后我们使用 RandomAccessFile 以读写模式打开这个文件。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[361]||(l[361]=[s('接下来，我们使用 writeUTF 方法将字符串"Hello, 沉默王二!"写入文件。然后，我们使用 seek 方法将文件指针移动到文件开头，并使用 readUTF 方法读取文件内容。输出应该是"Hello, 沉默王二!"。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[362]||(l[362]=[s("最后，我们使用")])),_:1}),l[1675]||(l[1675]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[363]||(l[363]=[s("try-with-resources")])),_:1}),l[1676]||(l[1676]=s("](https://javabetter.cn/exception/try-with-resources.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[364]||(l[364]=[s("语句确保 RandomAccessFile 在操作完成后被正确关闭。")])),_:1}),a("h3",ol,[a("a",ul,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[365]||(l[365]=[s("Apache FileUtils 类")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[366]||(l[366]=[s("FileUtils 类是 Apache Commons IO 库中的一个类，提供了一些更为方便的方法来操作文件或目录。")])),_:1}),a("h4",pl,[a("a",bl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[367]||(l[367]=[s("复制文件或目录：")])),_:1})])])]),l[1677]||(l[1677]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File srcFile = new File(&quot;path/to/src/file&quot;);</span>
<span class="line">File destFile = new File(&quot;path/to/dest/file&quot;);</span>
<span class="line">// 复制文件</span>
<span class="line">FileUtils.copyFile(srcFile, destFile);</span>
<span class="line">// 复制目录</span>
<span class="line">FileUtils.copyDirectory(srcFile, destFile);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",vl,[a("a",ml,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[368]||(l[368]=[s("删除文件或目录：")])),_:1})])])]),l[1678]||(l[1678]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;path/to/file&quot;);</span>
<span class="line">// 删除文件或目录</span>
<span class="line">FileUtils.delete(file);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[369]||(l[369]=[s("需要注意的是，如果要删除一个非空目录，需要先删除目录中的所有文件和子目录。")])),_:1}),a("h4",gl,[a("a",fl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[370]||(l[370]=[s("移动文件或目录：")])),_:1})])])]),l[1679]||(l[1679]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File srcFile = new File(&quot;path/to/src/file&quot;);</span>
<span class="line">File destFile = new File(&quot;path/to/dest/file&quot;);</span>
<span class="line">// 移动文件或目录</span>
<span class="line">FileUtils.moveFile(srcFile, destFile);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",yl,[a("a",Sl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[371]||(l[371]=[s("查询文件或目录的信息：")])),_:1})])])]),l[1680]||(l[1680]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;path/to/file&quot;);</span>
<span class="line">// 获取文件或目录的修改时间</span>
<span class="line">Date modifyTime = FileUtils.lastModified(file);</span>
<span class="line">// 获取文件或目录的大小</span>
<span class="line">long size = FileUtils.sizeOf(file);</span>
<span class="line">// 获取文件或目录的扩展名</span>
<span class="line">String extension = FileUtils.getExtension(file.getName());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h3",wl,[a("a",Fl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[372]||(l[372]=[s("Hutool FileUtil 类")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[373]||(l[373]=[s("FileUtil 类是")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1681]||(l[1681]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[374]||(l[374]=[s("Hutool")])),_:1}),l[1682]||(l[1682]=s("](https://hutool.cn/)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[375]||(l[375]=[s("工具包中的文件操作工具类，提供了一系列简单易用的文件操作方法，可以帮助 Java 开发者快速完成文件相关的操作任务。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[376]||(l[376]=[s("FileUtil 类包含以下几类操作工具：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[377]||(l[377]=[s("文件操作：包括文件目录的新建、删除、复制、移动、改名等")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[378]||(l[378]=[s("文件判断：判断文件或目录是否非空，是否为目录，是否为文件等等。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[379]||(l[379]=[s("绝对路径：针对 ClassPath 中的文件转换为绝对路径文件。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[380]||(l[380]=[s("文件名：主文件名，扩展名的获取")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[381]||(l[381]=[s("读操作：包括 getReader、readXXX 操作")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[382]||(l[382]=[s("写操作：包括 getWriter、writeXXX 操作")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[383]||(l[383]=[s("下面是 FileUtil 类中一些常用的方法：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[384]||(l[384]=[s("1、copyFile：复制文件。该方法可以将指定的源文件复制到指定的目标文件中。")])),_:1}),l[1683]||(l[1683]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File dest = FileUtil.file(&quot;FileUtilDemo2.java&quot;);</span>
<span class="line">FileUtil.copyFile(file, dest);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[385]||(l[385]=[s("2、move：移动文件或目录。该方法可以将指定的源文件或目录移动到指定的目标文件或目录中。")])),_:1}),l[1684]||(l[1684]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileUtil.move(file, dest, true);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[386]||(l[386]=[s("3、del：删除文件或目录。该方法可以删除指定的文件或目录，如果指定的文件或目录不存在，则会抛出异常。")])),_:1}),l[1685]||(l[1685]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileUtil.del(file);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[387]||(l[387]=[s("4、rename：重命名文件或目录。该方法可以将指定的文件或目录重命名为指定的新名称。")])),_:1}),l[1686]||(l[1686]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileUtil.rename(file, &quot;FileUtilDemo3.java&quot;, true);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[388]||(l[388]=[s("5、readLines：从文件中读取每一行数据。")])),_:1}),l[1687]||(l[1687]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileUtil.readLines(file, &quot;UTF-8&quot;).forEach(System.out::println);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[389]||(l[389]=[s("更多方法，可以去看一下 hutool 的源码，里面有非常多实用的方法，多看看，绝对能提升不少编程水平。")])),_:1}),a("h2",ql,[a("a",xl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[390]||(l[390]=[s("字符流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[391]||(l[391]=[s("字符流 Reader 和 Writer 的故事要从它们的类关系图开始，来看图。")])),_:1}),l[1688]||(l[1688]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438232988-d14e7333-3526-40a2-aff5-ab03f35e1359.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[392]||(l[392]=[s("字符流是一种用于读取和写入字符数据的输入输出流。与字节流不同，字符流以字符为单位读取和写入数据，而不是以字节为单位。常用来处理文本信息。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[393]||(l[393]=[s("如果用字节流直接读取中文，可能会遇到乱码问题，见下例：")])),_:1}),l[1689]||(l[1689]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//FileInputStream为操作文件的字符输入流</span>
<span class="line">FileInputStream inputStream = new FileInputStream(&quot;a.txt&quot;);//内容为“沉默王二是傻 X”</span>
<span class="line"></span>
<span class="line">int len;</span>
<span class="line">while ((len=inputStream.read())!=-1){</span>
<span class="line">    System.out.print((char)len);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[394]||(l[394]=[s("来看运行结果：")])),_:1}),l[1690]||(l[1690]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">运行结果：   æ²é»çäºæ¯å» X</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[395]||(l[395]=[s("看一下截图：")])),_:1}),l[1691]||(l[1691]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438233528-57b9fe41-0dc0-4eb1-865c-19f9c2da7826.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[396]||(l[396]=[s("之所以出现乱码是因为在字节流中，一个字符通常由多个字节组成，而不同的字符编码使用的字节数不同。如果我们使用了错误的字符编码，或者在读取和写入数据时没有正确处理字符编码的转换，就会导致读取出来的中文字符出现乱码。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[397]||(l[397]=[s("例如，当我们使用默认的字符编码（见上例）读取一个包含中文字符的文本文件时，就会出现乱码。因为默认的字符编码通常是 ASCII 编码，它只能表示英文字符，而不能正确地解析中文字符。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[398]||(l[398]=[s("那使用字节流该如何正确地读出中文呢？见下例。")])),_:1}),l[1692]||(l[1692]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">try (FileInputStream inputStream = new FileInputStream(&quot;a.txt&quot;)) {</span>
<span class="line">    byte[] bytes = new byte[1024];</span>
<span class="line">    int len;</span>
<span class="line">    while ((len = inputStream.read(bytes)) != -1) {</span>
<span class="line">        System.out.print(new String(bytes, 0, len));</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[399]||(l[399]=[s("为什么这种方式就可以呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[400]||(l[400]=[s("因为我们拿 String 类进行了解码，查看")])),_:1}),l[1693]||(l[1693]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[401]||(l[401]=[s("new String(byte bytes[], int offset, int length)")])),_:1}),l[1694]||(l[1694]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[402]||(l[402]=[s("的源码就可以发现，该构造方法有解码功能：")])),_:1}),l[1695]||(l[1695]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String(byte bytes[], int offset, int length) {</span>
<span class="line">    checkBounds(bytes, offset, length);</span>
<span class="line">    this.value = StringCoding.decode(bytes, offset, length);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[403]||(l[403]=[s("继续追看")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1696]||(l[1696]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[404]||(l[404]=[s("StringCoding.decode()")])),_:1}),l[1697]||(l[1697]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[405]||(l[405]=[s("方法调用的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1698]||(l[1698]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[406]||(l[406]=[s("defaultCharset()")])),_:1}),l[1699]||(l[1699]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[407]||(l[407]=[s("方法，会发现默认编码是")])),_:1}),l[1700]||(l[1700]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[408]||(l[408]=[s("UTF-8")])),_:1}),l[1701]||(l[1701]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[409]||(l[409]=[s("，代码如下")])),_:1}),l[1702]||(l[1702]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static Charset defaultCharset() {</span>
<span class="line">    if (defaultCharset == null) {</span>
<span class="line">        synchronized (Charset.class) {</span>
<span class="line">            if (cs != null)</span>
<span class="line">                defaultCharset = cs;</span>
<span class="line">            else</span>
<span class="line">                defaultCharset = forName(&quot;UTF-8&quot;);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    return defaultCharset;</span>
<span class="line">}</span>
<span class="line">static char[] decode(byte[] ba, int off, int len) {</span>
<span class="line">    String csn = Charset.defaultCharset().name();</span>
<span class="line">    try {</span>
<span class="line">        // use charset name decode() variant which provides caching.</span>
<span class="line">        return decode(csn, ba, off, len);</span>
<span class="line">    } catch (UnsupportedEncodingException x) {</span>
<span class="line">        warnUnsupportedCharset(csn);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[410]||(l[410]=[s("在 Java 中，常用的字符编码有 ASCII、ISO-8859-1、UTF-8、UTF-16 等。其中，ASCII 和 ISO-8859-1 只能表示部分字符，而 UTF-8 和 UTF-16 可以表示所有的 Unicode 字符，包括中文字符。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[411]||(l[411]=[s("当我们使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1703]||(l[1703]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[412]||(l[412]=[s("new String(byte bytes[], int offset, int length)")])),_:1}),l[1704]||(l[1704]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[413]||(l[413]=[s("将字节流转换为字符串时，Java 会根据 UTF-8 的规则将每 3 个字节解码为一个中文字符，从而正确地解码出中文。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[414]||(l[414]=[s("尽管字节流也有办法解决乱码问题，但不够直接，于是就有了字符流，")])),_:1}),l[1705]||(l[1705]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[415]||(l[415]=[s("专门用于处理文本")])),_:1}),l[1706]||(l[1706]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[416]||(l[416]=[s("文件（音频、图片、视频等为非文本文件）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[417]||(l[417]=[s("从另一角度来说：")])),_:1}),l[1707]||(l[1707]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[418]||(l[418]=[s("字符流 = 字节流 + 编码表")])),_:1}),l[1708]||(l[1708]=s("**")),a("h3",Ol,[a("a",jl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[419]||(l[419]=[s("字符输入流（Reader）")])),_:1})])])]),a("p",null,[l[425]||(l[425]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.Reader</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[420]||(l[420]=[s("是")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[421]||(l[421]=[s("字符输入流")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[422]||(l[422]=[s("的")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[423]||(l[423]=[s("超类")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[424]||(l[424]=[s("（父类），它定义了字符输入流的一些共性方法：")])),_:1})]),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[426]||(l[426]=[s("1、")])),_:1}),l[429]||(l[429]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[427]||(l[427]=[s("close()")])),_:1}),l[430]||(l[430]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[428]||(l[428]=[s("：关闭此流并释放与此流相关的系统资源。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[431]||(l[431]=[s("2、")])),_:1}),l[434]||(l[434]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[432]||(l[432]=[s("read()")])),_:1}),l[435]||(l[435]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[433]||(l[433]=[s("：从输入流读取一个字符。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[436]||(l[436]=[s("3、")])),_:1}),l[441]||(l[441]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[437]||(l[437]=[s("read(char[] cbuf)")])),_:1}),l[442]||(l[442]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[438]||(l[438]=[s("：从输入流中读取一些字符，并将它们存储到字符数组")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[443]||(l[443]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[439]||(l[439]=[s("cbuf")])),_:1}),l[444]||(l[444]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[440]||(l[440]=[s("中")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[445]||(l[445]=[s("FileReader 是 Reader 的子类，用于从文件中读取字符数据。它的主要特点如下：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[446]||(l[446]=[s("可以通过构造方法指定要读取的文件路径。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[447]||(l[447]=[s("每次可以读取一个或多个字符。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[448]||(l[448]=[s("可以读取 Unicode 字符集中的字符，通过指定字符编码来实现字符集的转换。")])),_:1})])]),a("h4",Il,[a("a",Wl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[449]||(l[449]=[s("FileReader构造方法")])),_:1})])])]),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[450]||(l[450]=[s("1、")])),_:1}),l[455]||(l[455]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[451]||(l[451]=[s("FileReader(File file)")])),_:1}),l[456]||(l[456]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[452]||(l[452]=[s("：创建一个新的 FileReader，参数为")])),_:1}),l[457]||(l[457]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[453]||(l[453]=[s("File对象")])),_:1}),l[458]||(l[458]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[454]||(l[454]=[s("。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[459]||(l[459]=[s("2、")])),_:1}),l[462]||(l[462]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[460]||(l[460]=[s("FileReader(String fileName)")])),_:1}),l[463]||(l[463]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[461]||(l[461]=[s("：创建一个新的 FileReader，参数为文件名。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[464]||(l[464]=[s("代码示例如下：")])),_:1}),l[1709]||(l[1709]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用File对象创建流对象</span>
<span class="line">File file = new File(&quot;a.txt&quot;);</span>
<span class="line">FileReader fr = new FileReader(file);</span>
<span class="line"></span>
<span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileReader fr = new FileReader(&quot;b.txt&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",El,[a("a",Bl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[465]||(l[465]=[s("FileReader读取字符数据")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[466]||(l[466]=[s("①")])),_:1}),l[1710]||(l[1710]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[467]||(l[467]=[s("读取字符")])),_:1}),l[1711]||(l[1711]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[468]||(l[468]=[s("：")])),_:1}),l[1712]||(l[1712]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[469]||(l[469]=[s("read")])),_:1}),l[1713]||(l[1713]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[470]||(l[470]=[s("方法，每次可以读取一个字符，返回读取的字符（转为 int 类型），当读取到文件末尾时，返回")])),_:1}),l[1714]||(l[1714]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[471]||(l[471]=[s("-1")])),_:1}),l[1715]||(l[1715]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[472]||(l[472]=[s("。代码示例如下：")])),_:1}),l[1716]||(l[1716]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileReader fr = new FileReader(&quot;abc.txt&quot;);</span>
<span class="line">// 定义变量，保存数据</span>
<span class="line">int b;</span>
<span class="line">// 循环读取</span>
<span class="line">while ((b = fr.read())!=-1) {</span>
<span class="line">    System.out.println((char)b);</span>
<span class="line">}</span>
<span class="line">// 关闭资源</span>
<span class="line">fr.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[473]||(l[473]=[s("②")])),_:1}),l[1717]||(l[1717]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[474]||(l[474]=[s("读取指定长度的字符")])),_:1}),l[1718]||(l[1718]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[475]||(l[475]=[s("：")])),_:1}),l[1719]||(l[1719]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[476]||(l[476]=[s("read(char[] cbuf, int off, int len)")])),_:1}),l[1720]||(l[1720]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[477]||(l[477]=[s("，并将其存储到字符数组中。其中，cbuf 表示存储读取结果的字符数组，off 表示存储结果的起始位置，len 表示要读取的字符数。代码示例如下：")])),_:1}),l[1721]||(l[1721]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File textFile = new File(&quot;docs/约定.md&quot;);</span>
<span class="line">// 给一个 FileReader 的示例</span>
<span class="line">// try-with-resources FileReader</span>
<span class="line">try(FileReader reader = new FileReader(textFile);) {</span>
<span class="line">    // read(char[] cbuf)</span>
<span class="line">    char[] buffer = new char[1024];</span>
<span class="line">    int len;</span>
<span class="line">    while ((len = reader.read(buffer, 0, buffer.length)) != -1) {</span>
<span class="line">        System.out.print(new String(buffer, 0, len));</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[478]||(l[478]=[s("在这个例子中，使用 FileReader 从文件中读取字符数据，并将其存储到一个大小为 1024 的字符数组中。每次读取 len 个字符，然后使用 String 构造方法将其转换为字符串并输出。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[479]||(l[479]=[s("FileReader 实现了 AutoCloseable 接口，因此可以使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1722]||(l[1722]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[480]||(l[480]=[s("try-with-resources")])),_:1}),l[1723]||(l[1723]=s("](https://javabetter.cn/exception/try-with-resources.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[481]||(l[481]=[s("语句自动关闭资源，避免了手动关闭资源的繁琐操作。")])),_:1}),a("h3",Ul,[a("a",kl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[482]||(l[482]=[s("字符输出流（Writer）")])),_:1})])])]),a("p",null,[l[488]||(l[488]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.Writer</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[483]||(l[483]=[s("是")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[484]||(l[484]=[s("字符输出流")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[485]||(l[485]=[s("类的")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[486]||(l[486]=[s("超类")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[487]||(l[487]=[s("（父类），可以将指定的字符信息写入到目的地，来看它定义的一些共性方法：")])),_:1})]),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[489]||(l[489]=[s("1、")])),_:1}),l[492]||(l[492]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[490]||(l[490]=[s("write(int c)")])),_:1}),l[493]||(l[493]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[491]||(l[491]=[s("写入单个字符。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[494]||(l[494]=[s("2、")])),_:1}),l[497]||(l[497]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[495]||(l[495]=[s("write(char[] cbuf)")])),_:1}),l[498]||(l[498]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[496]||(l[496]=[s("写入字符数组。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[499]||(l[499]=[s("3、")])),_:1}),l[502]||(l[502]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[500]||(l[500]=[s("write(char[] cbuf, int off, int len)")])),_:1}),l[503]||(l[503]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[501]||(l[501]=[s(" 写入字符数组的一部分，off为开始索引，len为字符个数。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[504]||(l[504]=[s("4、")])),_:1}),l[507]||(l[507]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[505]||(l[505]=[s("write(String str)")])),_:1}),l[508]||(l[508]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[506]||(l[506]=[s("写入字符串。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[509]||(l[509]=[s("5、")])),_:1}),l[512]||(l[512]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[510]||(l[510]=[s("write(String str, int off, int len)")])),_:1}),l[513]||(l[513]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[511]||(l[511]=[s("写入字符串的某一部分，off 指定要写入的子串在 str 中的起始位置，len 指定要写入的子串的长度。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[514]||(l[514]=[s("6、")])),_:1}),l[517]||(l[517]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[515]||(l[515]=[s("flush()")])),_:1}),l[518]||(l[518]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[516]||(l[516]=[s("刷新该流的缓冲。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[519]||(l[519]=[s("7、")])),_:1}),l[522]||(l[522]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[520]||(l[520]=[s("close()")])),_:1}),l[523]||(l[523]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[521]||(l[521]=[s(" 关闭此流，但要先刷新它。")])),_:1})])]),a("p",null,[l[525]||(l[525]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.FileWriter</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[524]||(l[524]=[s("类是 Writer 的子类，用来将字符写入到文件。")])),_:1})]),a("h4",Rl,[a("a",Tl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[526]||(l[526]=[s("FileWriter 构造方法")])),_:1})])])]),a("ul",null,[a("li",null,[l[528]||(l[528]=a("code",null,'<font style="color:rgb(44, 62, 80);">FileWriter(File file)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[527]||(l[527]=[s("： 创建一个新的 FileWriter，参数为要读取的File对象。")])),_:1})]),a("li",null,[l[530]||(l[530]=a("code",null,'<font style="color:rgb(44, 62, 80);">FileWriter(String fileName)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[529]||(l[529]=[s("： 创建一个新的 FileWriter，参数为要读取的文件的名称。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[531]||(l[531]=[s("代码示例如下：")])),_:1}),l[1724]||(l[1724]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 第一种：使用File对象创建流对象</span>
<span class="line">File file = new File(&quot;a.txt&quot;);</span>
<span class="line">FileWriter fw = new FileWriter(file);</span>
<span class="line"></span>
<span class="line">// 第二种：使用文件名称创建流对象</span>
<span class="line">FileWriter fw = new FileWriter(&quot;b.txt&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Pl,[a("a",Al,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[532]||(l[532]=[s("FileWriter写入数据")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[533]||(l[533]=[s("①")])),_:1}),l[1725]||(l[1725]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[534]||(l[534]=[s("写入字符")])),_:1}),l[1726]||(l[1726]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[535]||(l[535]=[s("：")])),_:1}),l[1727]||(l[1727]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[536]||(l[536]=[s("write(int b)")])),_:1}),l[1728]||(l[1728]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[537]||(l[537]=[s(" 方法，每次可以写出一个字符，代码示例如下：")])),_:1}),l[1729]||(l[1729]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileWriter fw = null;</span>
<span class="line">try {</span>
<span class="line">    fw = new FileWriter(&quot;output.txt&quot;);</span>
<span class="line">    fw.write(72); // 写入字符&#39;H&#39;的ASCII码</span>
<span class="line">    fw.write(101); // 写入字符&#39;e&#39;的ASCII码</span>
<span class="line">    fw.write(108); // 写入字符&#39;l&#39;的ASCII码</span>
<span class="line">    fw.write(108); // 写入字符&#39;l&#39;的ASCII码</span>
<span class="line">    fw.write(111); // 写入字符&#39;o&#39;的ASCII码</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">} finally {</span>
<span class="line">    try {</span>
<span class="line">        if (fw != null) {</span>
<span class="line">            fw.close();</span>
<span class="line">        }</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[538]||(l[538]=[s(`在这个示例代码中，首先创建一个 FileWriter 对象 fw，并指定要写入的文件路径 "output.txt"。然后使用 fw.write() 方法将字节写入文件中，这里分别写入字符'H'、'e'、'l'、'l'、'o'的 ASCII 码。最后在 finally 块中关闭 FileWriter 对象，释放资源。`)])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[539]||(l[539]=[s("需要注意的是，使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1730]||(l[1730]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[540]||(l[540]=[s("write(int b)")])),_:1}),l[1731]||(l[1731]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[541]||(l[541]=[s("方法写入的是一个字节，而不是一个字符。如果需要写入字符，可以使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1732]||(l[1732]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[542]||(l[542]=[s("write(char cbuf[])")])),_:1}),l[1733]||(l[1733]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[543]||(l[543]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1734]||(l[1734]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[544]||(l[544]=[s("write(String str)")])),_:1}),l[1735]||(l[1735]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[545]||(l[545]=[s("方法。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[546]||(l[546]=[s("②")])),_:1}),l[1736]||(l[1736]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[547]||(l[547]=[s("写入字符数组")])),_:1}),l[1737]||(l[1737]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[548]||(l[548]=[s("：")])),_:1}),l[1738]||(l[1738]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[549]||(l[549]=[s("write(char[] cbuf)")])),_:1}),l[1739]||(l[1739]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[550]||(l[550]=[s(" 方法，将指定字符数组写入输出流。代码示例如下：")])),_:1}),l[1740]||(l[1740]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileWriter fw = null;</span>
<span class="line">try {</span>
<span class="line">    fw = new FileWriter(&quot;output.txt&quot;);</span>
<span class="line">    char[] chars = {&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;};</span>
<span class="line">    fw.write(chars); // 将字符数组写入文件</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">} finally {</span>
<span class="line">    try {</span>
<span class="line">        if (fw != null) {</span>
<span class="line">            fw.close();</span>
<span class="line">        }</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[551]||(l[551]=[s("③")])),_:1}),l[1741]||(l[1741]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[552]||(l[552]=[s("写入指定字符数组")])),_:1}),l[1742]||(l[1742]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[553]||(l[553]=[s("：")])),_:1}),l[1743]||(l[1743]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[554]||(l[554]=[s("write(char[] cbuf, int off, int len)")])),_:1}),l[1744]||(l[1744]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[555]||(l[555]=[s(" 方法，将指定字符数组的一部分写入输出流。代码示例如下（重复的部分就不写了哈，参照上面的部分）：")])),_:1}),l[1745]||(l[1745]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">fw = new FileWriter(&quot;output.txt&quot;);</span>
<span class="line">    char[] chars = {&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;,&#39;, &#39; &#39;, &#39;W&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;};</span>
<span class="line">fw.write(chars, 0, 5); // 将字符数组的前 5 个字符写入文件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[556]||(l[556]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1746]||(l[1746]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[557]||(l[557]=[s("fw.write()")])),_:1}),l[1747]||(l[1747]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[558]||(l[558]=[s("方法将字符数组的前 5 个字符写入文件中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[559]||(l[559]=[s("④")])),_:1}),l[1748]||(l[1748]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[560]||(l[560]=[s("写入字符串")])),_:1}),l[1749]||(l[1749]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[561]||(l[561]=[s("：")])),_:1}),l[1750]||(l[1750]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[562]||(l[562]=[s("write(String str)")])),_:1}),l[1751]||(l[1751]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[563]||(l[563]=[s(" 方法，将指定字符串写入输出流。代码示例如下：")])),_:1}),l[1752]||(l[1752]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">fw = new FileWriter(&quot;output.txt&quot;);</span>
<span class="line">String str = &quot;沉默王二&quot;;</span>
<span class="line">fw.write(str); // 将字符串写入文件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[564]||(l[564]=[s("⑤")])),_:1}),l[1753]||(l[1753]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[565]||(l[565]=[s("写入指定字符串")])),_:1}),l[1754]||(l[1754]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[566]||(l[566]=[s("：")])),_:1}),l[1755]||(l[1755]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[567]||(l[567]=[s("write(String str, int off, int len)")])),_:1}),l[1756]||(l[1756]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[568]||(l[568]=[s(" 方法，将指定字符串的一部分写入输出流。代码示例如下（try-with-resources形式）：")])),_:1}),l[1757]||(l[1757]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;沉默王二真的帅啊！&quot;;</span>
<span class="line">try (FileWriter fw = new FileWriter(&quot;output.txt&quot;)) {</span>
<span class="line">    fw.write(str, 0, 5); // 将字符串的前 5 个字符写入文件</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[569]||(l[569]=[s("【注意】如果不关闭资源，数据只是保存到缓冲区，并未保存到文件中。")])),_:1}),a("h4",zl,[a("a",Cl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[570]||(l[570]=[s("关闭close和刷新flush")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[571]||(l[571]=[s("因为 FileWriter 内置了缓冲区 ByteBuffer，所以如果不关闭输出流，就无法把字符写入到文件中。")])),_:1}),l[1758]||(l[1758]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438232911-be1fba62-69ae-405e-a389-6bf10ef362ac.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[572]||(l[572]=[s("但是关闭了流对象，就无法继续写数据了。如果我们既想写入数据，又想继续使用流，就需要")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1759]||(l[1759]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[573]||(l[573]=[s("flush")])),_:1}),l[1760]||(l[1760]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[574]||(l[574]=[s("方法了。")])),_:1}),a("p",null,[l[576]||(l[576]=a("code",null,'<font style="color:rgb(44, 62, 80);">flush</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[575]||(l[575]=[s(" ：刷新缓冲区(写入文件)，流对象可以继续使用。")])),_:1})]),a("p",null,[l[578]||(l[578]=a("code",null,'<font style="color:rgb(44, 62, 80);">close</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[577]||(l[577]=[s("：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[579]||(l[579]=[s("flush还是比较有趣的，来段代码体会体会：")])),_:1}),l[1761]||(l[1761]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//源   也就是输入流【读取流】 读取a.txt文件</span>
<span class="line">FileReader fr=new FileReader(&quot;abc.txt&quot;);  //必须要存在a.txt文件，否则报FileNotFoundException异常</span>
<span class="line">//目的地  也就是输出流</span>
<span class="line">FileWriter fw=new FileWriter(&quot;b.txt&quot;);  //系统会自动创建b.txt，因为它是输出流！</span>
<span class="line">int len;</span>
<span class="line">while((len=fr.read())!=-1){</span>
<span class="line">    fw.write(len);</span>
<span class="line">}</span>
<span class="line">//注意这里是没有使用close关闭流，开发中不能这样做，但是为了更好的体会flush的作用</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[580]||(l[580]=[s("运行效果是怎么样的呢？答案是b.txt文件中依旧是空的，并没有任何东西。")])),_:1}),l[1762]||(l[1762]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438233496-3c19fb3f-1abb-4531-b449-b50381a11bdf.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[581]||(l[581]=[s("原因我们前面已经说过了。")])),_:1}),l[1763]||(l[1763]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[582]||(l[582]=[s("编程就是这样，不去敲，永远学不会")])),_:1}),l[1764]||(l[1764]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[583]||(l[583]=[s("！！！所以一定要去敲，多敲啊！！！")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[584]||(l[584]=[s("在以上的代码中再添加下面三句代码，b.txt文件就能复制到源文件的数据了！")])),_:1}),l[1765]||(l[1765]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">fr.close();</span>
<span class="line">fw.flush();</span>
<span class="line">fw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[l[586]||(l[586]=a("code",null,'<font style="color:rgb(44, 62, 80);">flush()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[585]||(l[585]=[s("这个方法是清空缓存的意思，用于清空缓冲区的数据流，进行流的操作时，数据先被读到内存中，然后再把数据写到文件中。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[587]||(l[587]=[s("你可以使用下面的代码示例再体验一下：")])),_:1}),l[1766]||(l[1766]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileWriter fw = new FileWriter(&quot;fw.txt&quot;);</span>
<span class="line">// 写出数据，通过flush</span>
<span class="line">fw.write(&#39;刷&#39;); // 写出第1个字符</span>
<span class="line">fw.flush();</span>
<span class="line">fw.write(&#39;新&#39;); // 继续写出第2个字符，写出成功</span>
<span class="line">fw.flush();</span>
<span class="line"></span>
<span class="line">// 写出数据，然后close</span>
<span class="line">fw.write(&#39;关&#39;); // 写出第1个字符</span>
<span class="line">fw.close();</span>
<span class="line">fw.write(&#39;闭&#39;); // 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span>
<span class="line">fw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[588]||(l[588]=[s("注意，即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。当然你也可以用 try-with-resources 的方式。")])),_:1}),a("h4",Dl,[a("a",Nl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[589]||(l[589]=[s("FileWriter的续写和换行")])),_:1})])])]),a("p",null,[a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[590]||(l[590]=[s("续写和换行")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[591]||(l[591]=[s("：操作类似于")])),_:1}),a("a",Jl,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[592]||(l[592]=[s("FileOutputStream操作")])),_:1}),n(r)]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[593]||(l[593]=[s("，直接上代码：")])),_:1})]),l[1767]||(l[1767]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象，可以续写数据</span>
<span class="line">FileWriter fw = new FileWriter(&quot;fw.txt&quot;,true);     </span>
<span class="line">// 写出字符串</span>
<span class="line">fw.write(&quot;沉默王二&quot;);</span>
<span class="line">// 写出换行</span>
<span class="line">fw.write(&quot;\\r\\n&quot;);</span>
<span class="line">// 写出字符串</span>
<span class="line">fw.write(&quot;是傻 X&quot;);</span>
<span class="line">// 关闭资源</span>
<span class="line">fw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[594]||(l[594]=[s("输出结果如下所示：")])),_:1}),l[1768]||(l[1768]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">输出结果:</span>
<span class="line">沉默王二</span>
<span class="line">是傻 X</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Ll,[a("a",Vl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[595]||(l[595]=[s("文本文件复制")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[596]||(l[596]=[s("直接上代码：")])),_:1}),l[1769]||(l[1769]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">import java.io.FileReader;</span>
<span class="line">import java.io.FileWriter;</span>
<span class="line">import java.io.IOException;</span>
<span class="line"></span>
<span class="line">public class CopyFile {</span>
<span class="line">    public static void main(String[] args) throws IOException {</span>
<span class="line">        //创建输入流对象</span>
<span class="line">        FileReader fr=new FileReader(&quot;aa.txt&quot;);//文件不存在会抛出java.io.FileNotFoundException</span>
<span class="line">        //创建输出流对象</span>
<span class="line">        FileWriter fw=new FileWriter(&quot;copyaa.txt&quot;);</span>
<span class="line">        /*创建输出流做的工作：</span>
<span class="line">         *      1、调用系统资源创建了一个文件</span>
<span class="line">         *      2、创建输出流对象</span>
<span class="line">         *      3、把输出流对象指向文件        </span>
<span class="line">         * */</span>
<span class="line">        //文本文件复制，一次读一个字符</span>
<span class="line">        copyMethod1(fr, fw);</span>
<span class="line">        //文本文件复制，一次读一个字符数组</span>
<span class="line">        copyMethod2(fr, fw);</span>
<span class="line">        </span>
<span class="line">        fr.close();</span>
<span class="line">        fw.close();</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static void copyMethod1(FileReader fr, FileWriter fw) throws IOException {</span>
<span class="line">        int ch;</span>
<span class="line">        while((ch=fr.read())!=-1) {//读数据</span>
<span class="line">            fw.write(ch);//写数据</span>
<span class="line">        }</span>
<span class="line">        fw.flush();</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static void copyMethod2(FileReader fr, FileWriter fw) throws IOException {</span>
<span class="line">        char chs[]=new char[1024];</span>
<span class="line">        int len=0;</span>
<span class="line">        while((len=fr.read(chs))!=-1) {//读数据</span>
<span class="line">            fw.write(chs,0,len);//写数据</span>
<span class="line">        }</span>
<span class="line">        fw.flush();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h3",Gl,[a("a",Kl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[597]||(l[597]=[s("IO异常的处理")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[598]||(l[598]=[s("我们在学习的过程中可能习惯把异常抛出，而实际开发中建议使用")])),_:1}),l[1770]||(l[1770]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[599]||(l[599]=[s("try...catch...finally")])),_:1}),l[1771]||(l[1771]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[600]||(l[600]=[s("代码块，处理异常部分，格式代码如下：")])),_:1}),l[1772]||(l[1772]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 声明变量</span>
<span class="line">FileWriter fw = null;</span>
<span class="line">try {</span>
<span class="line">    //创建流对象</span>
<span class="line">    fw = new FileWriter(&quot;fw.txt&quot;);</span>
<span class="line">    // 写出数据</span>
<span class="line">    fw.write(&quot;二哥真的帅&quot;); //哥敢摸si</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">} finally {</span>
<span class="line">    try {</span>
<span class="line">        if (fw != null) {</span>
<span class="line">            fw.close();</span>
<span class="line">        }</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[601]||(l[601]=[s("或者直接使用 try-with-resources 的方式。")])),_:1}),l[1773]||(l[1773]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">try (FileWriter fw = new FileWriter(&quot;fw.txt&quot;)) {</span>
<span class="line">    // 写出数据</span>
<span class="line">    fw.write(&quot;二哥真的帅&quot;); //哥敢摸si</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[602]||(l[602]=[s("在这个代码中，try-with-resources 会在 try 块执行完毕后自动关闭 FileWriter 对象 fw，不需要手动关闭流。如果在 try 块中发生了异常，也会自动关闭流并抛出异常。因此，使用 try-with-resources 可以让代码更加简洁、安全和易读。")])),_:1}),a("h3",Ml,[a("a",Hl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[603]||(l[603]=[s("小结")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[604]||(l[604]=[s("Writer 和 Reader 是 Java I/O 中用于字符输入输出的抽象类，它们提供了一系列方法用于读取和写入字符数据。它们的区别在于 Writer 用于将字符数据写入到输出流中，而 Reader 用于从输入流中读取字符数据。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[605]||(l[605]=[s("Writer 和 Reader 的常用子类有 FileWriter、FileReader，可以将字符流写入和读取到文件中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[606]||(l[606]=[s("在使用 Writer 和 Reader 进行字符输入输出时，需要注意字符编码的问题。")])),_:1}),a("h2",Xl,[a("a",Zl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[607]||(l[607]=[s("字节流 - Java IO 基石")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[608]||(l[608]=[s("我们必须得明确一点，一切文件（文本、视频、图片）的数据都是以二进制的形式存储的，传输时也是。所以，字节流可以传输任意类型的文件数据。")])),_:1}),a("h3",$l,[a("a",Ql,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[609]||(l[609]=[s("字节输出流（OutputStream）")])),_:1})])])]),a("p",null,[l[615]||(l[615]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.OutputStream</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[610]||(l[610]=[s(" 是")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[611]||(l[611]=[s("字节输出流")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[612]||(l[612]=[s("的")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[613]||(l[613]=[s("超类")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[614]||(l[614]=[s("（父类），我们来看一下它定义的一些共性方法：")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[616]||(l[616]=[s("1、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1774]||(l[1774]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[617]||(l[617]=[s("close()")])),_:1}),l[1775]||(l[1775]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[618]||(l[618]=[s("：关闭此输出流并释放与此流相关联的系统资源。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[619]||(l[619]=[s("2、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1776]||(l[1776]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[620]||(l[620]=[s("flush()")])),_:1}),l[1777]||(l[1777]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[621]||(l[621]=[s("：刷新此输出流并强制缓冲区的字节被写入到目的地。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[622]||(l[622]=[s("3、 ")])),_:1}),l[1778]||(l[1778]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[623]||(l[623]=[s("write(byte[] b)")])),_:1}),l[1779]||(l[1779]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[624]||(l[624]=[s("：将 b.length 个字节从指定的字节数组写入此输出流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[625]||(l[625]=[s("4、")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1780]||(l[1780]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[626]||(l[626]=[s("write(byte[] b, int off, int len)")])),_:1}),l[1781]||(l[1781]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[627]||(l[627]=[s("：从指定的字节数组写入 len 字节到此输出流，从偏移量 off开始。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1782]||(l[1782]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[628]||(l[628]=[s("也就是说从off个字节数开始一直到len个字节结束")])),_:1}),l[1783]||(l[1783]=s("**")),a("h3",Yl,[a("a",cl,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[629]||(l[629]=[s("FileOutputStream类")])),_:1})])])]),a("p",null,[l[631]||(l[631]=a("code",null,'<font style="color:rgb(44, 62, 80);">OutputStream</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[630]||(l[630]=[s(" 有很多子类，我们从最简单的一个子类 FileOutputStream 开始。看名字就知道是文件输出流，用于将数据写入到文件。")])),_:1})]),a("h4",hl,[a("a",_l,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[632]||(l[632]=[s("FileOutputStream 的构造方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[633]||(l[633]=[s("1、使用文件名创建 FileOutputStream 对象。")])),_:1}),l[1784]||(l[1784]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String fileName = &quot;example.txt&quot;;</span>
<span class="line">FileOutputStream fos = new FileOutputStream(fileName);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[634]||(l[634]=[s('以上代码使用文件名 "example.txt" 创建一个 FileOutputStream 对象，将数据写入到该文件中。')])),_:1}),l[1785]||(l[1785]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[635]||(l[635]=[s("如果文件不存在，则创建一个新文件；如果文件已经存在，则覆盖原有文件")])),_:1}),l[1786]||(l[1786]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[636]||(l[636]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[637]||(l[637]=[s("2、使用文件对象创建 FileOutputStream 对象。")])),_:1}),l[1787]||(l[1787]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;example.txt&quot;);</span>
<span class="line">FileOutputStream fos = new FileOutputStream(file);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[638]||(l[638]=[s("FileOutputStream 的使用示例：")])),_:1}),l[1788]||(l[1788]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileOutputStream fos = null;</span>
<span class="line">try {</span>
<span class="line">  fos = new FileOutputStream(&quot;example.txt&quot;);</span>
<span class="line">  fos.write(&quot;沉默王二&quot;.getBytes());</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">  e.printStackTrace();</span>
<span class="line">} finally {</span>
<span class="line">  if (fos != null) {</span>
<span class="line">    try {</span>
<span class="line">      fos.close();</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">      e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[639]||(l[639]=[s('以上代码创建了一个 FileOutputStream 对象，将字符串 "沉默王二" 写入到 example.txt 文件中，并在最后关闭了输出流。')])),_:1}),a("h4",ls,[a("a",ss,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[640]||(l[640]=[s("FileOutputStream 写入字节数据")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[641]||(l[641]=[s("使用 FileOutputStream 写入字节数据主要通过")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1789]||(l[1789]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[642]||(l[642]=[s("write")])),_:1}),l[1790]||(l[1790]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[643]||(l[643]=[s("方法：")])),_:1}),l[1791]||(l[1791]=t('<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">write(int b)</span>\n<span class="line">write(byte[] b)</span>\n<span class="line">write(byte[] b,int off,int len)  //从`off`索引开始，`len`个字节</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[644]||(l[644]=[s("①、")])),_:1}),l[1792]||(l[1792]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[645]||(l[645]=[s("写入字节")])),_:1}),l[1793]||(l[1793]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[646]||(l[646]=[s("：")])),_:1}),l[1794]||(l[1794]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[647]||(l[647]=[s("write(int b)")])),_:1}),l[1795]||(l[1795]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[648]||(l[648]=[s("方法，每次可以写入一个字节，代码如下：")])),_:1}),l[1796]||(l[1796]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     </span>
<span class="line">// 写出数据</span>
<span class="line">fos.write(97); // 第1个字节</span>
<span class="line">fos.write(98); // 第2个字节</span>
<span class="line">fos.write(99); // 第3个字节</span>
<span class="line">// 关闭资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[649]||(l[649]=[s("字符 a 的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1797]||(l[1797]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[650]||(l[650]=[s("ASCII 值")])),_:1}),l[1798]||(l[1798]=s("](https://javabetter.cn/basic-extra-meal/java-unicode.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[651]||(l[651]=[s("为 97，字符 b 的ASCII 值为 98，字符 b 的ASCII 值为 99。也就是说，以上代码可以写成：")])),_:1}),l[1799]||(l[1799]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     </span>
<span class="line">// 写出数据</span>
<span class="line">fos.write(&#39;a&#39;); // 第1个字节</span>
<span class="line">fos.write(&#39;b&#39;); // 第2个字节</span>
<span class="line">fos.write(&#39;c&#39;); // 第3个字节</span>
<span class="line">// 关闭资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[652]||(l[652]=[s("当使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1800]||(l[1800]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[653]||(l[653]=[s("write(int b)")])),_:1}),l[1801]||(l[1801]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[654]||(l[654]=[s("方法写出一个字节时，参数 b 表示要写出的字节的整数值。由于一个字节只有8位，因此参数 b 的取值范围应该在 0 到 255 之间，超出这个范围的值将会被截断。例如，如果参数 b 的值为 -1，那么它会被截断为 255，如果参数 b 的值为 256，那么它会被截断为 0。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[655]||(l[655]=[s("在将参数 b 写入输出流中时，write(int b) 方法只会将参数 b 的低8位写入，而忽略高24位。这是因为在 Java 中，整型类型（包括 byte、short、int、long）在内存中以二进制补码形式表示。当将一个整型值传递给 write(int b) 方法时，方法会将该值转换为 byte 类型，只保留二进制补码的低8位，而忽略高24位。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[656]||(l[656]=[s("例如，如果要写出的整数为 0x12345678，它的二进制补码表示为 0001 0010 0011 0100 0101 0110 0111 1000。当使用 write(int b) 方法写出该整数时，只会将二进制补码的低8位 0111 1000 写出，而忽略高24位 0001 0010 0011 0100 0101 0110。这就是参数 b 的高24位被忽略的原因。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[657]||(l[657]=[s('0111 1000 是一个8位的二进制数，它对应的十进制数是 120，对应的 ASCII 码字符是小写字母 "x"。在 ASCII 码表中，小写字母 "x" 的十进制 ASCII 码值为 120。因此，如果使用 write(int b) 方法写出一个字节值为 0x78（十进制为 120），那么写出的结果就是小写字母 "x"。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[658]||(l[658]=[s("我们来验证一下：")])),_:1}),l[1802]||(l[1802]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileOutputStream fos = null;</span>
<span class="line">try {</span>
<span class="line">    fos = new FileOutputStream(&quot;example.txt&quot;);</span>
<span class="line"></span>
<span class="line">    fos.write(120);</span>
<span class="line">    fos.write(&#39;x&#39;);</span>
<span class="line">    fos.write(0x12345678);</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">} finally {</span>
<span class="line">    if (fos != null) {</span>
<span class="line">        try {</span>
<span class="line">            fos.close();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[659]||(l[659]=[s("来看一下结果：")])),_:1}),l[1803]||(l[1803]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438193120-fe58e794-62a3-4824-9eb8-8540d50417ed.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[660]||(l[660]=[s("果然是 3 个 x。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[661]||(l[661]=[s("②、")])),_:1}),l[1804]||(l[1804]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[662]||(l[662]=[s("写入字节数组")])),_:1}),l[1805]||(l[1805]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[663]||(l[663]=[s("：")])),_:1}),l[1806]||(l[1806]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[664]||(l[664]=[s("write(byte[] b)")])),_:1}),l[1807]||(l[1807]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[665]||(l[665]=[s("，代码示例：")])),_:1}),l[1808]||(l[1808]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     </span>
<span class="line">// 字符串转换为字节数组</span>
<span class="line">byte[] b = &quot;沉默王二有点帅&quot;.getBytes();</span>
<span class="line">// 写入字节数组数据</span>
<span class="line">fos.write(b);</span>
<span class="line">// 关闭资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[666]||(l[666]=[s("③、")])),_:1}),l[1809]||(l[1809]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[667]||(l[667]=[s("写入指定长度字节数组")])),_:1}),l[1810]||(l[1810]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[668]||(l[668]=[s("：")])),_:1}),l[1811]||(l[1811]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[669]||(l[669]=[s("write(byte[] b, int off, int len)")])),_:1}),l[1812]||(l[1812]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[670]||(l[670]=[s("，代码示例：")])),_:1}),l[1813]||(l[1813]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     </span>
<span class="line">// 字符串转换为字节数组</span>
<span class="line">byte[] b = &quot;abcde&quot;.getBytes();</span>
<span class="line">// 从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>
<span class="line">fos.write(b,2,2);</span>
<span class="line">// 关闭资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",ns,[a("a",es,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[671]||(l[671]=[s("FileOutputStream实现数据追加、换行")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[672]||(l[672]=[s("在上面的代码示例中，每次运行程序都会创建新的输出流对象，于是文件中的数据也会被清空。如果想保留目标文件中的数据，还能继续")])),_:1}),l[1814]||(l[1814]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[673]||(l[673]=[s("追加新数据")])),_:1}),l[1815]||(l[1815]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[674]||(l[674]=[s("，该怎么办呢？以及如何实现")])),_:1}),l[1816]||(l[1816]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[675]||(l[675]=[s("换行")])),_:1}),l[1817]||(l[1817]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[676]||(l[676]=[s("呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[677]||(l[677]=[s("其实很简单。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[678]||(l[678]=[s("我们来学习")])),_:1}),l[1818]||(l[1818]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[679]||(l[679]=[s("FileOutputStream")])),_:1}),l[1819]||(l[1819]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[680]||(l[680]=[s("的另外两个构造方法，如下：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[681]||(l[681]=[s("1、使用文件名和追加标志创建 FileOutputStream 对象")])),_:1}),l[1820]||(l[1820]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String fileName = &quot;example.txt&quot;;</span>
<span class="line">boolean append = true;</span>
<span class="line">FileOutputStream fos = new FileOutputStream(fileName, append);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[682]||(l[682]=[s('以上代码使用文件名 "example.txt" 和追加标志创建一个 FileOutputStream 对象，将数据追加到该文件的末尾。如果文件不存在，则创建一个新文件；如果文件已经存在，则在文件末尾追加数据。')])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[683]||(l[683]=[s("2、使用文件对象和追加标志创建 FileOutputStream 对象")])),_:1}),l[1821]||(l[1821]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file = new File(&quot;example.txt&quot;);</span>
<span class="line">boolean append = true;</span>
<span class="line">FileOutputStream fos = new FileOutputStream(file, append);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[684]||(l[684]=[s("以上代码使用文件对象和追加标志创建一个 FileOutputStream 对象，将数据追加到该文件的末尾。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[685]||(l[685]=[s("这两个构造方法，第二个参数中都需要传入一个boolean类型的值，")])),_:1}),l[1822]||(l[1822]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[686]||(l[686]=[s("true")])),_:1}),l[1823]||(l[1823]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[687]||(l[687]=[s("表示追加数据，")])),_:1}),l[1824]||(l[1824]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[688]||(l[688]=[s("false")])),_:1}),l[1825]||(l[1825]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[689]||(l[689]=[s("表示不追加也就是清空原有数据。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[690]||(l[690]=[s("实现数据追加代码如下：")])),_:1}),l[1826]||(l[1826]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 使用文件名称创建流对象</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;,true);     </span>
<span class="line">// 字符串转换为字节数组</span>
<span class="line">byte[] b = &quot;abcde&quot;.getBytes();</span>
<span class="line">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>
<span class="line">fos.write(b);</span>
<span class="line">// 关闭资源</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[691]||(l[691]=[s("多次运行代码，你会发现数据在不断地追加。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[692]||(l[692]=[s("在 Windows 系统中，换行符号是")])),_:1}),l[1827]||(l[1827]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[693]||(l[693]=[s("\\r\\n")])),_:1}),l[1828]||(l[1828]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[694]||(l[694]=[s("，具体代码如下：")])),_:1}),l[1829]||(l[1829]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String filename = &quot;example.txt&quot;;</span>
<span class="line">FileOutputStream fos = new FileOutputStream(filename, true);  // 追加模式</span>
<span class="line">String content = &quot;沉默王二\\r\\n&quot;;  // 使用回车符和换行符的组合</span>
<span class="line">fos.write(content.getBytes());</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[695]||(l[695]=[s("在 macOS 系统中，换行符是")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1830]||(l[1830]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[696]||(l[696]=[s("\\n")])),_:1}),l[1831]||(l[1831]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[697]||(l[697]=[s("，具体代码如下：")])),_:1}),l[1832]||(l[1832]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String filename = &quot;example.txt&quot;;</span>
<span class="line">FileOutputStream fos = new FileOutputStream(filename, true);  // 追加模式</span>
<span class="line">String content = &quot;沉默王二\\n&quot;;  // 只使用换行符</span>
<span class="line">fos.write(content.getBytes());</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[698]||(l[698]=[s("这里再唠一唠回车符和换行符。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[699]||(l[699]=[s("回车符（")])),_:1}),l[1833]||(l[1833]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[700]||(l[700]=[s("\\r")])),_:1}),l[1834]||(l[1834]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[701]||(l[701]=[s("）和换行符（")])),_:1}),l[1835]||(l[1835]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[702]||(l[702]=[s("\\n")])),_:1}),l[1836]||(l[1836]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[703]||(l[703]=[s("）是计算机中常见的控制字符，用于表示一行的结束或者换行的操作。它们在不同的操作系统和编程语言中的使用方式可能有所不同。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[704]||(l[704]=[s("在 Windows 系统中，通常使用回车符和换行符的组合（")])),_:1}),l[1837]||(l[1837]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[705]||(l[705]=[s("\\r\\n")])),_:1}),l[1838]||(l[1838]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[706]||(l[706]=[s("）来表示一行的结束。在文本文件中，每行的末尾都会以一个回车符和一个换行符的组合结束。这是由于早期的打印机和终端设备需要回车符和换行符的组合来完成一行的结束和换行操作。在 Windows 中，文本编辑器和命令行终端等工具都支持使用回车符和换行符的组合来表示一行的结束。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[707]||(l[707]=[s("而在 macOS 和 Linux 系统中，通常只使用换行符（")])),_:1}),l[1839]||(l[1839]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[708]||(l[708]=[s("\\n")])),_:1}),l[1840]||(l[1840]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[709]||(l[709]=[s("）来表示一行的结束。在文本文件中，每行的末尾只有一个换行符。这是由于早期 Unix 系统中的终端设备只需要换行符来完成一行的结束和跨行操作。在 macOS 和 Linux 中，文本编辑器和终端等工具都支持使用换行符来表示一行的结束。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[710]||(l[710]=[s('在编程语言中，通常也会使用回车符和换行符来进行字符串的操作。例如，在 Java 中，字符串中的回车符可以用 "')])),_:1}),l[1841]||(l[1841]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[711]||(l[711]=[s("\\r")])),_:1}),l[1842]||(l[1842]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[712]||(l[712]=[s('" 来表示，换行符可以用 "')])),_:1}),l[1843]||(l[1843]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[713]||(l[713]=[s("\\n")])),_:1}),l[1844]||(l[1844]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[714]||(l[714]=[s('" 来表示。在通过输入输出流进行文件读写时，也需要注意回车符和换行符的使用方式和操作系统的差异。')])),_:1}),a("h3",is,[a("a",as,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[715]||(l[715]=[s("字节输入流（InputStream）")])),_:1})])])]),a("p",null,[l[721]||(l[721]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.InputStream</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[716]||(l[716]=[s("是")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[717]||(l[717]=[s("字节输入流")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[718]||(l[718]=[s("的")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[719]||(l[719]=[s("超类")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[720]||(l[720]=[s("（父类），我们来看一下它的一些共性方法：")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[722]||(l[722]=[s("1、")])),_:1}),l[1845]||(l[1845]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[723]||(l[723]=[s("close()")])),_:1}),l[1846]||(l[1846]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[724]||(l[724]=[s("：关闭此输入流并释放与此流相关的系统资源。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[725]||(l[725]=[s("2、")])),_:1}),l[1847]||(l[1847]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[726]||(l[726]=[s("int read()")])),_:1}),l[1848]||(l[1848]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[727]||(l[727]=[s("： 从输入流读取数据的下一个字节。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[728]||(l[728]=[s("3、")])),_:1}),l[1849]||(l[1849]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[729]||(l[729]=[s("read(byte[] b)")])),_:1}),l[1850]||(l[1850]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[730]||(l[730]=[s("： 该方法返回的 int 值代表的是读取了多少个字节，读到几个返回几个，读取不到返回-1")])),_:1}),a("h3",ts,[a("a",rs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[731]||(l[731]=[s("FileInputStream类")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[732]||(l[732]=[s("InputStream 有很多子类，我们从最简单的一个子类 FileInputStream 开始。看名字就知道是文件输入流，用于将数据从文件中读取数据。")])),_:1}),a("h4",ds,[a("a",os,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[733]||(l[733]=[s("FileInputStream的构造方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[734]||(l[734]=[s("1、")])),_:1}),l[1851]||(l[1851]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[735]||(l[735]=[s("FileInputStream(String name)")])),_:1}),l[1852]||(l[1852]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[736]||(l[736]=[s("：创建一个 FileInputStream 对象，并打开指定名称的文件进行读取。文件名由 name 参数指定。如果文件不存在，将会抛出 FileNotFoundException 异常。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[737]||(l[737]=[s("2、")])),_:1}),l[1853]||(l[1853]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[738]||(l[738]=[s("FileInputStream(File file)")])),_:1}),l[1854]||(l[1854]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[739]||(l[739]=[s("：创建一个 FileInputStream 对象，并打开指定的 File 对象表示的文件进行读取。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[740]||(l[740]=[s("代码示例如下：")])),_:1}),l[1855]||(l[1855]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileInputStream 对象</span>
<span class="line">FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 读取文件内容</span>
<span class="line">int data;</span>
<span class="line">while ((data = fis.read()) != -1) {</span>
<span class="line">    System.out.print((char) data);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭输入流</span>
<span class="line">fis.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",us,[a("a",ps,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[741]||(l[741]=[s("FileInputStream读取字节数据")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[742]||(l[742]=[s("①、")])),_:1}),l[1856]||(l[1856]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[743]||(l[743]=[s("读取字节")])),_:1}),l[1857]||(l[1857]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[744]||(l[744]=[s("：")])),_:1}),l[1858]||(l[1858]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[745]||(l[745]=[s("read()")])),_:1}),l[1859]||(l[1859]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[746]||(l[746]=[s("方法会读取一个字节并返回其整数表示。如果已经到达文件的末尾，则返回 -1。如果在读取时发生错误，则会抛出 IOException 异常。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[747]||(l[747]=[s("代码示例如下：")])),_:1}),l[1860]||(l[1860]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileInputStream 对象</span>
<span class="line">FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 读取文件内容</span>
<span class="line">int data;</span>
<span class="line">while ((data = fis.read()) != -1) {</span>
<span class="line">    System.out.print((char) data);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭输入流</span>
<span class="line">fis.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[748]||(l[748]=[s("②、")])),_:1}),l[1861]||(l[1861]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[749]||(l[749]=[s("使用字节数组读取")])),_:1}),l[1862]||(l[1862]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[750]||(l[750]=[s("：")])),_:1}),l[1863]||(l[1863]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[751]||(l[751]=[s("read(byte[] b)")])),_:1}),l[1864]||(l[1864]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[752]||(l[752]=[s("方法会从输入流中最多读取 b.length 个字节，并将它们存储到缓冲区数组 b 中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[753]||(l[753]=[s("代码示例如下：")])),_:1}),l[1865]||(l[1865]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileInputStream 对象</span>
<span class="line">FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);</span>
<span class="line"></span>
<span class="line">// 读取文件内容到缓冲区</span>
<span class="line">byte[] buffer = new byte[1024];</span>
<span class="line">int count;</span>
<span class="line">while ((count = fis.read(buffer)) != -1) {</span>
<span class="line">    System.out.println(new String(buffer, 0, count));</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭输入流</span>
<span class="line">fis.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",bs,[a("a",vs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[754]||(l[754]=[s("字节流FileInputstream复制图片")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[755]||(l[755]=[s("原理很简单，就是把图片信息读入到字节输入流中，再通过字节输出流写入到文件中。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[756]||(l[756]=[s("代码示例如下所示：")])),_:1}),l[1866]||(l[1866]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建一个 FileInputStream 对象以读取原始图片文件</span>
<span class="line">FileInputStream fis = new FileInputStream(&quot;original.jpg&quot;);</span>
<span class="line"></span>
<span class="line">// 创建一个 FileOutputStream 对象以写入复制后的图片文件</span>
<span class="line">FileOutputStream fos = new FileOutputStream(&quot;copy.jpg&quot;);</span>
<span class="line"></span>
<span class="line">// 创建一个缓冲区数组以存储读取的数据</span>
<span class="line">byte[] buffer = new byte[1024];</span>
<span class="line">int count;</span>
<span class="line"></span>
<span class="line">// 读取原始图片文件并将数据写入复制后的图片文件</span>
<span class="line">while ((count = fis.read(buffer)) != -1) {</span>
<span class="line">    fos.write(buffer, 0, count);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 关闭输入流和输出流</span>
<span class="line">fis.close();</span>
<span class="line">fos.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[757]||(l[757]=[s("上面的代码创建了一个 FileInputStream 对象以读取原始图片文件，并创建了一个 FileOutputStream 对象以写入复制后的图片文件。然后，使用 while 循环逐个读取原始图片文件中的字节，并将其写入复制后的图片文件中。最后，关闭输入流和输出流释放资源。")])),_:1}),a("h3",ms,[a("a",gs,[a("span",null,[a("a",fs,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[758]||(l[758]=[s("小结")])),_:1}),n(r)])])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[759]||(l[759]=[s("InputStream 是字节输入流的抽象类，它定义了读取字节数据的方法，如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1867]||(l[1867]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[760]||(l[760]=[s("read()")])),_:1}),l[1868]||(l[1868]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[761]||(l[761]=[s("、")])),_:1}),l[1869]||(l[1869]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[762]||(l[762]=[s("read(byte[] b)")])),_:1}),l[1870]||(l[1870]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[763]||(l[763]=[s("、")])),_:1}),l[1871]||(l[1871]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[764]||(l[764]=[s("read(byte[] b, int off, int len)")])),_:1}),l[1872]||(l[1872]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[765]||(l[765]=[s("等。OutputStream 是字节输出流的抽象类，它定义了写入字节数据的方法，如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1873]||(l[1873]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[766]||(l[766]=[s("write(int b)")])),_:1}),l[1874]||(l[1874]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[767]||(l[767]=[s("、")])),_:1}),l[1875]||(l[1875]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[768]||(l[768]=[s("write(byte[] b)")])),_:1}),l[1876]||(l[1876]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[769]||(l[769]=[s("、")])),_:1}),l[1877]||(l[1877]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[770]||(l[770]=[s("write(byte[] b, int off, int len)")])),_:1}),l[1878]||(l[1878]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[771]||(l[771]=[s("等。这两个抽象类是字节流的基础。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[772]||(l[772]=[s("FileInputStream 是从文件中读取字节数据的流，它继承自 InputStream。FileOutputStream 是将字节数据写入文件的流，它继承自 OutputStream。这两个类是字节流最常用的实现类之一。")])),_:1}),a("h2",ys,[a("a",Ss,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[773]||(l[773]=[s("缓冲流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[774]||(l[774]=[s("Java 的缓冲流是对字节流和字符流的一种封装，通过在内存中开辟缓冲区来提高 I/O 操作的效率。Java 通过 BufferedInputStream 和 BufferedOutputStream 来实现字节流的缓冲，通过 BufferedReader 和 BufferedWriter 来实现字符流的缓冲。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[775]||(l[775]=[s("缓冲流的工作原理是将数据先写入缓冲区中，当缓冲区满时再一次性写入文件或输出流，或者当缓冲区为空时一次性从文件或输入流中读取一定量的数据。这样可以减少系统的 I/O 操作次数，提高系统的 I/O 效率，从而提高程序的运行效率。")])),_:1}),a("h3",ws,[a("a",Fs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[776]||(l[776]=[s("字节缓冲流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[777]||(l[777]=[s("BufferedInputStream 和 BufferedOutputStream 属于字节缓冲流，强化了字节流 InputStream 和 OutputStream，关于字节流，我们前面已经详细地讲过了，可以")])),_:1}),l[1879]||(l[1879]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[778]||(l[778]=[s("戳这个链接")])),_:1}),l[1880]||(l[1880]=s("](https://javabetter.cn/io/stream.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[779]||(l[779]=[s("去温习。")])),_:1}),a("h4",qs,[a("a",xs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[780]||(l[780]=[s("构造方法")])),_:1})])])]),a("ul",null,[a("li",null,[l[783]||(l[783]=a("code",null,'<font style="color:rgb(44, 62, 80);">BufferedInputStream(InputStream in)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[781]||(l[781]=[s(" ：创建一个新的缓冲输入流，注意参数类型为")])),_:1}),l[784]||(l[784]=a("code",null,'**<font style="color:rgb(44, 62, 80);">InputStream</font>**',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[782]||(l[782]=[s("。")])),_:1})]),a("li",null,[l[787]||(l[787]=a("code",null,'<font style="color:rgb(44, 62, 80);">BufferedOutputStream(OutputStream out)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[785]||(l[785]=[s("： 创建一个新的缓冲输出流，注意参数类型为")])),_:1}),l[788]||(l[788]=a("code",null,'**<font style="color:rgb(44, 62, 80);">OutputStream</font>**',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[786]||(l[786]=[s("。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[789]||(l[789]=[s("代码示例如下：")])),_:1}),l[1881]||(l[1881]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建字节缓冲输入流，先声明字节流</span>
<span class="line">FileInputStream fps = new FileInputStream(b.txt);</span>
<span class="line">BufferedInputStream bis = new BufferedInputStream(fps)</span>
<span class="line"></span>
<span class="line">// 创建字节缓冲输入流（一步到位）</span>
<span class="line">BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;b.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 创建字节缓冲输出流（一步到位）</span>
<span class="line">BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;b.txt&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Os,[a("a",js,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[790]||(l[790]=[s("缓冲流的高效")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[791]||(l[791]=[s("我们通过复制一个 370M+ 的大文件，来测试缓冲流的效率。为了做对比，我们先用基本流来实现一下，代码如下：")])),_:1}),l[1882]||(l[1882]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 记录开始时间</span>
<span class="line">long start = System.currentTimeMillis();</span>
<span class="line">// 创建流对象</span>
<span class="line">try (FileInputStream fis = new FileInputStream(&quot;py.mp4&quot;);//exe文件够大</span>
<span class="line">        FileOutputStream fos = new FileOutputStream(&quot;copyPy.mp4&quot;)){</span>
<span class="line">    // 读写数据</span>
<span class="line">    int b;</span>
<span class="line">    while ((b = fis.read()) != -1) {</span>
<span class="line">        fos.write(b);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">// 记录结束时间</span>
<span class="line">long end = System.currentTimeMillis();</span>
<span class="line">System.out.println(&quot;普通流复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[792]||(l[792]=[s("不好意思，我本机比较菜，10 分钟还在复制中。切换到缓冲流试一下，代码如下：")])),_:1}),l[1883]||(l[1883]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 记录开始时间</span>
<span class="line">long start = System.currentTimeMillis();</span>
<span class="line">// 创建流对象</span>
<span class="line">try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;py.mp4&quot;));</span>
<span class="line">        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copyPy.mp4&quot;));){</span>
<span class="line">    // 读写数据</span>
<span class="line">    int b;</span>
<span class="line">    while ((b = bis.read()) != -1) {</span>
<span class="line">        bos.write(b);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">// 记录结束时间</span>
<span class="line">long end = System.currentTimeMillis();</span>
<span class="line">System.out.println(&quot;缓冲流复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[793]||(l[793]=[s("只需要 8016 毫秒，如何更快呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[794]||(l[794]=[s("可以换数组的方式来读写，这个我们前面也有讲到，代码如下：")])),_:1}),l[1884]||(l[1884]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 记录开始时间</span>
<span class="line">long start = System.currentTimeMillis();</span>
<span class="line">// 创建流对象</span>
<span class="line">try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;py.mp4&quot;));</span>
<span class="line">        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copyPy.mp4&quot;));){</span>
<span class="line">    // 读写数据</span>
<span class="line">    int len;</span>
<span class="line">    byte[] bytes = new byte[8*1024];</span>
<span class="line">    while ((len = bis.read(bytes)) != -1) {</span>
<span class="line">        bos.write(bytes, 0 , len);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">// 记录结束时间</span>
<span class="line">long end = System.currentTimeMillis();</span>
<span class="line">System.out.println(&quot;缓冲流使用数组复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[795]||(l[795]=[s("这下就更快了，只需要 521 毫秒。")])),_:1}),a("h4",Is,[a("a",Ws,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[796]||(l[796]=[s("为什么字节缓冲流会这么快？")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[797]||(l[797]=[s("传统的 Java IO 是阻塞模式的，它的工作状态就是“读/写，等待，读/写，等待。。。。。。”")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[798]||(l[798]=[s("字节缓冲流解决的就是这个问题：")])),_:1}),l[1885]||(l[1885]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[799]||(l[799]=[s("一次多读点多写点，减少读写的频率，用空间换时间")])),_:1}),l[1886]||(l[1886]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[800]||(l[800]=[s("。")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[801]||(l[801]=[s("减少系统调用次数：在使用字节缓冲流时，数据不是立即写入磁盘或输出流，而是先写入缓冲区，当缓冲区满时再一次性写入磁盘或输出流。这样可以减少系统调用的次数，从而提高 I/O 操作的效率。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[802]||(l[802]=[s("减少磁盘读写次数：在使用字节缓冲流时，当需要读取数据时，缓冲流会先从缓冲区中读取数据，如果缓冲区中没有足够的数据，则会一次性从磁盘或输入流中读取一定量的数据。同样地，当需要写入数据时，缓冲流会先将数据写入缓冲区，如果缓冲区满了，则会一次性将缓冲区中的数据写入磁盘或输出流。这样可以减少磁盘读写的次数，从而提高 I/O 操作的效率。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[803]||(l[803]=[s("提高数据传输效率：在使用字节缓冲流时，由于数据是以块的形式进行传输，因此可以减少数据传输的次数，从而提高数据传输的效率。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[804]||(l[804]=[s("我们来看 BufferedInputStream 的 read 方法：")])),_:1}),l[1887]||(l[1887]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public synchronized int read() throws IOException {</span>
<span class="line">    if (pos &gt;= count) {     // 如果当前位置已经到达缓冲区末尾</span>
<span class="line">        fill();             // 填充缓冲区</span>
<span class="line">        if (pos &gt;= count)   // 如果填充后仍然到达缓冲区末尾，说明已经读取完毕</span>
<span class="line">            return -1;      // 返回 -1 表示已经读取完毕</span>
<span class="line">    }</span>
<span class="line">    return getBufIfOpen()[pos++] &amp; 0xff; // 返回当前位置的字节，并将位置加 1</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[805]||(l[805]=[s("这段代码主要有两部分：")])),_:1}),a("ul",null,[a("li",null,[l[807]||(l[807]=a("code",null,'<font style="color:rgb(44, 62, 80);">fill()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[806]||(l[806]=[s("：该方法会将缓冲 buf 填满。")])),_:1})]),a("li",null,[l[810]||(l[810]=a("code",null,'<font style="color:rgb(44, 62, 80);">getBufIfOpen()[pos++] & 0xff</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[808]||(l[808]=[s("：返回当前读取位置 pos 处的字节（")])),_:1}),l[811]||(l[811]=a("code",null,'<font style="color:rgb(44, 62, 80);">getBufIfOpen()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[809]||(l[809]=[s("返回的是 buffer 数组，是 byte 类型），并将其与 0xff 进行位与运算。这里的目的是将读取到的字节 b 当做无符号的字节处理，因为 Java 的 byte 类型是有符号的，而将 b 与 0xff 进行位与运算，就可以将其转换为无符号的字节，其范围为 0 到 255。")])),_:1})])]),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[812]||(l[812]=[s("byte & 0xFF 我们一会再细讲。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[813]||(l[813]=[s("再来看 FileInputStream 的 read 方法：")])),_:1}),l[1888]||(l[1888]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438250425-228e3b2c-7a0b-422c-8468-b67fe1ff64bc.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[814]||(l[814]=[s("在这段代码中，")])),_:1}),l[1889]||(l[1889]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[815]||(l[815]=[s("read0()")])),_:1}),l[1890]||(l[1890]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[816]||(l[816]=[s("方法是一个")])),_:1}),l[1891]||(l[1891]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[817]||(l[817]=[s("本地方法")])),_:1}),l[1892]||(l[1892]=s("](https://javabetter.cn/oo/native-method.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[818]||(l[818]=[s("，它的实现是由底层操作系统提供的，并不是 Java 语言实现的。在不同的操作系统上，")])),_:1}),l[1893]||(l[1893]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[819]||(l[819]=[s("read0()")])),_:1}),l[1894]||(l[1894]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[820]||(l[820]=[s("方法的实现可能会有所不同，但是它们的功能都是相同的，都是用于")])),_:1}),l[1895]||(l[1895]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[821]||(l[821]=[s("读取一个字节")])),_:1}),l[1896]||(l[1896]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[822]||(l[822]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[823]||(l[823]=[s("再来看一下 BufferedOutputStream 的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1897]||(l[1897]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[824]||(l[824]=[s("write(byte b[], int off, int len)")])),_:1}),l[1898]||(l[1898]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[825]||(l[825]=[s("方法：")])),_:1}),l[1899]||(l[1899]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public synchronized void write(byte b[], int off, int len) throws IOException {</span>
<span class="line">    if (len &gt;= buf.length) {    // 如果写入的字节数大于等于缓冲区长度</span>
<span class="line">        /* 如果请求的长度超过了输出缓冲区的大小，</span>
<span class="line">           先刷新缓冲区，然后直接将数据写入。</span>
<span class="line">           这样可以避免缓冲流级联时的问题。*/</span>
<span class="line">        flushBuffer();          // 先刷新缓冲区</span>
<span class="line">        out.write(b, off, len); // 直接将数据写入输出流</span>
<span class="line">        return;</span>
<span class="line">    }</span>
<span class="line">    if (len &gt; buf.length - count) { // 如果写入的字节数大于空余空间</span>
<span class="line">        flushBuffer();              // 先刷新缓冲区</span>
<span class="line">    }</span>
<span class="line">    System.arraycopy(b, off, buf, count, len); // 将数据拷贝到缓冲区中</span>
<span class="line">    count += len;                             // 更新计数器</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[826]||(l[826]=[s("首先，该方法会检查写入的字节数是否大于等于缓冲区长度，如果是，则先将缓冲区中的数据刷新到磁盘中，然后直接将数据写入输出流。这样做是为了避免缓冲流级联时的问题，即缓冲区的大小不足以容纳写入的数据时，可能会引发级联刷新，导致效率降低。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[827]||(l[827]=[s("级联问题（Cascade Problem）是指在一组缓冲流（Buffered Stream）中，由于缓冲区的大小不足以容纳要写入的数据，导致数据被分割成多个部分，并分别写入到不同的缓冲区中，最终需要逐个刷新缓冲区，从而导致性能下降的问题。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[828]||(l[828]=[s("其次，如果写入的字节数小于缓冲区长度，则检查缓冲区中剩余的空间是否足够容纳要写入的字节数，如果不够，则先将缓冲区中的数据刷新到磁盘中。然后，使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1900]||(l[1900]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[829]||(l[829]=[s("System.arraycopy()")])),_:1}),l[1901]||(l[1901]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[830]||(l[830]=[s("方法将要写入的数据拷贝到缓冲区中，并更新计数器 count。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[831]||(l[831]=[s("最后，如果写入的字节数小于缓冲区长度且缓冲区中还有剩余空间，则直接将要写入的数据拷贝到缓冲区中，并更新计数器 count。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[832]||(l[832]=[s("也就是说，只有当 buf 写满了，才会 flush，将数据刷到磁盘，默认一次刷 8192 个字节。")])),_:1}),l[1902]||(l[1902]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public BufferedOutputStream(OutputStream out) {</span>
<span class="line">    this(out, 8192);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[833]||(l[833]=[s("如果 buf 没有写满，会继续写 buf。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[834]||(l[834]=[s("对比一下 FileOutputStream 的 write 方法，同样是本地方法，一次只能写入一个字节。")])),_:1}),l[1903]||(l[1903]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438250419-3d14a5bf-ad4d-40a4-af01-dd5f4ca55e10.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[835]||(l[835]=[s("当把 BufferedOutputStream 和 BufferedInputStream 配合起来使用后，就减少了大量的读写次数，尤其是")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1904]||(l[1904]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[836]||(l[836]=[s("byte[] bytes = new byte[8*1024]")])),_:1}),l[1905]||(l[1905]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[837]||(l[837]=[s("，就相当于缓冲区的空间有 8 个 1024 字节，那读写效率就会大大提高。")])),_:1}),a("h4",Es,[a("a",Bs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[838]||(l[838]=[s("byte & 0xFF")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[839]||(l[839]=[s("byte 类型通常被用于存储二进制数据，例如读取和写入文件、网络传输等场景。在这些场景下，byte 类型的变量可以用来存储数据流中的每个字节，从而进行读取和写入操作。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[840]||(l[840]=[s("byte 类型是有符号的，即其取值范围为 -128 到 127。如果我们希望得到的是一个无符号的 byte 值，就需要使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1906]||(l[1906]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[841]||(l[841]=[s("byte & 0xFF")])),_:1}),l[1907]||(l[1907]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[842]||(l[842]=[s("来进行转换。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[843]||(l[843]=[s("这是因为 0xFF 是一个无符号的整数，它的二进制表示为 11111111。当一个 byte 类型的值与 0xFF 进行位与运算时，会将 byte 类型的值转换为一个无符号的整数，其范围为 0 到 255。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[844]||(l[844]=[s("0xff 是一个十六进制的数，相当于二进制的 11111111，& 运算符的意思是：如果两个操作数的对应位为 1，则输出 1，否则为 0；由于 0xff 有 8 个 1，单个 byte 转成 int 其实就是将 byte 和 int 类型的 255 进行(&)与运算。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[845]||(l[845]=[s("例如，如果我们有一个 byte 类型的变量 b，其值为 -1，那么 b & 0xFF 的结果就是 255。这样就可以将一个有符号的 byte 类型的值转换为一个无符号的整数。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[846]||(l[846]=[s("& 运算是一种二进制数据的计算方式, 两个操作位都为1，结果才为1，否则结果为0. 在上面的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1908]||(l[1908]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[847]||(l[847]=[s("getBufIfOpen()[pos++] & 0xff")])),_:1}),l[1909]||(l[1909]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[848]||(l[848]=[s("计算过程中, byte 有 8bit, OXFF 是16进制的255, 表示的是 int 类型, int 有 32bit.")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[849]||(l[849]=[s("如果")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1910]||(l[1910]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[850]||(l[850]=[s("getBufIfOpen()[pos++]")])),_:1}),l[1911]||(l[1911]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[851]||(l[851]=[s("为 -118, 那么其原码表示为")])),_:1}),l[1912]||(l[1912]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">00000000 00000000 00000000 10001010</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[852]||(l[852]=[s("反码为")])),_:1}),l[1913]||(l[1913]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">11111111 11111111 11111111 11110101</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[853]||(l[853]=[s("补码为")])),_:1}),l[1914]||(l[1914]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">11111111 11111111 11111111 11110110</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[854]||(l[854]=[s("0XFF 表示16进制的数据255, 原码, 反码, 补码都是一样的, 其二进制数据为")])),_:1}),l[1915]||(l[1915]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">00000000 00000000 00000000 11111111</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[855]||(l[855]=[s("0XFF 和 -118 进行&运算后结果为")])),_:1}),l[1916]||(l[1916]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">00000000 00000000 00000000 11110110</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[856]||(l[856]=[s("还原为原码后为")])),_:1}),l[1917]||(l[1917]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">00000000 00000000 00000000 10001010</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[857]||(l[857]=[s("其表示的 int 值为 138，可见将 byte 类型的 -118 与 0XFF 进行与运算后值由 -118 变成了 int 类型的 138，其中低8位和byte的-118完全一致。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[858]||(l[858]=[s("顺带聊一下 原码、反码和补码。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[859]||(l[859]=[s("①、原码")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[860]||(l[860]=[s("原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制:")])),_:1}),l[1918]||(l[1918]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">[+1]原 = 0000 0001</span>
<span class="line"></span>
<span class="line">[-1]原 = 1000 0001</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[861]||(l[861]=[s("第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：")])),_:1}),l[1919]||(l[1919]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">[1111 1111 , 0111 1111]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[862]||(l[862]=[s("即")])),_:1}),l[1920]||(l[1920]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">[-127 , 127]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[863]||(l[863]=[s("②、反码")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[864]||(l[864]=[s("反码的表示方法是：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[865]||(l[865]=[s("正数的反码是其本身")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[866]||(l[866]=[s("负数的反码是在其原码的基础上，符号位不变，其余各个位取反。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[867]||(l[867]=[s("例如：")])),_:1}),l[1921]||(l[1921]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">[+1] = [00000001]原 = [00000001]反</span>
<span class="line"></span>
<span class="line">[-1] = [10000001]原 = [11111110]反</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[868]||(l[868]=[s("可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[869]||(l[869]=[s("③、补码")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[870]||(l[870]=[s("补码的表示方法是：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[871]||(l[871]=[s("正数的补码就是其本身")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[872]||(l[872]=[s("负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(即在反码的基础上+1)")])),_:1})])]),l[1922]||(l[1922]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span>
<span class="line"></span>
<span class="line">[-1] = [10000001]原 = [11111110]反 = [11111111]补</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[873]||(l[873]=[s("对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[874]||(l[874]=[s("从上面可以看到：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[875]||(l[875]=[s("对于正数：原码，反码，补码都是一样的")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[876]||(l[876]=[s("对于负数：原码，反码，补码都是不一样的")])),_:1})])]),a("h3",Us,[a("a",ks,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[877]||(l[877]=[s("字符缓冲流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[878]||(l[878]=[s("BufferedReader 类继承自 Reader 类，提供了一些便捷的方法，例如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1923]||(l[1923]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[879]||(l[879]=[s("readLine()")])),_:1}),l[1924]||(l[1924]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[880]||(l[880]=[s("方法可以一次读取一行数据，而不是一个字符一个字符地读取。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[881]||(l[881]=[s("BufferedWriter 类继承自 Writer 类，提供了一些便捷的方法，例如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1925]||(l[1925]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[882]||(l[882]=[s("newLine()")])),_:1}),l[1926]||(l[1926]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[883]||(l[883]=[s("方法可以写入一个系统特定的行分隔符。")])),_:1}),a("h4",Rs,[a("a",Ts,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[884]||(l[884]=[s("构造方法")])),_:1})])])]),a("ul",null,[a("li",null,[l[888]||(l[888]=a("code",null,'<font style="color:rgb(44, 62, 80);">BufferedReader(Reader in)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[885]||(l[885]=[s("：创建一个新的缓冲输入流，注意参数类型为")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[886]||(l[886]=[s("Reader")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[887]||(l[887]=[s("。")])),_:1})]),a("li",null,[l[892]||(l[892]=a("code",null,'<font style="color:rgb(44, 62, 80);">BufferedWriter(Writer out)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[889]||(l[889]=[s("： 创建一个新的缓冲输出流，注意参数类型为")])),_:1}),a("strong",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[890]||(l[890]=[s("Writer")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[891]||(l[891]=[s("。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[893]||(l[893]=[s("代码示例如下：")])),_:1}),l[1927]||(l[1927]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建字符缓冲输入流</span>
<span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;b.txt&quot;));</span>
<span class="line">// 创建字符缓冲输出流</span>
<span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;b.txt&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",Ps,[a("a",As,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[894]||(l[894]=[s("字符缓冲流特有方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[895]||(l[895]=[s("字符缓冲流的基本方法与")])),_:1}),l[1928]||(l[1928]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[896]||(l[896]=[s("普通字符流")])),_:1}),l[1929]||(l[1929]=s("](https://javabetter.cn/io/reader-writer.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[897]||(l[897]=[s("调用方式一致，这里不再赘述，我们来看字符缓冲流")])),_:1}),l[1930]||(l[1930]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[898]||(l[898]=[s("特有")])),_:1}),l[1931]||(l[1931]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[899]||(l[899]=[s("的方法。")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[900]||(l[900]=[s("BufferedReader：")])),_:1}),l[905]||(l[905]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[901]||(l[901]=[s("String readLine()")])),_:1}),l[906]||(l[906]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[902]||(l[902]=[s(":")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[907]||(l[907]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[903]||(l[903]=[s("读一行数据")])),_:1}),l[908]||(l[908]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[904]||(l[904]=[s("，读取到最后返回 null")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[909]||(l[909]=[s("BufferedWriter：")])),_:1}),l[914]||(l[914]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[910]||(l[910]=[s("newLine()")])),_:1}),l[915]||(l[915]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[911]||(l[911]=[s(":")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[916]||(l[916]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[912]||(l[912]=[s("换行")])),_:1}),l[917]||(l[917]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[913]||(l[913]=[s("，由系统定义换行符。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[918]||(l[918]=[s("来看")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1932]||(l[1932]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[919]||(l[919]=[s("readLine()")])),_:1}),l[1933]||(l[1933]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[920]||(l[920]=[s("方法的代码示例：")])),_:1}),l[1934]||(l[1934]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建流对象</span>
<span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;a.txt&quot;));</span>
<span class="line">// 定义字符串,保存读取的一行文字</span>
<span class="line">String line  = null;</span>
<span class="line">// 循环读取,读取到最后返回null</span>
<span class="line">while ((line = br.readLine())!=null) {</span>
<span class="line">    System.out.print(line);</span>
<span class="line">    System.out.println(&quot;------&quot;);</span>
<span class="line">}</span>
<span class="line">// 释放资源</span>
<span class="line">br.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[921]||(l[921]=[s("再来看")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1935]||(l[1935]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[922]||(l[922]=[s("newLine()")])),_:1}),l[1936]||(l[1936]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[923]||(l[923]=[s("方法的代码示例：")])),_:1}),l[1937]||(l[1937]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建流对象</span>
<span class="line">BfferedWriter bw = new BufferedWriter(new FileWriter(&quot;b.txt&quot;));</span>
<span class="line">// 写出数据</span>
<span class="line">bw.write(&quot;沉&quot;);</span>
<span class="line">// 写出换行</span>
<span class="line">bw.newLine();</span>
<span class="line">bw.write(&quot;默&quot;);</span>
<span class="line">bw.newLine();</span>
<span class="line">bw.write(&quot;王&quot;);</span>
<span class="line">bw.newLine();</span>
<span class="line">bw.write(&quot;二&quot;);</span>
<span class="line">bw.newLine();</span>
<span class="line">// 释放资源</span>
<span class="line">bw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h3",zs,[a("a",Cs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[924]||(l[924]=[s("字符缓冲流练习")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[925]||(l[925]=[s("来欣赏一下我写的这篇诗：")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[926]||(l[926]=[s("6.岑夫子，丹丘生，将进酒，杯莫停。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[927]||(l[927]=[s("1.君不见黄河之水天上来，奔流到海不复回。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[928]||(l[928]=[s("8.钟鼓馔玉不足贵，但愿长醉不愿醒。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[929]||(l[929]=[s("3.人生得意须尽欢，莫使金樽空对月。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[930]||(l[930]=[s("5.烹羊宰牛且为乐，会须一饮三百杯。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[931]||(l[931]=[s("2.君不见高堂明镜悲白发，朝如青丝暮成雪。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[932]||(l[932]=[s("7.与君歌一曲，请君为我倾耳听。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[933]||(l[933]=[s("4.天生我材必有用，千金散尽还复来。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[934]||(l[934]=[s("欣赏完了没？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[935]||(l[935]=[s("估计你也看出来了，这是李白写的《将进酒》，不是我王二写的。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[936]||(l[936]=[s("😝")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[937]||(l[937]=[s("不过，顺序是乱的，还好，我都编了号。那如何才能按照正确的顺序来呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[938]||(l[938]=[s("来看代码实现：")])),_:1}),l[1938]||(l[1938]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 创建map集合,保存文本数据,键为序号,值为文字</span>
<span class="line">HashMap&lt;String, String&gt; lineMap = new HashMap&lt;&gt;();</span>
<span class="line"></span>
<span class="line">// 创建流对象  源</span>
<span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;logs/test.log&quot;));</span>
<span class="line">//目标</span>
<span class="line">BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;logs/test1.txt&quot;));</span>
<span class="line"></span>
<span class="line">// 读取数据</span>
<span class="line">String line;</span>
<span class="line">while ((line = br.readLine())!=null) {</span>
<span class="line">    // 解析文本</span>
<span class="line">    if (line.isEmpty()) {</span>
<span class="line">        continue;</span>
<span class="line">    }</span>
<span class="line">    String[] split = line.split(Pattern.quote(&quot;.&quot;));</span>
<span class="line">    // 保存到集合</span>
<span class="line">    lineMap.put(split[0], split[1]);</span>
<span class="line">}</span>
<span class="line">// 释放资源</span>
<span class="line">br.close();</span>
<span class="line"></span>
<span class="line">// 遍历map集合</span>
<span class="line">for (int i = 1; i &lt;= lineMap.size(); i++) {</span>
<span class="line">    String key = String.valueOf(i);</span>
<span class="line">    // 获取map中文本</span>
<span class="line">    String value = lineMap.get(key);</span>
<span class="line">    // 写出拼接文本</span>
<span class="line">    bw.write(key+&quot;.&quot;+value);</span>
<span class="line">    // 写出换行</span>
<span class="line">    bw.newLine();</span>
<span class="line">}</span>
<span class="line">// 释放资源</span>
<span class="line">bw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[939]||(l[939]=[s("这里面用到的知识都是我们前面学过的，比如说")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1939]||(l[1939]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[940]||(l[940]=[s("HashMap")])),_:1}),l[1940]||(l[1940]=s("](https://javabetter.cn/collection/hashmap.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[941]||(l[941]=[s("，")])),_:1}),l[1941]||(l[1941]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[942]||(l[942]=[s("字符串分割")])),_:1}),l[1942]||(l[1942]=s("](https://javabetter.cn/string/split.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[943]||(l[943]=[s("，包括刚刚学习的字符缓冲流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[944]||(l[944]=[s("来看输出结果")])),_:1}),l[1943]||(l[1943]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">1.君不见黄河之水天上来，奔流到海不复回。</span>
<span class="line">2.君不见高堂明镜悲白发，朝如青丝暮成雪。</span>
<span class="line">3.人生得意须尽欢，莫使金樽空对月。</span>
<span class="line">4.天生我材必有用，千金散尽还复来。</span>
<span class="line">5.烹羊宰牛且为乐，会须一饮三百杯。</span>
<span class="line">6.岑夫子，丹丘生，将进酒，杯莫停。</span>
<span class="line">7.与君歌一曲，请君为我倾耳听。</span>
<span class="line">8.钟鼓馔玉不足贵，但愿长醉不愿醒。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h2",Ds,[a("a",Ns,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[945]||(l[945]=[s("转换流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[946]||(l[946]=[s("转换流可以将一个")])),_:1}),l[1944]||(l[1944]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[947]||(l[947]=[s("字节流")])),_:1}),l[1945]||(l[1945]=s("](https://javabetter.cn/io/stream.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[948]||(l[948]=[s("包装成")])),_:1}),l[1946]||(l[1946]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[949]||(l[949]=[s("字符流")])),_:1}),l[1947]||(l[1947]=s("](https://javabetter.cn/io/reader-writer.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[950]||(l[950]=[s("，或者将一个字符流包装成字节流。这种转换通常用于处理文本数据，如读取文本文件或将数据从网络传输到应用程序。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[951]||(l[951]=[s("转换流主要有两种类型：InputStreamReader 和 OutputStreamWriter。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[952]||(l[952]=[s("InputStreamReader 将一个字节输入流转换为一个字符输入流，而 OutputStreamWriter 将一个字节输出流转换为一个字符输出流。它们使用指定的字符集将字节流和字符流之间进行转换。常用的字符集包括 UTF-8、GBK、ISO-8859-1 等。")])),_:1}),l[1948]||(l[1948]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438270737-0a11faaf-eb95-411e-be6e-941703fa98bd.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[953]||(l[953]=[s("二哥的 Java 进阶之路：字节流字符流")])),_:1}),a("h3",Js,[a("a",Ls,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[954]||(l[954]=[s("编码和解码")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[955]||(l[955]=[s("在计算机中，数据通常以二进制形式存储和传输。")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[956]||(l[956]=[s("编码就是将原始数据（比如说文本、图像、视频、音频等）转换为二进制形式。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[957]||(l[957]=[s("解码就是将二进制数据转换为原始数据，是一个反向的过程。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[958]||(l[958]=[s("常见的编码和解码方式有很多，举几个例子：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[959]||(l[959]=[s("ASCII 编码和解码：在计算机中，常常使用 ASCII 码来表示字符，如键盘上的字母、数字和符号等。例如，字母 A 对应的 ASCII 码是 65，字符 + 对应的 ASCII 码是 43。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[960]||(l[960]=[s("Unicode 编码和解码：Unicode 是一种字符集，支持多种语言和字符集。在计算机中，Unicode 可以使用 UTF-8、UTF-16 等编码方式将字符转换为二进制数据进行存储和传输。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[961]||(l[961]=[s('Base64 编码和解码：Base64 是一种将二进制数据转换为 ASCII 码的编码方式。它将 3 个字节的二进制数据转换为 4 个 ASCII 字符，以便在网络传输中使用。例如，将字符串 "Hello, world!" 进行 Base64 编码后，得到的结果是 "SGVsbG8sIHdvcmxkIQ=="。')])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[962]||(l[962]=[s("图像编码和解码：在图像处理中，常常使用 JPEG、PNG、GIF 等编码方式将图像转换为二进制数据进行存储和传输。在解码时，可以将二进制数据转换为图像，以便显示或处理。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[963]||(l[963]=[s("视频编码和解码：在视频处理中，常常使用 H.264、AVC、MPEG-4 等编码方式将视频转换为二进制数据进行存储和传输。在解码时，可以将二进制数据转换为视频，以便播放或处理。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[964]||(l[964]=[s("简单一点说就是：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[965]||(l[965]=[s("编码：字符(能看懂的)-->字节(看不懂的)")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[966]||(l[966]=[s("解码：字节(看不懂的)-->字符(能看懂的)")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[967]||(l[967]=[s("我用代码来表示一下：")])),_:1}),l[1949]||(l[1949]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;沉默王二&quot;;</span>
<span class="line">String charsetName = &quot;UTF-8&quot;;</span>
<span class="line"></span>
<span class="line">// 编码</span>
<span class="line">byte[] bytes = str.getBytes(Charset.forName(charsetName));</span>
<span class="line">System.out.println(&quot;编码: &quot; + bytes);</span>
<span class="line"></span>
<span class="line">// 解码</span>
<span class="line">String decodedStr = new String(bytes, Charset.forName(charsetName));</span>
<span class="line">System.out.println(&quot;解码: &quot; + decodedStr);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[968]||(l[968]=[s("在这个示例中，首先定义了一个字符串变量 str 和一个字符集名称 charsetName。然后，使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1950]||(l[1950]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[969]||(l[969]=[s("Charset.forName()")])),_:1}),l[1951]||(l[1951]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[970]||(l[970]=[s("方法获取指定字符集的 Charset 对象。接着，使用字符串的 getBytes() 方法将字符串编码为指定字符集的字节数组。最后，使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1952]||(l[1952]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[971]||(l[971]=[s("new String()")])),_:1}),l[1953]||(l[1953]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[972]||(l[972]=[s("方法将字节数组解码为字符串。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[973]||(l[973]=[s("需要注意的是，在编码和解码过程中，要保证使用相同的字符集，以便正确地转换数据。")])),_:1}),a("h3",Vs,[a("a",Gs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[974]||(l[974]=[s("字符集")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[975]||(l[975]=[s("Charset：字符集，是一组字符的集合，每个字符都有一个唯一的编码值，也称为码点。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[976]||(l[976]=[s("常见的字符集包括 ASCII、Unicode 和 GBK，而 Unicode 字符集包含了多种编码方式，比如说 UTF-8、UTF-16。")])),_:1}),l[1954]||(l[1954]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438270861-c6610dc2-49b5-4fb2-a58d-3fc5915c0951.png"},null,-1)),a("h4",Ks,[a("a",Ms,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[977]||(l[977]=[s("ASCII 字符集")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[978]||(l[978]=[s("ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）字符集是一种最早的字符集，包含 128 个字符，其中包括控制字符、数字、英文字母以及一些标点符号。ASCII 字符集中的每个字符都有一个唯一的 7 位二进制编码（由 0 和 1 组成），可以表示为十进制数或十六进制数。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[979]||(l[979]=[s("ASCII 编码方式是一种固定长度的编码方式，每个字符都使用 7 位二进制编码来表示。ASCII 编码只能表示英文字母、数字和少量的符号，不能表示其他语言的文字和符号，因此在全球范围内的应用受到了很大的限制。")])),_:1}),a("h4",Hs,[a("a",Xs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[980]||(l[980]=[s("Unicode 字符集")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[981]||(l[981]=[s("Unicode 包含了世界上几乎所有的字符，用于表示人类语言、符号和表情等各种信息。Unicode 字符集中的每个字符都有一个唯一的码点（code point），用于表示该字符在字符集中的位置，可以用十六进制数表示。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[982]||(l[982]=[s("为了在计算机中存储和传输 Unicode 字符集中的字符，需要使用一种编码方式。UTF-8、UTF-16 和 UTF-32 都是 Unicode 字符集的编码方式，用于将 Unicode 字符集中的字符转换成字节序列，以便于存储和传输。它们的差别在于使用的字节长度不同。")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[983]||(l[983]=[s("UTF-8 是一种可变长度的编码方式，对于 ASCII 字符（码点范围为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[986]||(l[986]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[984]||(l[984]=[s("0x00~0x7F")])),_:1}),l[987]||(l[987]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[985]||(l[985]=[s("），使用一个字节表示，对于其他 Unicode 字符，使用两个、三个或四个字节表示。UTF-8 编码方式被广泛应用于互联网和计算机领域，因为它可以有效地压缩数据，适用于网络传输和存储。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[988]||(l[988]=[s("UTF-16 是一种固定长度的编码方式，对于基本多语言平面（Basic Multilingual Plane，Unicode 字符集中的一个码位范围，包含了世界上大部分常用的字符，总共包含了超过 65,000 个码位）中的字符（码点范围为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[991]||(l[991]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[989]||(l[989]=[s("0x0000~0xFFFF")])),_:1}),l[992]||(l[992]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[990]||(l[990]=[s("），使用两个字节表示，对于其他 Unicode 字符，使用四个字节表示。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[993]||(l[993]=[s("UTF-32 是一种固定长度的编码方式，对于所有 Unicode 字符，使用四个字节表示。")])),_:1})])]),a("h4",Zs,[a("a",$s,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[994]||(l[994]=[s("GBK 字符集")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[995]||(l[995]=[s("GBK 包含了 GB2312 字符集中的字符，同时还扩展了许多其他汉字字符和符号，共收录了 21,913 个字符。GBK 采用双字节编码方式，每个汉字占用 2 个字节，其中高字节和低字节都使用了 8 位，因此 GBK 编码共有")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1955]||(l[1955]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[996]||(l[996]=[s("2^16=65536")])),_:1}),l[1956]||(l[1956]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[997]||(l[997]=[s("种可能的编码，其中大部分被用于表示汉字字符。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[998]||(l[998]=[s("GBK 编码是一种变长的编码方式，对于 ASCII 字符（码位范围为 0x00 到 0x7F），使用一个字节表示，对于其他字符，使用两个字节表示。GBK 编码中的每个字节都可以采用 0x81 到 0xFE 之间的任意一个值，因此可以表示")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1957]||(l[1957]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[999]||(l[999]=[s("2^15=32768")])),_:1}),l[1958]||(l[1958]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1e3]||(l[1e3]=[s("个字符。为了避免与 ASCII 码冲突，GBK 编码的第一个字节采用了 0x81 到 0xFE 之间除了 0x7F 的所有值，第二个字节采用了 0x40 到 0x7E 和 0x80 到 0xFE 之间的所有值，共 94 个值。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1001]||(l[1001]=[s("GB2312 的全名是《信息交换用汉字编码字符集基本集》，也被称为“国标码”。采用了双字节编码方式，每个汉字占用 2 个字节，其中高字节和低字节都使用了 8 位，因此 GB2312 编码共有")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1959]||(l[1959]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1002]||(l[1002]=[s("2^16=65536")])),_:1}),l[1960]||(l[1960]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1003]||(l[1003]=[s("种可能的编码，其中大部分被用于表示汉字字符。GB2312 编码中的每个字节都可以采用 0xA1 到 0xF7 之间的任意一个值，因此可以表示 126 个字符。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1004]||(l[1004]=[s("GB2312 是一个较为简单的字符集，只包含了常用的汉字和符号，因此对于一些较为罕见的汉字和生僻字，GB2312 不能满足需求，现在已经逐渐被 GBK、GB18030 等字符集所取代。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1005]||(l[1005]=[s("GB18030 是最新的中文码表。收录汉字 70244 个，采用多字节编码，每个字可以由 1 个、2 个或 4 个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。")])),_:1}),a("h3",Qs,[a("a",Ys,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1006]||(l[1006]=[s("乱码")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1007]||(l[1007]=[s("当使用不同的编码方式读取或者写入文件时，就会出现乱码问题，来看示例。")])),_:1}),l[1961]||(l[1961]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = &quot;沉默王二！&quot;;</span>
<span class="line"></span>
<span class="line">try {</span>
<span class="line">    // 将字符串按GBK编码方式保存到文件中</span>
<span class="line">    OutputStreamWriter out = new OutputStreamWriter(</span>
<span class="line">            new FileOutputStream(&quot;logs/test_utf8.txt&quot;), &quot;GBK&quot;);</span>
<span class="line">    out.write(s);</span>
<span class="line">    out.close();</span>
<span class="line"></span>
<span class="line">    FileReader fileReader = new FileReader(&quot;logs/test_utf8.txt&quot;);</span>
<span class="line">    int read;</span>
<span class="line">    while ((read = fileReader.read()) != -1) {</span>
<span class="line">        System.out.print((char)read);</span>
<span class="line">    }</span>
<span class="line">    fileReader.close();</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1008]||(l[1008]=[s("在上面的示例代码中，首先定义了一个包含中文字符的字符串，然后将该字符串按 GBK 编码方式保存到文件中，接着将文件按默认编码方式（UTF-8）读取，并显示内容。此时就会出现乱码问题，显示为“��Ĭ������”。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1009]||(l[1009]=[s("这是因为文件中的 GBK 编码的字符在使用 UTF-8 编码方式解析时无法正确解析，从而导致出现乱码问题。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1010]||(l[1010]=[s("那如何才能解决乱码问题呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1011]||(l[1011]=[s("这就引出我们今天的主角了——转换流。")])),_:1}),a("h3",cs,[a("a",hs,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1012]||(l[1012]=[s("InputStreamReader")])),_:1})])])]),a("p",null,[l[1014]||(l[1014]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.InputStreamReader</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1013]||(l[1013]=[s("是 Reader 类的子类。它的作用是将字节流（InputStream）转换为字符流（Reader），同时支持指定的字符集编码方式，从而实现字符流与字节流之间的转换。")])),_:1})]),a("h4",_s,[a("a",ln,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1015]||(l[1015]=[s("构造方法")])),_:1})])])]),a("ul",null,[a("li",null,[l[1017]||(l[1017]=a("code",null,'<font style="color:rgb(44, 62, 80);">InputStreamReader(InputStream in)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1016]||(l[1016]=[s(": 创建一个使用默认字符集的字符流。")])),_:1})]),a("li",null,[l[1019]||(l[1019]=a("code",null,'<font style="color:rgb(44, 62, 80);">InputStreamReader(InputStream in, String charsetName)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1018]||(l[1018]=[s(": 创建一个指定字符集的字符流。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1020]||(l[1020]=[s("代码示例如下：")])),_:1}),l[1962]||(l[1962]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;));</span>
<span class="line">InputStreamReader isr2 = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;) , &quot;GBK&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h4",sn,[a("a",nn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1021]||(l[1021]=[s("解决编码问题")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1022]||(l[1022]=[s("下面是一个使用 InputStreamReader 解决乱码问题的示例代码：")])),_:1}),l[1963]||(l[1963]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = &quot;沉默王二！&quot;;</span>
<span class="line"></span>
<span class="line">try {</span>
<span class="line">    // 将字符串按GBK编码方式保存到文件中</span>
<span class="line">    OutputStreamWriter outUtf8 = new OutputStreamWriter(</span>
<span class="line">            new FileOutputStream(&quot;logs/test_utf8.txt&quot;), &quot;GBK&quot;);</span>
<span class="line">    outUtf8.write(s);</span>
<span class="line">    outUtf8.close();</span>
<span class="line"></span>
<span class="line">    // 将字节流转换为字符流，使用GBK编码方式</span>
<span class="line">    InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;logs/test_utf8.txt&quot;), &quot;GBK&quot;);</span>
<span class="line">    // 读取字符流</span>
<span class="line">    int c;</span>
<span class="line">    while ((c = isr.read()) != -1) {</span>
<span class="line">        System.out.print((char) c);</span>
<span class="line">    }</span>
<span class="line">    isr.close();</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1023]||(l[1023]=[s("由于使用了 InputStreamReader 对字节流进行了编码方式的转换，因此在读取字符流时就可以正确地解析出中文字符，避免了乱码问题。")])),_:1}),a("h3",en,[a("a",an,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1024]||(l[1024]=[s("OutputStreamWriter")])),_:1})])])]),a("p",null,[l[1026]||(l[1026]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.OutputStreamWriter</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1025]||(l[1025]=[s("是 Writer 的子类，字面看容易误以为是转为字符流，其实是将字符流转换为字节流，是字符流到字节流的桥梁。")])),_:1})]),a("ul",null,[a("li",null,[l[1028]||(l[1028]=a("code",null,'<font style="color:rgb(44, 62, 80);">OutputStreamWriter(OutputStream in)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1027]||(l[1027]=[s(": 创建一个使用默认字符集的字符流。")])),_:1})]),a("li",null,[l[1030]||(l[1030]=a("code",null,'<font style="color:rgb(44, 62, 80);">OutputStreamWriter(OutputStream in, String charsetName)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1029]||(l[1029]=[s("：创建一个指定字符集的字符流。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1031]||(l[1031]=[s("代码示例如下：")])),_:1}),l[1964]||(l[1964]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">OutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream(&quot;a.txt&quot;));</span>
<span class="line">OutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream(&quot;b.txt&quot;) , &quot;GBK&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1032]||(l[1032]=[s("通常为了提高读写效率，我们会在转换流上再加一层")])),_:1}),l[1965]||(l[1965]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1033]||(l[1033]=[s("缓冲流")])),_:1}),l[1966]||(l[1966]=s("](https://javabetter.cn/io/buffer.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1034]||(l[1034]=[s("，来看代码示例：")])),_:1}),l[1967]||(l[1967]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">try {</span>
<span class="line">    // 从文件读取字节流，使用UTF-8编码方式</span>
<span class="line">    FileInputStream fis = new FileInputStream(&quot;test.txt&quot;);</span>
<span class="line">    // 将字节流转换为字符流，使用UTF-8编码方式</span>
<span class="line">    InputStreamReader isr = new InputStreamReader(fis, &quot;UTF-8&quot;);</span>
<span class="line">    // 使用缓冲流包装字符流，提高读取效率</span>
<span class="line">    BufferedReader br = new BufferedReader(isr);</span>
<span class="line">    // 创建输出流，使用UTF-8编码方式</span>
<span class="line">    FileOutputStream fos = new FileOutputStream(&quot;output.txt&quot;);</span>
<span class="line">    // 将输出流包装为转换流，使用UTF-8编码方式</span>
<span class="line">    OutputStreamWriter osw = new OutputStreamWriter(fos, &quot;UTF-8&quot;);</span>
<span class="line">    // 使用缓冲流包装转换流，提高写入效率</span>
<span class="line">    BufferedWriter bw = new BufferedWriter(osw);</span>
<span class="line"></span>
<span class="line">    // 读取输入文件的每一行，写入到输出文件中</span>
<span class="line">    String line;</span>
<span class="line">    while ((line = br.readLine()) != null) {</span>
<span class="line">        bw.write(line);</span>
<span class="line">        bw.newLine(); // 每行结束后写入一个换行符</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // 关闭流</span>
<span class="line">    br.close();</span>
<span class="line">    bw.close();</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1035]||(l[1035]=[s("在上面的示例代码中，首先使用 FileInputStream 从文件中读取字节流，使用 UTF-8 编码方式进行读取。然后，使用 InputStreamReader 将字节流转换为字符流，使用 UTF-8 编码方式进行转换。接着，使用 BufferedReader 包装字符流，提高读取效率。然后，创建 FileOutputStream 用于输出文件，使用 UTF-8 编码方式进行创建。接着，使用 OutputStreamWriter 将输出流转换为字符流，使用 UTF-8 编码方式进行转换。最后，使用 BufferedWriter 包装转换流，提高写入效率。")])),_:1}),a("h3",tn,[a("a",rn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1036]||(l[1036]=[s("小结")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1037]||(l[1037]=[s("InputStreamReader 和 OutputStreamWriter 是将字节流转换为字符流或者将字符流转换为字节流。通常用于解决字节流和字符流之间的转换问题，可以将字节流以指定的字符集编码方式转换为字符流，或者将字符流以指定的字符集编码方式转换为字节流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1038]||(l[1038]=[s("InputStreamReader 类的常用方法包括：")])),_:1}),a("ul",null,[a("li",null,[l[1040]||(l[1040]=a("code",null,'<font style="color:rgb(44, 62, 80);">read()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1039]||(l[1039]=[s("：从输入流中读取一个字符的数据。")])),_:1})]),a("li",null,[l[1042]||(l[1042]=a("code",null,'<font style="color:rgb(44, 62, 80);">read(char[] cbuf, int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1041]||(l[1041]=[s("：从输入流中读取 len 个字符的数据到指定的字符数组 cbuf 中，从 off 位置开始存放。")])),_:1})]),a("li",null,[l[1044]||(l[1044]=a("code",null,'<font style="color:rgb(44, 62, 80);">ready()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1043]||(l[1043]=[s("：返回此流是否已准备好读取。")])),_:1})]),a("li",null,[l[1046]||(l[1046]=a("code",null,'<font style="color:rgb(44, 62, 80);">close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1045]||(l[1045]=[s("：关闭输入流。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1047]||(l[1047]=[s("OutputStreamWriter 类的常用方法包括：")])),_:1}),a("ul",null,[a("li",null,[l[1049]||(l[1049]=a("code",null,'<font style="color:rgb(44, 62, 80);">write(int c)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1048]||(l[1048]=[s("：向输出流中写入一个字符的数据。")])),_:1})]),a("li",null,[l[1051]||(l[1051]=a("code",null,'<font style="color:rgb(44, 62, 80);">write(char[] cbuf, int off, int len)</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1050]||(l[1050]=[s("：向输出流中写入指定字符数组 cbuf 中的 len 个字符，从 off 位置开始。")])),_:1})]),a("li",null,[l[1053]||(l[1053]=a("code",null,'<font style="color:rgb(44, 62, 80);">flush()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1052]||(l[1052]=[s("：将缓冲区的数据写入输出流中。")])),_:1})]),a("li",null,[l[1055]||(l[1055]=a("code",null,'<font style="color:rgb(44, 62, 80);">close()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1054]||(l[1054]=[s("：关闭输出流。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1056]||(l[1056]=[s("在使用转换流时，需要指定正确的字符集编码方式，否则可能会导致数据读取或写入出现乱码。")])),_:1}),a("h2",dn,[a("a",on,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1057]||(l[1057]=[s("序列流（序列化和反序列化）")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1058]||(l[1058]=[s("Java 的序列流（ObjectInputStream 和 ObjectOutputStream）是一种可以将 Java 对象序列化和反序列化的流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1059]||(l[1059]=[s("序列化是指将一个对象转换为一个字节序列（包含")])),_:1}),l[1968]||(l[1968]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1060]||(l[1060]=[s("对象的数据")])),_:1}),l[1969]||(l[1969]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1061]||(l[1061]=[s("、")])),_:1}),l[1970]||(l[1970]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1062]||(l[1062]=[s("对象的类型")])),_:1}),l[1971]||(l[1971]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1063]||(l[1063]=[s("和")])),_:1}),l[1972]||(l[1972]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1064]||(l[1064]=[s("对象中存储的属性")])),_:1}),l[1973]||(l[1973]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1065]||(l[1065]=[s("等信息），以便在网络上传输或保存到文件中，或者在程序之间传递。在 Java 中，序列化通过实现 java.io.Serializable 接口来实现，只有实现了")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1974]||(l[1974]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1066]||(l[1066]=[s("Serializable 接口")])),_:1}),l[1975]||(l[1975]=s("](https://javabetter.cn/io/Serializbale.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1067]||(l[1067]=[s("的对象才能被序列化。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1068]||(l[1068]=[s("反序列化是指将一个字节序列转换为一个对象，以便在程序中使用。")])),_:1}),l[1976]||(l[1976]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438286421-0996a490-91e3-42b0-be5f-a64eb06bf80f.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1069]||(l[1069]=[s("二哥的 Java 进阶之路：序列流")])),_:1}),a("h3",un,[a("a",pn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1070]||(l[1070]=[s("ObjectOutputStream")])),_:1})])])]),a("p",null,[l[1072]||(l[1072]=a("code",null,'<font style="color:rgb(44, 62, 80);">java.io.ObjectOutputStream</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1071]||(l[1071]=[s("继承自 OutputStream 类，因此可以将序列化后的字节序列写入到文件、网络等输出流中。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1073]||(l[1073]=[s("来看 ObjectOutputStream 的构造方法：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1977]||(l[1977]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1074]||(l[1074]=[s("ObjectOutputStream(OutputStream out)")])),_:1}),l[1978]||(l[1978]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1075]||(l[1075]=[s("该构造方法接收一个 OutputStream 对象作为参数，用于将序列化后的字节序列输出到指定的输出流中。例如：")])),_:1}),l[1979]||(l[1979]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">FileOutputStream fos = new FileOutputStream(&quot;file.txt&quot;);</span>
<span class="line">ObjectOutputStream oos = new ObjectOutputStream(fos);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1076]||(l[1076]=[s("一个对象要想序列化，必须满足两个条件:")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1077]||(l[1077]=[s("该类必须实现")])),_:1}),l[1082]||(l[1082]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1078]||(l[1078]=[s("java.io.Serializable接口")])),_:1}),l[1083]||(l[1083]=s("](https://javabetter.cn/io/Serializbale.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1079]||(l[1079]=[s("，否则会抛出")])),_:1}),l[1084]||(l[1084]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1080]||(l[1080]=[s("NotSerializableException")])),_:1}),l[1085]||(l[1085]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1081]||(l[1081]=[s("。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1086]||(l[1086]=[s("该类的所有字段都必须是可序列化的。如果一个字段不需要序列化，则需要使用")])),_:1}),l[1089]||(l[1089]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1087]||(l[1087]=[s("transient关键字")])),_:1}),l[1090]||(l[1090]=s("](https://javabetter.cn/io/transient.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1088]||(l[1088]=[s("进行修饰。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1091]||(l[1091]=[s("使用示例如下：")])),_:1}),l[1980]||(l[1980]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class Employee implements Serializable {</span>
<span class="line">    public String name;</span>
<span class="line">    public String address;</span>
<span class="line">    public transient int age; // transient瞬态修饰成员,不会被序列化</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1092]||(l[1092]=[s("接下来，来聊聊")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1981]||(l[1981]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1093]||(l[1093]=[s("writeObject (Object obj)")])),_:1}),l[1982]||(l[1982]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1094]||(l[1094]=[s("方法，该方法是 ObjectOutputStream 类中用于将对象序列化成字节序列并输出到输出流中的方法，可以处理对象之间的引用关系、继承关系、静态字段和 transient 字段。")])),_:1}),l[1983]||(l[1983]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class ObjectOutputStreamDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        Person person = new Person(&quot;沉默王二&quot;, 20);</span>
<span class="line">        try {</span>
<span class="line">            FileOutputStream fos = new FileOutputStream(&quot;logs/person.dat&quot;);</span>
<span class="line">            ObjectOutputStream oos = new ObjectOutputStream(fos);</span>
<span class="line">            oos.writeObject(person);</span>
<span class="line">            oos.close();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">class Person implements Serializable {</span>
<span class="line">    private String name;</span>
<span class="line">    private int age;</span>
<span class="line"></span>
<span class="line">    public Person(String name, int age) {</span>
<span class="line">        this.name = name;</span>
<span class="line">        this.age = age;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public String getName() {</span>
<span class="line">        return name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public int getAge() {</span>
<span class="line">        return age;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1095]||(l[1095]=[s("上面的代码中，首先创建了一个 Person 对象，然后使用 FileOutputStream 和 ObjectOutputStream 将 Person 对象序列化并输出到 person.dat 文件中。在 Person 类中，实现了 Serializable 接口，表示该类可以进行对象序列化。")])),_:1}),a("h3",bn,[a("a",vn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1096]||(l[1096]=[s("ObjectInputStream")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1097]||(l[1097]=[s("ObjectInputStream 可以读取 ObjectOutputStream 写入的字节流，并将其反序列化为相应的对象（包含")])),_:1}),l[1984]||(l[1984]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1098]||(l[1098]=[s("对象的数据")])),_:1}),l[1985]||(l[1985]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1099]||(l[1099]=[s("、")])),_:1}),l[1986]||(l[1986]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1100]||(l[1100]=[s("对象的类型")])),_:1}),l[1987]||(l[1987]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1101]||(l[1101]=[s("和")])),_:1}),l[1988]||(l[1988]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1102]||(l[1102]=[s("对象中存储的属性")])),_:1}),l[1989]||(l[1989]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1103]||(l[1103]=[s("等信息）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1104]||(l[1104]=[s("说简单点就是，序列化之前是什么样子，反序列化后就是什么样子。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1105]||(l[1105]=[s("来看一下构造方法：")])),_:1}),l[1990]||(l[1990]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1106]||(l[1106]=[s("ObjectInputStream(InputStream in)")])),_:1}),l[1991]||(l[1991]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1107]||(l[1107]=[s("： 创建一个指定 InputStream 的 ObjectInputStream。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1108]||(l[1108]=[s("其中，ObjectInputStream 的 readObject 方法用来读取指定文件中的对象，示例如下：")])),_:1}),l[1992]||(l[1992]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String filename = &quot;logs/person.dat&quot;; // 待反序列化的文件名</span>
<span class="line">try (FileInputStream fileIn = new FileInputStream(filename);</span>
<span class="line">     ObjectInputStream in = new ObjectInputStream(fileIn)) {</span>
<span class="line">     // 从指定的文件输入流中读取对象并反序列化</span>
<span class="line">     Object obj = in.readObject();</span>
<span class="line">     // 将反序列化后的对象强制转换为指定类型</span>
<span class="line">     Person p = (Person) obj;</span>
<span class="line">     // 打印反序列化后的对象信息</span>
<span class="line">     System.out.println(&quot;Deserialized Object: &quot; + p);</span>
<span class="line">} catch (IOException | ClassNotFoundException e) {</span>
<span class="line">     e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1109]||(l[1109]=[s("我们首先指定了待反序列化的文件名（前面通过 ObjectOutputStream 序列化后的文件），然后创建了一个 FileInputStream 对象和一个 ObjectInputStream 对象。接着我们调用 ObjectInputStream 的 readObject 方法来读取指定文件中的对象，并将其强制转换为 Person 类型。最后我们打印了反序列化后的对象信息。")])),_:1}),a("h3",mn,[a("a",gn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1110]||(l[1110]=[s("Kryo")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1111]||(l[1111]=[s("实际开发中，很少使用 JDK 自带的序列化和反序列化，这是因为：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1112]||(l[1112]=[s("可移植性差：Java 特有的，无法跨语言进行序列化和反序列化。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1113]||(l[1113]=[s("性能差：序列化后的字节体积大，增加了传输/保存成本。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1114]||(l[1114]=[s("安全问题：攻击者可以通过构造恶意数据来实现远程代码执行，从而对系统造成严重的安全威胁。相关阅读：")])),_:1}),l[1117]||(l[1117]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1115]||(l[1115]=[s("Java 反序列化漏洞之殇")])),_:1}),l[1118]||(l[1118]=s("](https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1116]||(l[1116]=[s("。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1119]||(l[1119]=[s("Kryo 是一个优秀的 Java 序列化和反序列化库，具有高性能、高效率和易于使用和扩展等特点，有效地解决了 JDK 自带的序列化机制的痛点。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[1120]||(l[1120]=[s("GitHub 地址：")])),_:1}),l[1993]||(l[1993]=s("[")),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[1121]||(l[1121]=[s("https://github.com/EsotericSoftware/kryo")])),_:1}),l[1994]||(l[1994]=s("](https://github.com/EsotericSoftware/kryo)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1122]||(l[1122]=[s("使用示例：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1123]||(l[1123]=[s("第一步，在 pom.xml 中引入依赖。")])),_:1}),l[1995]||(l[1995]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">&lt;!-- 引入 Kryo 序列化工具 --&gt;</span>
<span class="line">&lt;dependency&gt;</span>
<span class="line">     &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;</span>
<span class="line">     &lt;artifactId&gt;kryo&lt;/artifactId&gt;</span>
<span class="line">     &lt;version&gt;5.4.0&lt;/version&gt;</span>
<span class="line">&lt;/dependency&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1124]||(l[1124]=[s("第二步，创建一个 Kryo 对象，并使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1996]||(l[1996]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1125]||(l[1125]=[s("register()")])),_:1}),l[1997]||(l[1997]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1126]||(l[1126]=[s("方法将对象进行注册。然后，使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1998]||(l[1998]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1127]||(l[1127]=[s("writeObject()")])),_:1}),l[1999]||(l[1999]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1128]||(l[1128]=[s("方法将 Java 对象序列化为二进制流，再使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2e3]||(l[2e3]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1129]||(l[1129]=[s("readObject()")])),_:1}),l[2001]||(l[2001]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1130]||(l[1130]=[s("方法将二进制流反序列化为 Java 对象。最后，输出反序列化后的 Java 对象。")])),_:1}),l[2002]||(l[2002]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class KryoDemo {</span>
<span class="line">    public static void main(String[] args) throws FileNotFoundException {</span>
<span class="line">        Kryo kryo = new Kryo();</span>
<span class="line">        kryo.register(KryoParam.class);</span>
<span class="line"></span>
<span class="line">        KryoParam object = new KryoParam(&quot;沉默王二&quot;, 123);</span>
<span class="line"></span>
<span class="line">        Output output = new Output(new FileOutputStream(&quot;logs/kryo.bin&quot;));</span>
<span class="line">        kryo.writeObject(output, object);</span>
<span class="line">        output.close();</span>
<span class="line"></span>
<span class="line">        Input input = new Input(new FileInputStream(&quot;logs/kryo.bin&quot;));</span>
<span class="line">        KryoParam object2 = kryo.readObject(input, KryoParam.class);</span>
<span class="line">        System.out.println(object2);</span>
<span class="line">        input.close();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">class KryoParam {</span>
<span class="line">    private String name;</span>
<span class="line">    private int age;</span>
<span class="line"></span>
<span class="line">    public KryoParam() {</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public KryoParam(String name, int age) {</span>
<span class="line">        this.name = name;</span>
<span class="line">        this.age = age;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public String getName() {</span>
<span class="line">        return name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public void setName(String name) {</span>
<span class="line">        this.name = name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public int getAge() {</span>
<span class="line">        return age;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public void setAge(int age) {</span>
<span class="line">        this.age = age;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    @Override</span>
<span class="line">    public String toString() {</span>
<span class="line">        return &quot;KryoParam{&quot; +</span>
<span class="line">                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +</span>
<span class="line">                &quot;, age=&quot; + age +</span>
<span class="line">                &#39;}&#39;;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h2",fn,[a("a",yn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1131]||(l[1131]=[s("序列接口 Serializable")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1132]||(l[1132]=[s("对于 Java 的序列化，我之前一直停留在最浅层次的认知上——把那个要")])),_:1}),l[2003]||(l[2003]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1133]||(l[1133]=[s("序列化")])),_:1}),l[2004]||(l[2004]=s("](https://javabetter.cn/io/serialize.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1134]||(l[1134]=[s("的类实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2005]||(l[2005]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1135]||(l[1135]=[s("Serializbale")])),_:1}),l[2006]||(l[2006]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1136]||(l[1136]=[s("接口就可以了嘛。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1137]||(l[1137]=[s("我似乎不愿意做更深入的研究，因为会用就行了嘛。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1138]||(l[1138]=[s("但随着时间的推移，见到")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2007]||(l[2007]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1139]||(l[1139]=[s("Serializbale")])),_:1}),l[2008]||(l[2008]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1140]||(l[1140]=[s("的次数越来越多，我便对它产生了浓厚的兴趣。是时候花点时间研究研究了。")])),_:1}),a("h3",Sn,[a("a",wn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1141]||(l[1141]=[s("先来点理论")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1142]||(l[1142]=[s("Java 序列化是 JDK 1.1 时引入的一组开创性的特性，用于将 Java 对象转换为字节数组，便于存储或传输。此后，仍然可以将字节数组转换回 Java 对象原有的状态。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1143]||(l[1143]=[s("序列化的思想是“冻结”对象状态，然后写到磁盘或者在网络中传输；")])),_:1}),l[2009]||(l[2009]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1144]||(l[1144]=[s("反序列化")])),_:1}),l[2010]||(l[2010]=s("](https://javabetter.cn/io/serialize.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1145]||(l[1145]=[s("的思想是“解冻”对象状态，重新获得可用的 Java 对象。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1146]||(l[1146]=[s("序列化有一条规则，就是要序列化的对象必须实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2011]||(l[2011]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1147]||(l[1147]=[s("Serializbale")])),_:1}),l[2012]||(l[2012]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1148]||(l[1148]=[s("接口，否则就会报 NotSerializableException 异常。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1149]||(l[1149]=[s("好，来看看")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2013]||(l[2013]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1150]||(l[1150]=[s("Serializbale")])),_:1}),l[2014]||(l[2014]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1151]||(l[1151]=[s("接口的定义吧：")])),_:1}),l[2015]||(l[2015]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public interface Serializable {</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1152]||(l[1152]=[s("没别的了！")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1153]||(l[1153]=[s("明明就一个空的接口嘛，竟然能够保证实现了它的“类对象”被序列化和反序列化？")])),_:1}),a("h3",Fn,[a("a",qn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1154]||(l[1154]=[s("再来点实战")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1155]||(l[1155]=[s("在回答上述问题之前，我们先来创建一个类（只有两个字段，和对应的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2016]||(l[2016]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1156]||(l[1156]=[s("getter/setter")])),_:1}),l[2017]||(l[2017]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1157]||(l[1157]=[s("），用于序列化和反序列化。")])),_:1}),l[2018]||(l[2018]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger {</span>
<span class="line">    private String name;</span>
<span class="line">    private int age;</span>
<span class="line"></span>
<span class="line">    public String getName() {</span>
<span class="line">        return name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public void setName(String name) {</span>
<span class="line">        this.name = name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public int getAge() {</span>
<span class="line">        return age;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public void setAge(int age) {</span>
<span class="line">        this.age = age;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1158]||(l[1158]=[s("再来创建一个测试类，通过")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2019]||(l[2019]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1159]||(l[1159]=[s("ObjectOutputStream")])),_:1}),l[2020]||(l[2020]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1160]||(l[1160]=[s("将“18 岁的王二”写入到文件当中，实际上就是一种序列化的过程；再通过")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2021]||(l[2021]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1161]||(l[1161]=[s("ObjectInputStream")])),_:1}),l[2022]||(l[2022]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1162]||(l[1162]=[s("将“18 岁的王二”从文件中读出来，实际上就是一种反序列化的过程。（前面我们学习")])),_:1}),l[2023]||(l[2023]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1163]||(l[1163]=[s("序列流")])),_:1}),l[2024]||(l[2024]=s("](https://javabetter.cn/io/serialize.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1164]||(l[1164]=[s("的时候也讲过）")])),_:1}),l[2025]||(l[2025]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 初始化</span>
<span class="line">Wanger wanger = new Wanger();</span>
<span class="line">wanger.setName(&quot;王二&quot;);</span>
<span class="line">wanger.setAge(18);</span>
<span class="line">System.out.println(wanger);</span>
<span class="line"></span>
<span class="line">// 把对象写到文件中</span>
<span class="line">try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;chenmo&quot;));){</span>
<span class="line">    oos.writeObject(wanger);</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 从文件中读出对象</span>
<span class="line">try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;chenmo&quot;)));){</span>
<span class="line">    Wanger wanger1 = (Wanger) ois.readObject();</span>
<span class="line">    System.out.println(wanger1);</span>
<span class="line">} catch (IOException | ClassNotFoundException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1165]||(l[1165]=[s("不过，由于")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2026]||(l[2026]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1166]||(l[1166]=[s("Wanger")])),_:1}),l[2027]||(l[2027]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1167]||(l[1167]=[s("没有实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2028]||(l[2028]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1168]||(l[1168]=[s("Serializbale")])),_:1}),l[2029]||(l[2029]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1169]||(l[1169]=[s("接口，所以在运行测试类的时候会抛出异常，堆栈信息如下：")])),_:1}),l[2030]||(l[2030]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">java.io.NotSerializableException: com.cmower.java_demo.xuliehua.Wanger</span>
<span class="line">	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184)</span>
<span class="line">	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)</span>
<span class="line">	at com.cmower.java_demo.xuliehua.Test.main(Test.java:21)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1170]||(l[1170]=[s("顺着堆栈信息，我们来看一下")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2031]||(l[2031]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1171]||(l[1171]=[s("ObjectOutputStream")])),_:1}),l[2032]||(l[2032]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1172]||(l[1172]=[s("的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2033]||(l[2033]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1173]||(l[1173]=[s("writeObject0()")])),_:1}),l[2034]||(l[2034]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1174]||(l[1174]=[s("方法。其部分源码如下：")])),_:1}),l[2035]||(l[2035]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 判断对象是否为字符串类型，如果是，则调用 writeString 方法进行序列化</span>
<span class="line">if (obj instanceof String) {</span>
<span class="line">    writeString((String) obj, unshared);</span>
<span class="line">}</span>
<span class="line">// 判断对象是否为数组类型，如果是，则调用 writeArray 方法进行序列化</span>
<span class="line">else if (cl.isArray()) {</span>
<span class="line">    writeArray(obj, desc, unshared);</span>
<span class="line">}</span>
<span class="line">// 判断对象是否为枚举类型，如果是，则调用 writeEnum 方法进行序列化</span>
<span class="line">else if (obj instanceof Enum) {</span>
<span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span>
<span class="line">}</span>
<span class="line">// 判断对象是否为可序列化类型，如果是，则调用 writeOrdinaryObject 方法进行序列化</span>
<span class="line">else if (obj instanceof Serializable) {</span>
<span class="line">    writeOrdinaryObject(obj, desc, unshared);</span>
<span class="line">}</span>
<span class="line">// 如果对象不能被序列化，则抛出 NotSerializableException 异常</span>
<span class="line">else {</span>
<span class="line">if (extendedDebugInfo) {</span>
<span class="line">    throw new NotSerializableException(</span>
<span class="line">        cl.getName() + &quot;\\n&quot; + debugInfoStack.toString());</span>
<span class="line">} else {</span>
<span class="line">    throw new NotSerializableException(cl.getName());</span>
<span class="line">}</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1175]||(l[1175]=[s("也就是说，")])),_:1}),l[2036]||(l[2036]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1176]||(l[1176]=[s("ObjectOutputStream")])),_:1}),l[2037]||(l[2037]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1177]||(l[1177]=[s("在序列化的时候，会判断被序列化的对象是哪一种类型，字符串？数组？枚举？还是")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2038]||(l[2038]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1178]||(l[1178]=[s("Serializable")])),_:1}),l[2039]||(l[2039]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1179]||(l[1179]=[s("，如果全都不是的话，抛出")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2040]||(l[2040]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1180]||(l[1180]=[s("NotSerializableException")])),_:1}),l[2041]||(l[2041]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1181]||(l[1181]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1182]||(l[1182]=[s("假如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2042]||(l[2042]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1183]||(l[1183]=[s("Wanger")])),_:1}),l[2043]||(l[2043]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1184]||(l[1184]=[s("实现了")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2044]||(l[2044]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1185]||(l[1185]=[s("Serializable")])),_:1}),l[2045]||(l[2045]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1186]||(l[1186]=[s("接口，就可以序列化和反序列化了。")])),_:1}),l[2046]||(l[2046]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger implements Serializable{</span>
<span class="line">    private static final long serialVersionUID = -2095916884810199532L;</span>
<span class="line">    </span>
<span class="line">    private String name;</span>
<span class="line">    private int age;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1187]||(l[1187]=[s("具体怎么序列化呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1188]||(l[1188]=[s("以")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2047]||(l[2047]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1189]||(l[1189]=[s("ObjectOutputStream")])),_:1}),l[2048]||(l[2048]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1190]||(l[1190]=[s("为例吧，它在序列化的时候会依次调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2049]||(l[2049]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1191]||(l[1191]=[s("writeObject()")])),_:1}),l[2050]||(l[2050]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1192]||(l[1192]=[s("→")])),_:1}),l[2051]||(l[2051]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1193]||(l[1193]=[s("writeObject0()")])),_:1}),l[2052]||(l[2052]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1194]||(l[1194]=[s("→")])),_:1}),l[2053]||(l[2053]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1195]||(l[1195]=[s("writeOrdinaryObject()")])),_:1}),l[2054]||(l[2054]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1196]||(l[1196]=[s("→")])),_:1}),l[2055]||(l[2055]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1197]||(l[1197]=[s("writeSerialData()")])),_:1}),l[2056]||(l[2056]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1198]||(l[1198]=[s("→")])),_:1}),l[2057]||(l[2057]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1199]||(l[1199]=[s("invokeWriteObject()")])),_:1}),l[2058]||(l[2058]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1200]||(l[1200]=[s("→")])),_:1}),l[2059]||(l[2059]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1201]||(l[1201]=[s("defaultWriteFields()")])),_:1}),l[2060]||(l[2060]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1202]||(l[1202]=[s("。")])),_:1}),l[2061]||(l[2061]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private void defaultWriteFields(Object obj, ObjectStreamClass desc) throws IOException {</span>
<span class="line">    // 获取对象的类，并检查是否可以进行默认的序列化</span>
<span class="line">    Class&lt;?&gt; cl = desc.forClass();</span>
<span class="line">    desc.checkDefaultSerialize();</span>
<span class="line"></span>
<span class="line">    // 获取对象的基本类型字段的数量，以及这些字段的值</span>
<span class="line">    int primDataSize = desc.getPrimDataSize();</span>
<span class="line">    desc.getPrimFieldValues(obj, primVals);</span>
<span class="line">    // 将基本类型字段的值写入输出流</span>
<span class="line">    bout.write(primVals, 0, primDataSize, false);</span>
<span class="line"></span>
<span class="line">    // 获取对象的非基本类型字段的值</span>
<span class="line">    ObjectStreamField[] fields = desc.getFields(false);</span>
<span class="line">    Object[] objVals = new Object[desc.getNumObjFields()];</span>
<span class="line">    int numPrimFields = fields.length - objVals.length;</span>
<span class="line">    desc.getObjFieldValues(obj, objVals);</span>
<span class="line">    // 循环写入对象的非基本类型字段的值</span>
<span class="line">    for (int i = 0; i &lt; objVals.length; i++) {</span>
<span class="line">        // 调用 writeObject0 方法将对象的非基本类型字段序列化写入输出流</span>
<span class="line">        try {</span>
<span class="line">            writeObject0(objVals[i], fields[numPrimFields + i].isUnshared());</span>
<span class="line">        }</span>
<span class="line">        // 如果在写入过程中出现异常，则将异常包装成 IOException 抛出</span>
<span class="line">        catch (IOException ex) {</span>
<span class="line">            if (abortIOException == null) {</span>
<span class="line">                abortIOException = ex;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1203]||(l[1203]=[s("那怎么反序列化呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1204]||(l[1204]=[s("以")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2062]||(l[2062]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1205]||(l[1205]=[s("ObjectInputStream")])),_:1}),l[2063]||(l[2063]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1206]||(l[1206]=[s("为例，它在反序列化的时候会依次调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2064]||(l[2064]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1207]||(l[1207]=[s("readObject()")])),_:1}),l[2065]||(l[2065]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1208]||(l[1208]=[s("→")])),_:1}),l[2066]||(l[2066]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1209]||(l[1209]=[s("readObject0()")])),_:1}),l[2067]||(l[2067]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1210]||(l[1210]=[s("→")])),_:1}),l[2068]||(l[2068]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1211]||(l[1211]=[s("readOrdinaryObject()")])),_:1}),l[2069]||(l[2069]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1212]||(l[1212]=[s("→")])),_:1}),l[2070]||(l[2070]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1213]||(l[1213]=[s("readSerialData()")])),_:1}),l[2071]||(l[2071]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1214]||(l[1214]=[s("→")])),_:1}),l[2072]||(l[2072]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1215]||(l[1215]=[s("defaultReadFields()")])),_:1}),l[2073]||(l[2073]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1216]||(l[1216]=[s("。")])),_:1}),l[2074]||(l[2074]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private void defaultReadFields(Object obj, ObjectStreamClass desc) throws IOException {</span>
<span class="line">    // 获取对象的类，并检查对象是否属于该类</span>
<span class="line">    Class&lt;?&gt; cl = desc.forClass();</span>
<span class="line">    if (cl != null &amp;&amp; obj != null &amp;&amp; !cl.isInstance(obj)) {</span>
<span class="line">        throw new ClassCastException();</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // 获取对象的基本类型字段的数量和值</span>
<span class="line">    int primDataSize = desc.getPrimDataSize();</span>
<span class="line">    if (primVals == null || primVals.length &lt; primDataSize) {</span>
<span class="line">        primVals = new byte[primDataSize];</span>
<span class="line">    }</span>
<span class="line">    // 从输入流中读取基本类型字段的值，并存储在 primVals 数组中</span>
<span class="line">    bin.readFully(primVals, 0, primDataSize, false);</span>
<span class="line">    if (obj != null) {</span>
<span class="line">        // 将 primVals 数组中的基本类型字段的值设置到对象的相应字段中</span>
<span class="line">        desc.setPrimFieldValues(obj, primVals);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // 获取对象的非基本类型字段的数量和值</span>
<span class="line">    int objHandle = passHandle;</span>
<span class="line">    ObjectStreamField[] fields = desc.getFields(false);</span>
<span class="line">    Object[] objVals = new Object[desc.getNumObjFields()];</span>
<span class="line">    int numPrimFields = fields.length - objVals.length;</span>
<span class="line">    // 循环读取对象的非基本类型字段的值</span>
<span class="line">    for (int i = 0; i &lt; objVals.length; i++) {</span>
<span class="line">        // 调用 readObject0 方法读取对象的非基本类型字段的值</span>
<span class="line">        ObjectStreamField f = fields[numPrimFields + i];</span>
<span class="line">        objVals[i] = readObject0(Object.class, f.isUnshared());</span>
<span class="line">        // 如果该字段是一个引用字段，则将其标记为依赖该对象</span>
<span class="line">        if (f.getField() != null) {</span>
<span class="line">            handles.markDependency(objHandle, passHandle);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    if (obj != null) {</span>
<span class="line">        // 将 objVals 数组中的非基本类型字段的值设置到对象的相应字段中</span>
<span class="line">        desc.setObjFieldValues(obj, objVals);</span>
<span class="line">    }</span>
<span class="line">    passHandle = objHandle;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1217]||(l[1217]=[s("我想看到这，你应该会恍然大悟的“哦”一声了。")])),_:1}),l[2075]||(l[2075]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1218]||(l[1218]=[s("Serializable")])),_:1}),l[2076]||(l[2076]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1219]||(l[1219]=[s("接口之所以定义为空，是因为它只起到了一个标识的作用，告诉程序实现了它的对象是可以被序列化的，但真正序列化和反序列化的操作并不需要它来完成。")])),_:1}),a("h3",xn,[a("a",On,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1220]||(l[1220]=[s("再来点注意事项")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1221]||(l[1221]=[s("开门见山的说吧，")])),_:1}),l[2077]||(l[2077]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1222]||(l[1222]=[s("static")])),_:1}),l[2078]||(l[2078]=s("](https://javabetter.cn/oo/static.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1223]||(l[1223]=[s("和")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2079]||(l[2079]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1224]||(l[1224]=[s("transient")])),_:1}),l[2080]||(l[2080]=s("](https://javabetter.cn/io/transient.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1225]||(l[1225]=[s("修饰的字段是不会被序列化的。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1226]||(l[1226]=[s("为什么呢？我们先来证明，再来解释原因。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1227]||(l[1227]=[s("首先，在")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2081]||(l[2081]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1228]||(l[1228]=[s("Wanger")])),_:1}),l[2082]||(l[2082]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1229]||(l[1229]=[s("类中增加两个字段。")])),_:1}),l[2083]||(l[2083]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger implements Serializable {</span>
<span class="line">    private static final long serialVersionUID = -2095916884810199532L;</span>
<span class="line"></span>
<span class="line">    private String name;</span>
<span class="line">    private int age;</span>
<span class="line"></span>
<span class="line">    public static String pre = &quot;沉默&quot;;</span>
<span class="line">    transient String meizi = &quot;王三&quot;;</span>
<span class="line"></span>
<span class="line">    @Override</span>
<span class="line">    public String toString() {</span>
<span class="line">        return &quot;Wanger{&quot; + &quot;name=&quot; + name + &quot;,age=&quot; + age + &quot;,pre=&quot; + pre + &quot;,meizi=&quot; + meizi + &quot;}&quot;;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1230]||(l[1230]=[s("其次，在测试类中打印序列化前和反序列化后的对象，并在序列化后和反序列化前改变")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2084]||(l[2084]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1231]||(l[1231]=[s("static")])),_:1}),l[2085]||(l[2085]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1232]||(l[1232]=[s("字段的值。具体代码如下：")])),_:1}),l[2086]||(l[2086]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 初始化</span>
<span class="line">Wanger wanger = new Wanger();</span>
<span class="line">wanger.setName(&quot;王二&quot;);</span>
<span class="line">wanger.setAge(18);</span>
<span class="line">System.out.println(wanger);</span>
<span class="line"></span>
<span class="line">// 把对象写到文件中</span>
<span class="line">try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;chenmo&quot;));){</span>
<span class="line">        oos.writeObject(wanger);</span>
<span class="line">    } catch (IOException e) {</span>
<span class="line">        e.printStackTrace();</span>
<span class="line">    }</span>
<span class="line">   </span>
<span class="line">    // 改变 static 字段的值</span>
<span class="line">Wanger.pre =&quot;不沉默&quot;;</span>
<span class="line"></span>
<span class="line">// 从文件中读出对象</span>
<span class="line">try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;chenmo&quot;)));){</span>
<span class="line">    Wanger wanger1 = (Wanger) ois.readObject();</span>
<span class="line">    System.out.println(wanger1);</span>
<span class="line">} catch (IOException | ClassNotFoundException e) {</span>
<span class="line">    e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1233]||(l[1233]=[s("输出结果：")])),_:1}),l[2087]||(l[2087]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Wanger{name=王二,age=18,pre=沉默,meizi=王三}</span>
<span class="line">Wanger{name=王二,age=18,pre=不沉默,meizi=null}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1234]||(l[1234]=[s("从结果的对比当中，我们可以发现：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1235]||(l[1235]=[s("1）序列化前，")])),_:1}),l[2088]||(l[2088]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1236]||(l[1236]=[s("pre")])),_:1}),l[2089]||(l[2089]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1237]||(l[1237]=[s("的值为“沉默”，序列化后，")])),_:1}),l[2090]||(l[2090]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1238]||(l[1238]=[s("pre")])),_:1}),l[2091]||(l[2091]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1239]||(l[1239]=[s("的值修改为“不沉默”，反序列化后，")])),_:1}),l[2092]||(l[2092]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1240]||(l[1240]=[s("pre")])),_:1}),l[2093]||(l[2093]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1241]||(l[1241]=[s("的值为“不沉默”，而不是序列化前的状态“沉默”。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1242]||(l[1242]=[s("为什么呢？因为序列化保存的是对象的状态，而")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2094]||(l[2094]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1243]||(l[1243]=[s("static")])),_:1}),l[2095]||(l[2095]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1244]||(l[1244]=[s("修饰的字段属于类的状态，因此可以证明序列化并不保存")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2096]||(l[2096]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1245]||(l[1245]=[s("static")])),_:1}),l[2097]||(l[2097]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1246]||(l[1246]=[s("修饰的字段。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1247]||(l[1247]=[s("2）序列化前，")])),_:1}),l[2098]||(l[2098]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1248]||(l[1248]=[s("meizi")])),_:1}),l[2099]||(l[2099]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1249]||(l[1249]=[s("的值为“王三”，反序列化后，")])),_:1}),l[2100]||(l[2100]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1250]||(l[1250]=[s("meizi")])),_:1}),l[2101]||(l[2101]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1251]||(l[1251]=[s("的值为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2102]||(l[2102]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1252]||(l[1252]=[s("null")])),_:1}),l[2103]||(l[2103]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1253]||(l[1253]=[s("，而不是序列化前的状态“王三”。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1254]||(l[1254]=[s("为什么呢？")])),_:1}),l[2104]||(l[2104]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1255]||(l[1255]=[s("transient")])),_:1}),l[2105]||(l[2105]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1256]||(l[1256]=[s("的中文字义为“临时的”（论英语的重要性），它可以阻止字段被序列化到文件中，在被反序列化后，")])),_:1}),l[2106]||(l[2106]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1257]||(l[1257]=[s("transient")])),_:1}),l[2107]||(l[2107]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1258]||(l[1258]=[s("字段的值被设为初始值，比如")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2108]||(l[2108]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1259]||(l[1259]=[s("int")])),_:1}),l[2109]||(l[2109]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1260]||(l[1260]=[s("型的初始值为 0，对象型的初始值为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2110]||(l[2110]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1261]||(l[1261]=[s("null")])),_:1}),l[2111]||(l[2111]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1262]||(l[1262]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1263]||(l[1263]=[s("如果想要深究源码的话，你可以在")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2112]||(l[2112]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1264]||(l[1264]=[s("ObjectStreamClass")])),_:1}),l[2113]||(l[2113]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1265]||(l[1265]=[s("中发现下面这样的代码：")])),_:1}),l[2114]||(l[2114]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private static ObjectStreamField[] getDefaultSerialFields(Class&lt;?&gt; cl) {</span>
<span class="line">    // 获取该类中声明的所有字段</span>
<span class="line">    Field[] clFields = cl.getDeclaredFields();</span>
<span class="line">    ArrayList&lt;ObjectStreamField&gt; list = new ArrayList&lt;&gt;();</span>
<span class="line">    int mask = Modifier.STATIC | Modifier.TRANSIENT;</span>
<span class="line"></span>
<span class="line">    // 遍历所有字段，将非 static 和 transient 的字段添加到 list 中</span>
<span class="line">    for (int i = 0; i &lt; clFields.length; i++) {</span>
<span class="line">        Field field = clFields[i];</span>
<span class="line">        int mods = field.getModifiers();</span>
<span class="line">        if ((mods &amp; mask) == 0) {</span>
<span class="line">            // 根据字段名、字段类型和字段是否可序列化创建一个 ObjectStreamField 对象</span>
<span class="line">            ObjectStreamField osf = new ObjectStreamField(field.getName(), field.getType(), !Serializable.class.isAssignableFrom(cl));</span>
<span class="line">            list.add(osf);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    int size = list.size();</span>
<span class="line">    // 如果 list 为空，则返回一个空的 ObjectStreamField 数组，否则将 list 转换为 ObjectStreamField 数组并返回</span>
<span class="line">    return (size == 0) ? NO_FIELDS :</span>
<span class="line">        list.toArray(new ObjectStreamField[size]);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1266]||(l[1266]=[s("看到")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2115]||(l[2115]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1267]||(l[1267]=[s("Modifier.STATIC | Modifier.TRANSIENT")])),_:1}),l[2116]||(l[2116]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1268]||(l[1268]=[s("了吧，这两个修饰符标记的字段就没有被放入到序列化的字段中，明白了吧？")])),_:1}),a("h3",jn,[a("a",In,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1269]||(l[1269]=[s("再来点干货")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1270]||(l[1270]=[s("除了")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2117]||(l[2117]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1271]||(l[1271]=[s("Serializable")])),_:1}),l[2118]||(l[2118]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1272]||(l[1272]=[s("之外，Java 还提供了一个序列化接口")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2119]||(l[2119]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1273]||(l[1273]=[s("Externalizable")])),_:1}),l[2120]||(l[2120]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1274]||(l[1274]=[s("（念起来有点拗口）。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1275]||(l[1275]=[s("两个接口有什么不一样的吗？试一试就知道了。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1276]||(l[1276]=[s("首先，把")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2121]||(l[2121]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1277]||(l[1277]=[s("Wanger")])),_:1}),l[2122]||(l[2122]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1278]||(l[1278]=[s("类实现的接口")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2123]||(l[2123]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1279]||(l[1279]=[s("Serializable")])),_:1}),l[2124]||(l[2124]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1280]||(l[1280]=[s("替换为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2125]||(l[2125]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1281]||(l[1281]=[s("Externalizable")])),_:1}),l[2126]||(l[2126]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1282]||(l[1282]=[s("。")])),_:1}),l[2127]||(l[2127]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger implements Externalizable {</span>
<span class="line">	private String name;</span>
<span class="line">	private int age;</span>
<span class="line"></span>
<span class="line">	public Wanger() {</span>
<span class="line"></span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	public String getName() {</span>
<span class="line">		return name;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	</span>
<span class="line">	@Override</span>
<span class="line">	public String toString() {</span>
<span class="line">		return &quot;Wanger{&quot; + &quot;name=&quot; + name + &quot;,age=&quot; + age + &quot;}&quot;;</span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	@Override</span>
<span class="line">	public void writeExternal(ObjectOutput out) throws IOException {</span>
<span class="line"></span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">	@Override</span>
<span class="line">	public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {</span>
<span class="line"></span>
<span class="line">	}</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1283]||(l[1283]=[s("实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2128]||(l[2128]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1284]||(l[1284]=[s("Externalizable")])),_:1}),l[2129]||(l[2129]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1285]||(l[1285]=[s("接口的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2130]||(l[2130]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1286]||(l[1286]=[s("Wanger")])),_:1}),l[2131]||(l[2131]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1287]||(l[1287]=[s("类和实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2132]||(l[2132]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1288]||(l[1288]=[s("Serializable")])),_:1}),l[2133]||(l[2133]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1289]||(l[1289]=[s("接口的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2134]||(l[2134]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1290]||(l[1290]=[s("Wanger")])),_:1}),l[2135]||(l[2135]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1291]||(l[1291]=[s("类有一些不同：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1292]||(l[1292]=[s("1）新增了一个无参的构造方法。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1293]||(l[1293]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2136]||(l[2136]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1294]||(l[1294]=[s("Externalizable")])),_:1}),l[2137]||(l[2137]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1295]||(l[1295]=[s("进行反序列化的时候，会调用被序列化类的无参构造方法去创建一个新的对象，然后再将被保存对象的字段值复制过去。否则的话，会抛出以下异常：")])),_:1}),l[2138]||(l[2138]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">java.io.InvalidClassException: com.cmower.java_demo.xuliehua1.Wanger; no valid constructor</span>
<span class="line">	at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:150)</span>
<span class="line">	at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:790)</span>
<span class="line">	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1782)</span>
<span class="line">	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)</span>
<span class="line">	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:373)</span>
<span class="line">	at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1296]||(l[1296]=[s("2）新增了两个方法")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2139]||(l[2139]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1297]||(l[1297]=[s("writeExternal()")])),_:1}),l[2140]||(l[2140]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1298]||(l[1298]=[s("和")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2141]||(l[2141]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1299]||(l[1299]=[s("readExternal()")])),_:1}),l[2142]||(l[2142]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1300]||(l[1300]=[s("，实现")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2143]||(l[2143]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1301]||(l[1301]=[s("Externalizable")])),_:1}),l[2144]||(l[2144]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1302]||(l[1302]=[s("接口所必须的。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1303]||(l[1303]=[s("然后，我们再在测试类中打印序列化前和反序列化后的对象。")])),_:1}),l[2145]||(l[2145]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 初始化</span>
<span class="line">Wanger wanger = new Wanger();</span>
<span class="line">wanger.setName(&quot;王二&quot;);</span>
<span class="line">wanger.setAge(18);</span>
<span class="line">System.out.println(wanger);</span>
<span class="line"></span>
<span class="line">// 把对象写到文件中</span>
<span class="line">try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;chenmo&quot;));) {</span>
<span class="line">	oos.writeObject(wanger);</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 从文件中读出对象</span>
<span class="line">try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;chenmo&quot;)));) {</span>
<span class="line">	Wanger wanger1 = (Wanger) ois.readObject();</span>
<span class="line">	System.out.println(wanger1);</span>
<span class="line">} catch (IOException | ClassNotFoundException e) {</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">}</span>
<span class="line">// Wanger{name=王二,age=18}</span>
<span class="line">// Wanger{name=null,age=0}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1304]||(l[1304]=[s("从输出的结果看，反序列化后得到的对象字段都变成了默认值，也就是说，序列化之前的对象状态没有被“冻结”下来。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1305]||(l[1305]=[s("为什么呢？因为我们没有为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2146]||(l[2146]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1306]||(l[1306]=[s("Wanger")])),_:1}),l[2147]||(l[2147]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1307]||(l[1307]=[s("类重写具体的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2148]||(l[2148]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1308]||(l[1308]=[s("writeExternal()")])),_:1}),l[2149]||(l[2149]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1309]||(l[1309]=[s("和")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2150]||(l[2150]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1310]||(l[1310]=[s("readExternal()")])),_:1}),l[2151]||(l[2151]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1311]||(l[1311]=[s("方法。那该怎么重写呢？")])),_:1}),l[2152]||(l[2152]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">@Override</span>
<span class="line">public void writeExternal(ObjectOutput out) throws IOException {</span>
<span class="line">	out.writeObject(name);</span>
<span class="line">	out.writeInt(age);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">@Override</span>
<span class="line">public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {</span>
<span class="line">	name = (String) in.readObject();</span>
<span class="line">	age = in.readInt();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1312]||(l[1312]=[s("1）调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2153]||(l[2153]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1313]||(l[1313]=[s("ObjectOutput")])),_:1}),l[2154]||(l[2154]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1314]||(l[1314]=[s("的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2155]||(l[2155]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1315]||(l[1315]=[s("writeObject()")])),_:1}),l[2156]||(l[2156]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1316]||(l[1316]=[s("方法将字符串类型的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2157]||(l[2157]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1317]||(l[1317]=[s("name")])),_:1}),l[2158]||(l[2158]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1318]||(l[1318]=[s("写入到输出流中；")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1319]||(l[1319]=[s("2）调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2159]||(l[2159]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1320]||(l[1320]=[s("ObjectOutput")])),_:1}),l[2160]||(l[2160]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1321]||(l[1321]=[s("的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2161]||(l[2161]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1322]||(l[1322]=[s("writeInt()")])),_:1}),l[2162]||(l[2162]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1323]||(l[1323]=[s("方法将整型的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2163]||(l[2163]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1324]||(l[1324]=[s("age")])),_:1}),l[2164]||(l[2164]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1325]||(l[1325]=[s("写入到输出流中；")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1326]||(l[1326]=[s("3）调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2165]||(l[2165]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1327]||(l[1327]=[s("ObjectInput")])),_:1}),l[2166]||(l[2166]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1328]||(l[1328]=[s("的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2167]||(l[2167]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1329]||(l[1329]=[s("readObject()")])),_:1}),l[2168]||(l[2168]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1330]||(l[1330]=[s("方法将字符串类型的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2169]||(l[2169]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1331]||(l[1331]=[s("name")])),_:1}),l[2170]||(l[2170]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1332]||(l[1332]=[s("读入到输入流中；")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1333]||(l[1333]=[s("4）调用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2171]||(l[2171]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1334]||(l[1334]=[s("ObjectInput")])),_:1}),l[2172]||(l[2172]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1335]||(l[1335]=[s("的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2173]||(l[2173]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1336]||(l[1336]=[s("readInt()")])),_:1}),l[2174]||(l[2174]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1337]||(l[1337]=[s("方法将字符串类型的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2175]||(l[2175]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1338]||(l[1338]=[s("age")])),_:1}),l[2176]||(l[2176]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1339]||(l[1339]=[s("读入到输入流中；")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1340]||(l[1340]=[s("再运行一次测试了类，你会发现对象可以正常地序列化和反序列化了。")])),_:1}),n(e,{style:{color:"rgb(102, 102, 102)"}},{default:i(()=>l[1341]||(l[1341]=[s("序列化前：Wanger{name=王二,age=18} 序列化后：Wanger")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1342]||(l[1342]=[s("总结一下：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1343]||(l[1343]=[s("Externalizable 和 Serializable 都是用于实现 Java 对象的序列化和反序列化的接口，但是它们有以下区别：")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1344]||(l[1344]=[s("①、Serializable 是 Java 标准库提供的接口，而 Externalizable 是 Serializable 的子接口；")])),_:1}),l[2177]||(l[2177]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438303746-088a167c-19a9-460e-a0fc-af88d89d6463.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1345]||(l[1345]=[s("②、Serializable 接口不需要实现任何方法，只需要将需要序列化的类标记为 Serializable 即可，而 Externalizable 接口需要实现 writeExternal 和 readExternal 两个方法；")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1346]||(l[1346]=[s("③、Externalizable 接口提供了更高的序列化控制能力，可以在序列化和反序列化过程中对对象进行自定义的处理，如对一些敏感信息进行加密和解密。")])),_:1}),a("h3",Wn,[a("a",En,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1347]||(l[1347]=[s("再来点甜点")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1348]||(l[1348]=[s("让我先问问你吧，你知道")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2178]||(l[2178]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1349]||(l[1349]=[s("private static final long serialVersionUID = -2095916884810199532L;")])),_:1}),l[2179]||(l[2179]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1350]||(l[1350]=[s("这段代码的作用吗？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1351]||(l[1351]=[s("嗯......")])),_:1}),a("p",null,[l[1355]||(l[1355]=a("code",null,'<font style="color:rgb(44, 62, 80);">serialVersionUID</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1352]||(l[1352]=[s("被称为序列化 ID，它是决定 Java 对象能否反序列化成功的重要因子。在反序列化时，Java 虚拟机会把字节流中的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1356]||(l[1356]=a("code",null,'<font style="color:rgb(44, 62, 80);">serialVersionUID</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1353]||(l[1353]=[s("与被序列化类中的")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1357]||(l[1357]=a("code",null,'<font style="color:rgb(44, 62, 80);">serialVersionUID</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1354]||(l[1354]=[s("进行比较，如果相同则可以进行反序列化，否则就会抛出序列化版本不一致的异常。")])),_:1})]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1358]||(l[1358]=[s("当一个类实现了")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2180]||(l[2180]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1359]||(l[1359]=[s("Serializable")])),_:1}),l[2181]||(l[2181]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1360]||(l[1360]=[s("接口后，IDE 就会提醒该类最好产生一个序列化 ID，就像下面这样：")])),_:1}),l[2182]||(l[2182]=a("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1727438303638-8a09bc87-9251-4f27-849f-56071eb7cb4a.png"},null,-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1361]||(l[1361]=[s("1）添加一个默认版本的序列化 ID：")])),_:1}),l[2183]||(l[2183]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private static final long serialVersionUID = 1L。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1362]||(l[1362]=[s("2）添加一个随机生成的不重复的序列化 ID。")])),_:1}),l[2184]||(l[2184]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private static final long serialVersionUID = -2095916884810199532L;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1363]||(l[1363]=[s("3）添加")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2185]||(l[2185]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1364]||(l[1364]=[s("@SuppressWarnings")])),_:1}),l[2186]||(l[2186]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1365]||(l[1365]=[s("注解。")])),_:1}),l[2187]||(l[2187]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">@SuppressWarnings(&quot;serial&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1366]||(l[1366]=[s("怎么选择呢？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1367]||(l[1367]=[s("首先，我们采用第二种办法，在被序列化类中添加一个随机生成的序列化 ID。")])),_:1}),l[2188]||(l[2188]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger implements Serializable {</span>
<span class="line">	private static final long serialVersionUID = -2095916884810199532L;</span>
<span class="line">	</span>
<span class="line">	private String name;</span>
<span class="line">	private int age;</span>
<span class="line"></span>
<span class="line">	// 其他代码忽略</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1368]||(l[1368]=[s("然后，序列化一个")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2189]||(l[2189]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1369]||(l[1369]=[s("Wanger")])),_:1}),l[2190]||(l[2190]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1370]||(l[1370]=[s("对象到文件中。")])),_:1}),l[2191]||(l[2191]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 初始化</span>
<span class="line">Wanger wanger = new Wanger();</span>
<span class="line">wanger.setName(&quot;王二&quot;);</span>
<span class="line">wanger.setAge(18);</span>
<span class="line">System.out.println(wanger);</span>
<span class="line"></span>
<span class="line">// 把对象写到文件中</span>
<span class="line">try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;chenmo&quot;));) {</span>
<span class="line">	oos.writeObject(wanger);</span>
<span class="line">} catch (IOException e) {</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1371]||(l[1371]=[s("这时候，我们悄悄地把")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2192]||(l[2192]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1372]||(l[1372]=[s("Wanger")])),_:1}),l[2193]||(l[2193]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1373]||(l[1373]=[s("类的序列化 ID 偷梁换柱一下，嘿嘿。")])),_:1}),l[2194]||(l[2194]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// private static final long serialVersionUID = -2095916884810199532L;</span>
<span class="line">private static final long serialVersionUID = -2095916884810199533L;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1374]||(l[1374]=[s("好了，准备反序列化吧。")])),_:1}),l[2195]||(l[2195]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;chenmo&quot;)));) {</span>
<span class="line">	Wanger wanger = (Wanger) ois.readObject();</span>
<span class="line">	System.out.println(wanger);</span>
<span class="line">} catch (IOException | ClassNotFoundException e) {</span>
<span class="line">	e.printStackTrace();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1375]||(l[1375]=[s("哎呀，出错了。")])),_:1}),l[2196]||(l[2196]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">java.io.InvalidClassException:  local class incompatible: stream classdesc </span>
<span class="line">serialVersionUID = -2095916884810199532,</span>
<span class="line">local class serialVersionUID = -2095916884810199533</span>
<span class="line">	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1521)</span>
<span class="line">	at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1376]||(l[1376]=[s("异常堆栈信息里面告诉我们，从持久化文件里面读取到的序列化 ID 和本地的序列化 ID 不一致，无法反序列化。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1377]||(l[1377]=[s("那假如我们采用第三种方法，为")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2197]||(l[2197]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1378]||(l[1378]=[s("Wanger")])),_:1}),l[2198]||(l[2198]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1379]||(l[1379]=[s("类添加个")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2199]||(l[2199]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1380]||(l[1380]=[s('@SuppressWarnings("serial")')])),_:1}),l[2200]||(l[2200]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1381]||(l[1381]=[s("注解呢？")])),_:1}),l[2201]||(l[2201]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">@SuppressWarnings(&quot;serial&quot;)</span>
<span class="line">class Wanger implements Serializable {</span>
<span class="line">// 省略其他代码</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1382]||(l[1382]=[s("好了，再来一次反序列化吧。可惜依然报错。")])),_:1}),l[2202]||(l[2202]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">java.io.InvalidClassException:  local class incompatible: stream classdesc </span>
<span class="line">serialVersionUID = -2095916884810199532, </span>
<span class="line">local class serialVersionUID = -3818877437117647968</span>
<span class="line">	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1521)</span>
<span class="line">	at com.cmower.java_demo.xuliehua1.Test.main(Test.java:27)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1383]||(l[1383]=[s("异常堆栈信息里面告诉我们，本地的序列化 ID 为 -3818877437117647968，和持久化文件里面读取到的序列化 ID 仍然不一致，无法反序列化。这说明什么呢？使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2203]||(l[2203]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1384]||(l[1384]=[s('@SuppressWarnings("serial")')])),_:1}),l[2204]||(l[2204]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1385]||(l[1385]=[s("注解时，该注解会为被序列化类自动生成一个随机的序列化 ID。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1386]||(l[1386]=[s("由此可以证明，")])),_:1}),l[2205]||(l[2205]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1387]||(l[1387]=[s("Java 虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，还有一个非常重要的因素就是序列化 ID 是否一致")])),_:1}),l[2206]||(l[2206]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1388]||(l[1388]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1389]||(l[1389]=[s("也就是说，如果没有特殊需求，采用默认的序列化 ID（1L）就可以，这样可以确保代码一致时反序列化成功。")])),_:1}),l[2207]||(l[2207]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Wanger implements Serializable {</span>
<span class="line">	private static final long serialVersionUID = 1L;</span>
<span class="line">// 省略其他代码</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("h2",Bn,[a("a",Un,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1390]||(l[1390]=[s("transient 关键字")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1391]||(l[1391]=[s("害，小二最熟的是 Java，但很多 Java 基础知识都不知道，比如 transient 关键字以前就没用到过，所以不知道它的作用是什么，今天去招银面试的时候，面试官问到了这个：说说 Java 的 transient 关键字吧，结果小二直接懵逼了。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1392]||(l[1392]=[s("下面是他自己面试凉了以后回去做的总结，分享出来，大家一起涨下姿势~~~好了，废话不多说，下面开始：")])),_:1}),a("h3",kn,[a("a",Rn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1393]||(l[1393]=[s("transient 的作用及使用方法")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1394]||(l[1394]=[s("我们知道，一个对象只要实现了")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2208]||(l[2208]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1395]||(l[1395]=[s("Serilizable 接口")])),_:1}),l[2209]||(l[2209]=s("](https://javabetter.cn/io/Serializbale.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1396]||(l[1396]=[s("，它就可以被")])),_:1}),l[2210]||(l[2210]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1397]||(l[1397]=[s("序列化")])),_:1}),l[2211]||(l[2211]=s("](https://javabetter.cn/io/serialize.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1398]||(l[1398]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1399]||(l[1399]=[s("在实际开发过程中，我们常常会遇到这样的问题，一个类的有些字段需要序列化，有些字段不需要，比如说用户的一些敏感信息（如密码、银行卡号等），为了安全起见，不希望在网络操作中传输或者持久化到磁盘文件中，那这些字段就可以加上")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2212]||(l[2212]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1400]||(l[1400]=[s("transient")])),_:1}),l[2213]||(l[2213]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1401]||(l[1401]=[s("关键字。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1402]||(l[1402]=[s("需要注意的是，")])),_:1}),l[2214]||(l[2214]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1403]||(l[1403]=[s("被 transient 关键字修饰的成员变量在反序列化时会被自动初始化为默认值，例如基本数据类型为 0，引用类型为 null")])),_:1}),l[2215]||(l[2215]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1404]||(l[1404]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1405]||(l[1405]=[s("来看示例：")])),_:1}),l[2216]||(l[2216]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class TransientTest {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        </span>
<span class="line">        User user = new User();</span>
<span class="line">        user.setUsername(&quot;沉默王二&quot;);</span>
<span class="line">        user.setPasswd(&quot;123456&quot;);</span>
<span class="line">        </span>
<span class="line">        System.out.println(&quot;read before Serializable: &quot;);</span>
<span class="line">        System.out.println(&quot;username: &quot; + user.getUsername());</span>
<span class="line">        System.err.println(&quot;password: &quot; + user.getPasswd());</span>
<span class="line">        </span>
<span class="line">        try {</span>
<span class="line">            ObjectOutputStream os = new ObjectOutputStream(</span>
<span class="line">                    new FileOutputStream(&quot;user.txt&quot;));</span>
<span class="line">            os.writeObject(user); // 将User对象写进文件</span>
<span class="line">            os.flush();</span>
<span class="line">            os.close();</span>
<span class="line">        } catch (FileNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">        try {</span>
<span class="line">            ObjectInputStream is = new ObjectInputStream(new FileInputStream(</span>
<span class="line">                    &quot;user.txt&quot;));</span>
<span class="line">            user = (User) is.readObject(); // 从流中读取User的数据</span>
<span class="line">            is.close();</span>
<span class="line">            </span>
<span class="line">            System.out.println(&quot;\\nread after Serializable: &quot;);</span>
<span class="line">            System.out.println(&quot;username: &quot; + user.getUsername());</span>
<span class="line">            System.err.println(&quot;password: &quot; + user.getPasswd());</span>
<span class="line">            </span>
<span class="line">        } catch (FileNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (ClassNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">class User implements Serializable {</span>
<span class="line">    private static final long serialVersionUID = 8294180014912103005L;  </span>
<span class="line">    </span>
<span class="line">    private String username;</span>
<span class="line">    private transient String passwd;</span>
<span class="line">    </span>
<span class="line">    public String getUsername() {</span>
<span class="line">        return username;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public void setUsername(String username) {</span>
<span class="line">        this.username = username;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public String getPasswd() {</span>
<span class="line">        return passwd;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public void setPasswd(String passwd) {</span>
<span class="line">        this.passwd = passwd;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1406]||(l[1406]=[s("输出为：")])),_:1}),l[2217]||(l[2217]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">read before Serializable:</span>
<span class="line">username: 沉默王二</span>
<span class="line">password: 123456 </span>
<span class="line">read after Serializable:</span>
<span class="line">username: 沉默王二</span>
<span class="line">password: null</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1407]||(l[1407]=[s("密码字段为 null，说明反序列化时根本没有从文件中获取到信息。")])),_:1}),a("h3",Tn,[a("a",Pn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1408]||(l[1408]=[s("transient 使用小结")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1409]||(l[1409]=[s("1）一旦字段被 transient 修饰，成员变量将不再是对象持久化的一部分，该变量的值在序列化后无法访问。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1410]||(l[1410]=[s("2）transient 关键字只能修饰字段，而不能修饰方法和类。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1411]||(l[1411]=[s("3）被 transient 关键字修饰的字段不能被序列化，一个静态变量（")])),_:1}),l[2218]||(l[2218]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1412]||(l[1412]=[s("static关键字")])),_:1}),l[2219]||(l[2219]=s("](https://javabetter.cn/oo/static.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1413]||(l[1413]=[s("修饰）不管是否被 transient 修饰，均不能被序列化，")])),_:1}),l[2220]||(l[2220]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1414]||(l[1414]=[s("前面讲到过")])),_:1}),l[2221]||(l[2221]=s("](https://javabetter.cn/io/Serializbale.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1415]||(l[1415]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1416]||(l[1416]=[s("来看示例：")])),_:1}),l[2222]||(l[2222]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class TransientTest {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        </span>
<span class="line">        User user = new User();</span>
<span class="line">        user.setUsername(&quot;沉默王二&quot;);</span>
<span class="line">        user.setPasswd(&quot;123456&quot;);</span>
<span class="line">        </span>
<span class="line">        System.out.println(&quot;read before Serializable: &quot;);</span>
<span class="line">        System.out.println(&quot;username: &quot; + user.getUsername());</span>
<span class="line">        System.err.println(&quot;password: &quot; + user.getPasswd());</span>
<span class="line">        </span>
<span class="line">        try {</span>
<span class="line">            ObjectOutputStream os = new ObjectOutputStream(</span>
<span class="line">                    new FileOutputStream(&quot;user.txt&quot;));</span>
<span class="line">            os.writeObject(user); // 将User对象写进文件</span>
<span class="line">            os.flush();</span>
<span class="line">            os.close();</span>
<span class="line">        } catch (FileNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">        try {</span>
<span class="line">            // 在反序列化之前改变username的值</span>
<span class="line">            User.username = &quot;沉默王三&quot;;</span>
<span class="line">            </span>
<span class="line">            ObjectInputStream is = new ObjectInputStream(new FileInputStream(</span>
<span class="line">                    &quot;user.txt&quot;));</span>
<span class="line">            user = (User) is.readObject(); // 从流中读取User的数据</span>
<span class="line">            is.close();</span>
<span class="line">            </span>
<span class="line">            System.out.println(&quot;\\nread after Serializable: &quot;);</span>
<span class="line">            System.out.println(&quot;username: &quot; + user.getUsername());</span>
<span class="line">            System.err.println(&quot;password: &quot; + user.getPasswd());</span>
<span class="line">            </span>
<span class="line">        } catch (FileNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (IOException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        } catch (ClassNotFoundException e) {</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">class User implements Serializable {</span>
<span class="line">    private static final long serialVersionUID = 8294180014912103005L;  </span>
<span class="line">    </span>
<span class="line">    public static String username;</span>
<span class="line">    private transient String passwd;</span>
<span class="line">    </span>
<span class="line">    public String getUsername() {</span>
<span class="line">        return username;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public void setUsername(String username) {</span>
<span class="line">        this.username = username;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public String getPasswd() {</span>
<span class="line">        return passwd;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public void setPasswd(String passwd) {</span>
<span class="line">        this.passwd = passwd;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1417]||(l[1417]=[s("运行结果为：")])),_:1}),l[2223]||(l[2223]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">read before Serializable:</span>
<span class="line">username: 沉默王二</span>
<span class="line">password: 123456 </span>
<span class="line">read after Serializable:</span>
<span class="line">username: 沉默王三</span>
<span class="line">password: null</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1418]||(l[1418]=[s("序列化前，static 修饰的 username 为 沉默王二，然后我们在反序列化前将其修改为 沉默王三 了，如果说 static 修饰的字段能保持状态的话，反序列化后应该是 沉默王二，对吧？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1419]||(l[1419]=[s("但结果是 沉默王三，这就证明了我们之前的结论：")])),_:1}),l[2224]||(l[2224]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1420]||(l[1420]=[s("static 修饰的字段不能被序列化")])),_:1}),l[2225]||(l[2225]=s("**")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1421]||(l[1421]=[s("。")])),_:1}),a("h3",An,[a("a",zn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1422]||(l[1422]=[s("transient 修饰的字段真的不能被序列化？")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1423]||(l[1423]=[s("思考下面的例子：")])),_:1}),l[2226]||(l[2226]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class ExternalizableTest implements Externalizable {</span>
<span class="line">    private transient String content = &quot;是的，我将会被序列化，不管我是否被transient关键字修饰&quot;;</span>
<span class="line"></span>
<span class="line">    @Override</span>
<span class="line">    public void writeExternal(ObjectOutput out) throws IOException {</span>
<span class="line">        out.writeObject(content);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    @Override</span>
<span class="line">    public void readExternal(ObjectInput in) throws IOException,</span>
<span class="line">            ClassNotFoundException {</span>
<span class="line">        content = (String) in.readObject();</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) throws Exception {</span>
<span class="line">        </span>
<span class="line">        ExternalizableTest et = new ExternalizableTest();</span>
<span class="line">        ObjectOutput out = new ObjectOutputStream(new FileOutputStream(</span>
<span class="line">                new File(&quot;test&quot;)));</span>
<span class="line">        out.writeObject(et);</span>
<span class="line"></span>
<span class="line">        ObjectInput in = new ObjectInputStream(new FileInputStream(new File(</span>
<span class="line">                &quot;test&quot;)));</span>
<span class="line">        et = (ExternalizableTest) in.readObject();</span>
<span class="line">        System.out.println(et.content);</span>
<span class="line"></span>
<span class="line">        out.close();</span>
<span class="line">        in.close();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1424]||(l[1424]=[s("来看下输出结果：")])),_:1}),l[2227]||(l[2227]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">是的，我将会被序列化，不管我是否被transient关键字修饰</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1425]||(l[1425]=[s("这是为什么呢？不是说 transient 关键字修饰的字段不能序列化吗？")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1426]||(l[1426]=[s("我先说结论，这是因为我们使用了 Externalizable 接口而不是 Serializable接口，这个")])),_:1}),l[2228]||(l[2228]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1427]||(l[1427]=[s("知识点我们前面其实也讲到过")])),_:1}),l[2229]||(l[2229]=s("](https://javabetter.cn/io/Serializbale.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1428]||(l[1428]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1429]||(l[1429]=[s("在 Java 中，对象的序列化可以通过实现两种接口来实现，如果实现的是 Serializable 接口，则所有的序列化将会自动进行，如果实现的是 Externalizable 接口，则需要在 writeExternal 方法中指定要序列化的字段，与 transient 关键字修饰无关。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1430]||(l[1430]=[s("因此例子输出的是变量 content 的内容，而不是 null。")])),_:1}),a("h3",Cn,[a("a",Dn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1431]||(l[1431]=[s("小结")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1432]||(l[1432]=[s("transient 关键字用于修饰类的成员变量，在序列化对象时，被修饰的成员变量不会被序列化和保存到文件中。其作用是告诉 JVM 在序列化对象时不需要将该变量的值持久化，这样可以避免一些安全或者性能问题。但是，transient 修饰的成员变量在反序列化时会被初始化为其默认值（如 int 类型会被初始化为 0，引用类型会被初始化为 null），因此需要在程序中进行适当的处理。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1433]||(l[1433]=[s("transient 关键字和 static 关键字都可以用来修饰类的成员变量。其中，transient 关键字表示该成员变量不参与序列化和反序列化，而 static 关键字表示该成员变量是属于类的，不属于对象的，因此不需要序列化和反序列化。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1434]||(l[1434]=[s("在 Serializable 和 Externalizable 接口中，transient 关键字的表现也不同，在 Serializable 中表示该成员变量不参与序列化和反序列化，在 Externalizable 中不起作用，因为 Externalizable 接口需要实现 readExternal 和 writeExternal 方法，需要手动完成序列化和反序列化的过程。")])),_:1}),a("h2",Nn,[a("a",Jn,[a("span",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1435]||(l[1435]=[s("打印流")])),_:1})])])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1436]||(l[1436]=[s("在我的职业生涯中，")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2230]||(l[2230]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1437]||(l[1437]=[s("System.out.println()")])),_:1}),l[2231]||(l[2231]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1438]||(l[1438]=[s("的使用频率恐怕不亚于 main 方法的使用频率。其中")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2232]||(l[2232]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1439]||(l[1439]=[s("System.out")])),_:1}),l[2233]||(l[2233]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1440]||(l[1440]=[s("返回的正是打印流")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[2234]||(l[2234]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1441]||(l[1441]=[s("PrintStream")])),_:1}),l[2235]||(l[2235]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1442]||(l[1442]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1443]||(l[1443]=[s("除此之外，还有它还有一个孪生兄弟，PrintWriter。PrintStream 是 OutputStream 的子类，PrintWriter 是 Writer 的子类，也就是说，一个")])),_:1}),l[2236]||(l[2236]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1444]||(l[1444]=[s("字节流")])),_:1}),l[2237]||(l[2237]=s("](https://javabetter.cn/io/stream.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1445]||(l[1445]=[s("，一个是")])),_:1}),l[2238]||(l[2238]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1446]||(l[1446]=[s("字符流")])),_:1}),l[2239]||(l[2239]=s("](https://javabetter.cn/io/reader-writer.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1447]||(l[1447]=[s("。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1448]||(l[1448]=[s("打印流具有以下几个特点：")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1449]||(l[1449]=[s("可以自动进行数据类型转换：打印流可以将各种数据类型转换为字符串，并输出到指定的输出流中。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1450]||(l[1450]=[s("可以自动进行换行操作：打印流可以在输出字符串的末尾自动添加换行符，方便输出多个字符串时的格式控制。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1451]||(l[1451]=[s("可以输出到控制台或者文件中：打印流可以将数据输出到控制台或者文件中，方便调试和日志记录（尽管生产环境下更推荐使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1454]||(l[1454]=s("[")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1452]||(l[1452]=[s("Logback")])),_:1}),l[1455]||(l[1455]=s("](https://javabetter.cn/gongju/logback.html)")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1453]||(l[1453]=[s("、ELK 等）。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1456]||(l[1456]=[s("PrintStream 类的常用方法包括：")])),_:1}),a("ul",null,[a("li",null,[l[1458]||(l[1458]=a("code",null,'<font style="color:rgb(44, 62, 80);">print()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1457]||(l[1457]=[s("：输出一个对象的字符串表示形式。")])),_:1})]),a("li",null,[l[1460]||(l[1460]=a("code",null,'<font style="color:rgb(44, 62, 80);">println()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1459]||(l[1459]=[s("：输出一个对象的字符串表示形式，并在末尾添加一个换行符。")])),_:1})]),a("li",null,[l[1462]||(l[1462]=a("code",null,'<font style="color:rgb(44, 62, 80);">printf()</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1461]||(l[1461]=[s("：使用指定的格式字符串和参数输出格式化的字符串。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1463]||(l[1463]=[s("来一个示例体验一下。")])),_:1}),l[2240]||(l[2240]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">PrintStream ps = System.out;</span>
<span class="line">ps.println(&quot;沉默王二&quot;);</span>
<span class="line">ps.print(&quot;沉 &quot;);</span>
<span class="line">ps.print(&quot;默 &quot;);</span>
<span class="line">ps.print(&quot;王 &quot;);</span>
<span class="line">ps.print(&quot;二 &quot;);</span>
<span class="line">ps.println();</span>
<span class="line"></span>
<span class="line">ps.printf(&quot;姓名：%s，年龄：%d，成绩：%f&quot;, &quot;沉默王二&quot;, 18, 99.9);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1464]||(l[1464]=[s("在这个示例中，我们创建了一个 PrintStream 对象 ps，它输出到控制台。我们使用 ps 的 print 和 println 方法输出了一些字符串。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1465]||(l[1465]=[s("使用 printf 方法输出了一个格式化字符串，其中 %s、%d 和 %.2f 分别表示字符串、整数和浮点数的格式化输出。我们使用逗号分隔的参数列表指定了要输出的值。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1466]||(l[1466]=[s("来详细说说 printf 方法哈。")])),_:1}),l[2241]||(l[2241]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public PrintStream printf(String format, Object... args);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1467]||(l[1467]=[s("其中，format 参数是格式化字符串，args 参数是要输出的参数列表。格式化字符串包含了普通字符和转换说明符。普通字符是指除了转换说明符之外的字符，它们在输出时直接输出。转换说明符是由百分号（%）和一个或多个字符组成的，用于指定输出的格式和数据类型。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1468]||(l[1468]=[s("下面是 Java 的常用转换说明符及对应的输出格式：")])),_:1}),a("ul",null,[a("li",null,[l[1470]||(l[1470]=a("code",null,'<font style="color:rgb(44, 62, 80);">%s</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1469]||(l[1469]=[s("：输出一个字符串。")])),_:1})]),a("li",null,[l[1473]||(l[1473]=a("code",null,'<font style="color:rgb(44, 62, 80);">%d</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1471]||(l[1471]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1474]||(l[1474]=a("code",null,'<font style="color:rgb(44, 62, 80);">%i</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1472]||(l[1472]=[s("：输出一个十进制整数。")])),_:1})]),a("li",null,[l[1479]||(l[1479]=a("code",null,'<font style="color:rgb(44, 62, 80);">%x</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1475]||(l[1475]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1480]||(l[1480]=a("code",null,'<font style="color:rgb(44, 62, 80);">%X</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1476]||(l[1476]=[s("：输出一个十六进制整数，")])),_:1}),l[1481]||(l[1481]=a("code",null,'<font style="color:rgb(44, 62, 80);">%x</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1477]||(l[1477]=[s("输出小写字母，")])),_:1}),l[1482]||(l[1482]=a("code",null,'<font style="color:rgb(44, 62, 80);">%X</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1478]||(l[1478]=[s("输出大写字母。")])),_:1})]),a("li",null,[l[1485]||(l[1485]=a("code",null,'<font style="color:rgb(44, 62, 80);">%f</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1483]||(l[1483]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1486]||(l[1486]=a("code",null,'<font style="color:rgb(44, 62, 80);">%F</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1484]||(l[1484]=[s("：输出一个浮点数。")])),_:1})]),a("li",null,[l[1491]||(l[1491]=a("code",null,'<font style="color:rgb(44, 62, 80);">%e</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1487]||(l[1487]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1492]||(l[1492]=a("code",null,'<font style="color:rgb(44, 62, 80);">%E</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1488]||(l[1488]=[s("：输出一个科学计数法表示的浮点数，")])),_:1}),l[1493]||(l[1493]=a("code",null,'<font style="color:rgb(44, 62, 80);">%e</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1489]||(l[1489]=[s("输出小写字母 e，")])),_:1}),l[1494]||(l[1494]=a("code",null,'<font style="color:rgb(44, 62, 80);">%E</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1490]||(l[1490]=[s("输出大写字母 E。")])),_:1})]),a("li",null,[l[1499]||(l[1499]=a("code",null,'<font style="color:rgb(44, 62, 80);">%g</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1495]||(l[1495]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1500]||(l[1500]=a("code",null,'<font style="color:rgb(44, 62, 80);">%G</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1496]||(l[1496]=[s("：输出一个浮点数，自动选择")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1501]||(l[1501]=a("code",null,'<font style="color:rgb(44, 62, 80);">%f</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1497]||(l[1497]=[s("或")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1502]||(l[1502]=a("code",null,'<font style="color:rgb(44, 62, 80);">%e/%E</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1498]||(l[1498]=[s("格式输出。")])),_:1})]),a("li",null,[l[1504]||(l[1504]=a("code",null,'<font style="color:rgb(44, 62, 80);">%c</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1503]||(l[1503]=[s("：输出一个字符。")])),_:1})]),a("li",null,[l[1506]||(l[1506]=a("code",null,'<font style="color:rgb(44, 62, 80);">%b</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1505]||(l[1505]=[s("：输出一个布尔值。")])),_:1})]),a("li",null,[l[1508]||(l[1508]=a("code",null,'<font style="color:rgb(44, 62, 80);">%h</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1507]||(l[1507]=[s("：输出一个哈希码（16进制）。")])),_:1})]),a("li",null,[l[1510]||(l[1510]=a("code",null,'<font style="color:rgb(44, 62, 80);">%n</font>',-1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1509]||(l[1509]=[s("：换行符。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1511]||(l[1511]=[s("除了转换说明符之外，Java 的 printf 方法还支持一些修饰符，用于指定输出的宽度、精度、对齐方式等。")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1512]||(l[1512]=[s("宽度修饰符：用数字指定输出的最小宽度，如果输出的数据不足指定宽度，则在左侧或右侧填充空格或零。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1513]||(l[1513]=[s("精度修饰符：用点号（.）和数字指定浮点数或字符串的精度，对于浮点数，指定小数点后的位数，对于字符串，指定输出的字符数。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1514]||(l[1514]=[s("对齐修饰符：用减号（-）或零号（0）指定输出的对齐方式，减号表示左对齐，零号表示右对齐并填充零。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1515]||(l[1515]=[s("下面是一些示例：")])),_:1}),l[2242]||(l[2242]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int num = 123;</span>
<span class="line">System.out.printf(&quot;%5d\\n&quot;, num); // 输出 &quot;  123&quot;</span>
<span class="line">System.out.printf(&quot;%-5d\\n&quot;, num); // 输出 &quot;123  &quot;</span>
<span class="line">System.out.printf(&quot;%05d\\n&quot;, num); // 输出 &quot;00123&quot;</span>
<span class="line"></span>
<span class="line">double pi = Math.PI;</span>
<span class="line">System.out.printf(&quot;%10.2f\\n&quot;, pi); // 输出 &quot;      3.14&quot;</span>
<span class="line">System.out.printf(&quot;%-10.4f\\n&quot;, pi); // 输出 &quot;3.1416    &quot;</span>
<span class="line"></span>
<span class="line">String name = &quot;沉默王二&quot;;</span>
<span class="line">System.out.printf(&quot;%10s\\n&quot;, name); // 输出 &quot;     沉默王二&quot;</span>
<span class="line">System.out.printf(&quot;%-10s\\n&quot;, name); // 输出 &quot;沉默王二     &quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1516]||(l[1516]=[s("具体来说，")])),_:1}),a("ul",null,[a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1517]||(l[1517]=[s("我们使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1520]||(l[1520]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1518]||(l[1518]=[s("%5d")])),_:1}),l[1521]||(l[1521]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1519]||(l[1519]=[s("来指定输出的整数占据 5 个字符的宽度，不足部分在左侧填充空格。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1522]||(l[1522]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1525]||(l[1525]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1523]||(l[1523]=[s("%-5d")])),_:1}),l[1526]||(l[1526]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1524]||(l[1524]=[s("来指定输出的整数占据 5 个字符的宽度，不足部分在右侧填充空格。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1527]||(l[1527]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1530]||(l[1530]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1528]||(l[1528]=[s("%05d")])),_:1}),l[1531]||(l[1531]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1529]||(l[1529]=[s("来指定输出的整数占据 5 个字符的宽度，不足部分在左侧填充 0。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1532]||(l[1532]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1535]||(l[1535]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1533]||(l[1533]=[s("%10.2f")])),_:1}),l[1536]||(l[1536]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1534]||(l[1534]=[s("来指定输出的浮点数占据 10 个字符的宽度，保留 2 位小数，不足部分在左侧填充空格。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1537]||(l[1537]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1540]||(l[1540]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1538]||(l[1538]=[s("%-10.4f")])),_:1}),l[1541]||(l[1541]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1539]||(l[1539]=[s("来指定输出的浮点数占据 10 个字符的宽度，保留 4 位小数，不足部分在右侧填充空格。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1542]||(l[1542]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1545]||(l[1545]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1543]||(l[1543]=[s("%10s")])),_:1}),l[1546]||(l[1546]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1544]||(l[1544]=[s("来指定输出的字符串占据 10 个字符的宽度，不足部分在左侧填充空格。")])),_:1})]),a("li",null,[n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1547]||(l[1547]=[s("使用")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}}),l[1550]||(l[1550]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1548]||(l[1548]=[s("%-10s")])),_:1}),l[1551]||(l[1551]=s("`")),n(e,{style:{color:"rgb(44, 62, 80)"}}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1549]||(l[1549]=[s("来指定输出的字符串占据 10 个字符的宽度，不足部分在右侧填充空格。")])),_:1})])]),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1552]||(l[1552]=[s("接下来，我们给出一个 PrintWriter 的示例：")])),_:1}),l[2243]||(l[2243]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">PrintWriter writer = new PrintWriter(new FileWriter(&quot;output.txt&quot;));</span>
<span class="line">writer.println(&quot;沉默王二&quot;);</span>
<span class="line">writer.printf(&quot;他的年纪为 %d.\\n&quot;, 18);</span>
<span class="line">writer.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1553]||(l[1553]=[s("首先，我们创建一个 PrintWriter 对象，它的构造函数接收一个 Writer 对象作为参数。在这里，我们使用 FileWriter 来创建一个输出文件流，并将其作为参数传递给 PrintWriter 的构造函数。然后，我们使用 PrintWriter 的 println 和 printf 方法来输出两行内容，其中 printf 方法可以接收格式化字符串。最后，我们调用 PrintWriter 的 close 方法来关闭输出流。")])),_:1}),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1554]||(l[1554]=[s("我们也可以不创建 FileWriter 对象，直接指定文件名。")])),_:1}),l[2244]||(l[2244]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">PrintWriter pw = new PrintWriter(&quot;output.txt&quot;);</span>
<span class="line">pw.println(&quot;沉默王二&quot;);</span>
<span class="line">pw.printf(&quot;他的年纪为 %d.\\n&quot;, 18);</span>
<span class="line">pw.close();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(e,{style:{color:"rgb(44, 62, 80)"}},{default:i(()=>l[1555]||(l[1555]=[s("好，关于打印流我们就说这么多，比较简单。至于 printf 的一些规则，用到的时候可以再查使用说明或者看 API 文档就可以了，记不住没关系。")])),_:1}),l[2245]||(l[2245]=t(`<p>到的文件操作API</p><ol><li>拷贝文件：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Files.copy(src.toPath(),dest.toPath(),optionList.toArray(new CopyOption[]));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>创建多级文件夹（哪怕中间有目录不存在）：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File dest;</span>
<span class="line">dest.mkdirs()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>判断是否为目录 ：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File dest;</span>
<span class="line">dest.isDirectory()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>文件是否存在：</li></ol><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File dest;</span>
<span class="line">dest.exists()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>5</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File parent;</span>
<span class="line">File parentFile = parent.getParentFile();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>6</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File srcFile = new File(parentFile, &quot;gzc-generator-demo/acm-template&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>7</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File file;</span>
<span class="line">String path = file.getAbsolutePath();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File srcFile;</span>
<span class="line">File[] listFiles = srcFile.listFiles();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">File destFile;</span>
<span class="line">Path destPath = destFile.toPath().resolve(srcFile.getName());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>// 获取gzc-generator-basic 项目的根路径</p><pre><code>    String projectPath = System.getProperty(&quot;user.dir&quot;);
</code></pre><h2 id="files-api" tabindex="-1"><a class="header-anchor" href="#files-api"><span>Files API</span></a></h2><h3 id="files-copy-srcfile-topath-destpath-standardcopyoption-replace-existing" tabindex="-1"><a class="header-anchor" href="#files-copy-srcfile-topath-destpath-standardcopyoption-replace-existing"><span>Files.copy(srcFile.toPath(),destPath, StandardCopyOption.REPLACE_EXISTING);</span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Files.copy(srcFile.toPath(),destPath, StandardCopyOption.REPLACE_EXISTING);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>FileUtil.copy(srcPath,destPath,false);</p><p>ArrayUtil.isEmpty(listFiles)</p><p>Writer out = new FileWriter(&quot;myweb.html&quot;);</p>`,25))])}const Kn=o(b,[["render",Ln],["__file","base09.html.vue"]]),Mn=JSON.parse('{"path":"/blogs/docs/Java/IO/base09.html","title":"JavaIO","lang":"en-US","frontmatter":{"title":"JavaIO","date":"2024/09/28","tags":["JavaIO"],"categories":["Java"],"hideComments":false},"headers":[{"level":2,"title":"Java IO 知识体系","slug":"java-io-知识体系","link":"#java-io-知识体系","children":[{"level":3,"title":"初识 Java IO","slug":"初识-java-io","link":"#初识-java-io","children":[]},{"level":3,"title":"传输方式划分","slug":"传输方式划分","link":"#传输方式划分","children":[]},{"level":3,"title":"操作对象划分","slug":"操作对象划分","link":"#操作对象划分","children":[]}]},{"level":2,"title":"文件流","slug":"文件流","link":"#文件流","children":[{"level":3,"title":"File 构造方法","slug":"file-构造方法","link":"#file-构造方法","children":[]},{"level":3,"title":"File 常用方法","slug":"file-常用方法","link":"#file-常用方法","children":[]},{"level":3,"title":"RandomAccessFile","slug":"randomaccessfile","link":"#randomaccessfile","children":[]},{"level":3,"title":"Apache FileUtils 类","slug":"apache-fileutils-类","link":"#apache-fileutils-类","children":[]},{"level":3,"title":"Hutool FileUtil 类","slug":"hutool-fileutil-类","link":"#hutool-fileutil-类","children":[]}]},{"level":2,"title":"字符流","slug":"字符流","link":"#字符流","children":[{"level":3,"title":"字符输入流（Reader）","slug":"字符输入流-reader","link":"#字符输入流-reader","children":[]},{"level":3,"title":"字符输出流（Writer）","slug":"字符输出流-writer","link":"#字符输出流-writer","children":[]},{"level":3,"title":"IO异常的处理","slug":"io异常的处理","link":"#io异常的处理","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"字节流 - Java IO 基石","slug":"字节流-java-io-基石","link":"#字节流-java-io-基石","children":[{"level":3,"title":"字节输出流（OutputStream）","slug":"字节输出流-outputstream","link":"#字节输出流-outputstream","children":[]},{"level":3,"title":"FileOutputStream类","slug":"fileoutputstream类","link":"#fileoutputstream类","children":[]},{"level":3,"title":"字节输入流（InputStream）","slug":"字节输入流-inputstream","link":"#字节输入流-inputstream","children":[]},{"level":3,"title":"FileInputStream类","slug":"fileinputstream类","link":"#fileinputstream类","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}]},{"level":2,"title":"缓冲流","slug":"缓冲流","link":"#缓冲流","children":[{"level":3,"title":"字节缓冲流","slug":"字节缓冲流","link":"#字节缓冲流","children":[]},{"level":3,"title":"字符缓冲流","slug":"字符缓冲流","link":"#字符缓冲流","children":[]},{"level":3,"title":"字符缓冲流练习","slug":"字符缓冲流练习","link":"#字符缓冲流练习","children":[]}]},{"level":2,"title":"转换流","slug":"转换流","link":"#转换流","children":[{"level":3,"title":"编码和解码","slug":"编码和解码","link":"#编码和解码","children":[]},{"level":3,"title":"字符集","slug":"字符集","link":"#字符集","children":[]},{"level":3,"title":"乱码","slug":"乱码","link":"#乱码","children":[]},{"level":3,"title":"InputStreamReader","slug":"inputstreamreader","link":"#inputstreamreader","children":[]},{"level":3,"title":"OutputStreamWriter","slug":"outputstreamwriter","link":"#outputstreamwriter","children":[]},{"level":3,"title":"小结","slug":"小结-2","link":"#小结-2","children":[]}]},{"level":2,"title":"序列流（序列化和反序列化）","slug":"序列流-序列化和反序列化","link":"#序列流-序列化和反序列化","children":[{"level":3,"title":"ObjectOutputStream","slug":"objectoutputstream","link":"#objectoutputstream","children":[]},{"level":3,"title":"ObjectInputStream","slug":"objectinputstream","link":"#objectinputstream","children":[]},{"level":3,"title":"Kryo","slug":"kryo","link":"#kryo","children":[]}]},{"level":2,"title":"序列接口 Serializable","slug":"序列接口-serializable","link":"#序列接口-serializable","children":[{"level":3,"title":"先来点理论","slug":"先来点理论","link":"#先来点理论","children":[]},{"level":3,"title":"再来点实战","slug":"再来点实战","link":"#再来点实战","children":[]},{"level":3,"title":"再来点注意事项","slug":"再来点注意事项","link":"#再来点注意事项","children":[]},{"level":3,"title":"再来点干货","slug":"再来点干货","link":"#再来点干货","children":[]},{"level":3,"title":"再来点甜点","slug":"再来点甜点","link":"#再来点甜点","children":[]}]},{"level":2,"title":"transient 关键字","slug":"transient-关键字","link":"#transient-关键字","children":[{"level":3,"title":"transient 的作用及使用方法","slug":"transient-的作用及使用方法","link":"#transient-的作用及使用方法","children":[]},{"level":3,"title":"transient 使用小结","slug":"transient-使用小结","link":"#transient-使用小结","children":[]},{"level":3,"title":"transient 修饰的字段真的不能被序列化？","slug":"transient-修饰的字段真的不能被序列化","link":"#transient-修饰的字段真的不能被序列化","children":[]},{"level":3,"title":"小结","slug":"小结-3","link":"#小结-3","children":[]}]},{"level":2,"title":"打印流","slug":"打印流","link":"#打印流","children":[]},{"level":2,"title":"Files API","slug":"files-api","link":"#files-api","children":[{"level":3,"title":"Files.copy(srcFile.toPath(),destPath, StandardCopyOption.REPLACE_EXISTING);","slug":"files-copy-srcfile-topath-destpath-standardcopyoption-replace-existing","link":"#files-copy-srcfile-topath-destpath-standardcopyoption-replace-existing","children":[]}]}],"git":{"createdTime":1727709468000,"updatedTime":1727709468000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":1}]},"filePathRelative":"blogs/docs/Java/IO/base09.md"}');export{Kn as comp,Mn as data};
