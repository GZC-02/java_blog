import{_ as p,c as d,b as i,d as l,w as e,a as t,e as s,r as o,o as u}from"./app-dlVZ0gbL.js";const b={},v={id:"_1-流程控制语句",tabindex:"-1"},g={class:"header-anchor",href:"#_1-流程控制语句"},m={id:"_1-1-流程控制语句分类",tabindex:"-1"},y={class:"header-anchor",href:"#_1-1-流程控制语句分类"},f={id:"_1-2-顺序结构",tabindex:"-1"},c={class:"header-anchor",href:"#_1-2-顺序结构"},k={id:"_1-3-判断语句-if",tabindex:"-1"},S={class:"header-anchor",href:"#_1-3-判断语句-if"},q={id:"_1-3-1-格式1",tabindex:"-1"},x={class:"header-anchor",href:"#_1-3-1-格式1"},j={id:"if的注意点",tabindex:"-1"},w={class:"header-anchor",href:"#if的注意点"},B={id:"_1-3-2-if-语句格式2",tabindex:"-1"},C={class:"header-anchor",href:"#_1-3-2-if-语句格式2"},E={id:"_1-3-3-if语句格式3",tabindex:"-1"},A={class:"header-anchor",href:"#_1-3-3-if语句格式3"},J={id:"_1-4-switch-语句",tabindex:"-1"},I={class:"header-anchor",href:"#_1-4-switch-语句"},O={id:"_1-4-1-格式",tabindex:"-1"},D={class:"header-anchor",href:"#_1-4-1-格式"},L={id:"_1-4-2-执行流程",tabindex:"-1"},U={class:"header-anchor",href:"#_1-4-2-执行流程"},F={id:"_1-4-3-格式说明",tabindex:"-1"},M={class:"header-anchor",href:"#_1-4-3-格式说明"},T={id:"_1-4-3-switch-的扩展知识",tabindex:"-1"},P={class:"header-anchor",href:"#_1-4-3-switch-的扩展知识"},N={id:"✨练习-休息日和工作日",tabindex:"-1"},V={class:"header-anchor",href:"#✨练习-休息日和工作日"},z={id:"_2-循环结构",tabindex:"-1"},H={class:"header-anchor",href:"#_2-循环结构"},K={id:"_2-1-for-循环结构",tabindex:"-1"},G={class:"header-anchor",href:"#_2-1-for-循环结构"},R={id:"_2-1-1-for循环结构",tabindex:"-1"},W={class:"header-anchor",href:"#_2-1-1-for循环结构"},Q={id:"_2-1-2-求和和统计思想",tabindex:"-1"},X={class:"header-anchor",href:"#_2-1-2-求和和统计思想"},Y={id:"for循环练习-求和",tabindex:"-1"},Z={class:"header-anchor",href:"#for循环练习-求和"},$={id:"_2-2-while循环",tabindex:"-1"},h={class:"header-anchor",href:"#_2-2-while循环"},_={id:"_2-2-1-格式",tabindex:"-1"},nn={class:"header-anchor",href:"#_2-2-1-格式"},sn={id:"_2-3-do-while循环",tabindex:"-1"},ln={class:"header-anchor",href:"#_2-3-do-while循环"},an={id:"_2-3-1-格式",tabindex:"-1"},en={class:"header-anchor",href:"#_2-3-1-格式"},tn={id:"_2-3-2-特点-先执行-再判断。",tabindex:"-1"},rn={class:"header-anchor",href:"#_2-3-2-特点-先执行-再判断。"},on={id:"_2-3-3-三种格式的区别",tabindex:"-1"},pn={class:"header-anchor",href:"#_2-3-3-三种格式的区别"},dn={id:"_3-练习题",tabindex:"-1"},un={class:"header-anchor",href:"#_3-练习题"},bn={id:"回文数",tabindex:"-1"},vn={class:"header-anchor",href:"#回文数"},gn={id:"求商和余数",tabindex:"-1"},mn={class:"header-anchor",href:"#求商和余数"},yn={id:"_4-循环高级综合练习",tabindex:"-1"},fn={class:"header-anchor",href:"#_4-循环高级综合练习"},cn={id:"_4-1-无限循环",tabindex:"-1"},kn={class:"header-anchor",href:"#_4-1-无限循环"},Sn={id:"概念",tabindex:"-1"},qn={class:"header-anchor",href:"#概念"},xn={id:"for格式",tabindex:"-1"},jn={class:"header-anchor",href:"#for格式"},wn={id:"while格式",tabindex:"-1"},Bn={class:"header-anchor",href:"#while格式"},Cn={id:"do-while格式",tabindex:"-1"},En={class:"header-anchor",href:"#do-while格式"},An={id:"无限循环的注意事项",tabindex:"-1"},Jn={class:"header-anchor",href:"#无限循环的注意事项"},In={id:"_4-2-条件控制语句",tabindex:"-1"},On={class:"header-anchor",href:"#_4-2-条件控制语句"},Dn={id:"_1-break",tabindex:"-1"},Ln={class:"header-anchor",href:"#_1-break"},Un={id:"_2-continue",tabindex:"-1"},Fn={class:"header-anchor",href:"#_2-continue"},Mn={id:"_3-random",tabindex:"-1"},Tn={class:"header-anchor",href:"#_3-random"},Pn={id:"使用步骤",tabindex:"-1"},Nn={class:"header-anchor",href:"#使用步骤"},Vn={id:"导包",tabindex:"-1"},zn={class:"header-anchor",href:"#导包"},Hn={id:"创建对象",tabindex:"-1"},Kn={class:"header-anchor",href:"#创建对象"},Gn={id:"生成随机数",tabindex:"-1"},Rn={class:"header-anchor",href:"#生成随机数"},Wn={id:"_4-3-跳出当前的多重嵌套循环-循环标记",tabindex:"-1"},Qn={class:"header-anchor",href:"#_4-3-跳出当前的多重嵌套循环-循环标记"},Xn={id:"_4-4-猜数字小游戏",tabindex:"-1"},Yn={class:"header-anchor",href:"#_4-4-猜数字小游戏"},Zn={id:"_5-数组",tabindex:"-1"},$n={class:"header-anchor",href:"#_5-数组"},hn={id:"_5-1-概念",tabindex:"-1"},_n={class:"header-anchor",href:"#_5-1-概念"},ns={id:"_5-2-数组的定义",tabindex:"-1"},ss={class:"header-anchor",href:"#_5-2-数组的定义"},ls={id:"格式一-数据类型-数组名",tabindex:"-1"},as={class:"header-anchor",href:"#格式一-数据类型-数组名"},es={id:"格式二-数据类型-数组名",tabindex:"-1"},is={class:"header-anchor",href:"#格式二-数据类型-数组名"},ts={id:"_5-3-数组的静态初始化",tabindex:"-1"},rs={class:"header-anchor",href:"#_5-3-数组的静态初始化"},os={id:"完整格式-数据类型-数组名-new-数据类型-元素1-元素2-元素3-元素4",tabindex:"-1"},ps={class:"header-anchor",href:"#完整格式-数据类型-数组名-new-数据类型-元素1-元素2-元素3-元素4"},ds={id:"注意点",tabindex:"-1"},us={class:"header-anchor",href:"#注意点"},bs={id:"简化格式",tabindex:"-1"},vs={class:"header-anchor",href:"#简化格式"},gs={id:"_5-4-地址值",tabindex:"-1"},ms={class:"header-anchor",href:"#_5-4-地址值"},ys={id:"_5-5-元素访问",tabindex:"-1"},fs={class:"header-anchor",href:"#_5-5-元素访问"},cs={id:"_5-5-1-格式数组名-索引",tabindex:"-1"},ks={class:"header-anchor",href:"#_5-5-1-格式数组名-索引"},Ss={id:"_5-5-2-作用",tabindex:"-1"},qs={class:"header-anchor",href:"#_5-5-2-作用"},xs={id:"_5-6-索引",tabindex:"-1"},js={class:"header-anchor",href:"#_5-6-索引"},ws={id:"_5-7-数组遍历",tabindex:"-1"},Bs={class:"header-anchor",href:"#_5-7-数组遍历"},Cs={id:"_5-8-数组的动态初始化",tabindex:"-1"},Es={class:"header-anchor",href:"#_5-8-数组的动态初始化"},As={id:"_5-8-1-格式-数据类型-数组名-new-数据类型-数组的长度",tabindex:"-1"},Js={class:"header-anchor",href:"#_5-8-1-格式-数据类型-数组名-new-数据类型-数组的长度"},Is={id:"_5-8-2-数组的默认初始化值",tabindex:"-1"},Os={class:"header-anchor",href:"#_5-8-2-数组的默认初始化值"},Ds={id:"_5-9-数组两种初始化",tabindex:"-1"},Ls={class:"header-anchor",href:"#_5-9-数组两种初始化"},Us={id:"_5-9-1-区别",tabindex:"-1"},Fs={class:"header-anchor",href:"#_5-9-1-区别"},Ms={id:"_5-9-1使用场景",tabindex:"-1"},Ts={class:"header-anchor",href:"#_5-9-1使用场景"},Ps={id:"_5-10-数组常见问题",tabindex:"-1"},Ns={class:"header-anchor",href:"#_5-10-数组常见问题"},Vs={id:"_5-11-数组的内存图",tabindex:"-1"},zs={class:"header-anchor",href:"#_5-11-数组的内存图"},Hs={id:"_5-11-1-java内存分配",tabindex:"-1"},Ks={class:"header-anchor",href:"#_5-11-1-java内存分配"},Gs={id:"两个数组指向同一个空间的内存图",tabindex:"-1"},Rs={class:"header-anchor",href:"#两个数组指向同一个空间的内存图"},Ws={id:"_5-12-练习题",tabindex:"-1"},Qs={class:"header-anchor",href:"#_5-12-练习题"},Xs={id:"练习7-打乱数据",tabindex:"-1"},Ys={class:"header-anchor",href:"#练习7-打乱数据"},Zs={style:{"text-align":"center"}},$s={style:{"text-align":"center"}},hs={id:"字符串-equals-string变量",tabindex:"-1"},_s={class:"header-anchor",href:"#字符串-equals-string变量"},nl={id:"_6-6-字符串子串",tabindex:"-1"},sl={class:"header-anchor",href:"#_6-6-字符串子串"},ll={id:"_6-7-字符串转字符数组、byte数组",tabindex:"-1"},al={class:"header-anchor",href:"#_6-7-字符串转字符数组、byte数组"},el={id:"_6-8-检索字符串",tabindex:"-1"},il={class:"header-anchor",href:"#_6-8-检索字符串"},tl={id:"public-int-indexof-string-str",tabindex:"-1"},rl={class:"header-anchor",href:"#public-int-indexof-string-str"},ol={id:"public-int-indexof-string-str-int-fromindex",tabindex:"-1"},pl={class:"header-anchor",href:"#public-int-indexof-string-str-int-fromindex"},dl={id:"public-boolean-contains-string-s",tabindex:"-1"},ul={class:"header-anchor",href:"#public-boolean-contains-string-s"},bl={id:"public-char-charat-int-index",tabindex:"-1"},vl={class:"header-anchor",href:"#public-char-charat-int-index"},gl={id:"_6-9-字符串拆分",tabindex:"-1"},ml={class:"header-anchor",href:"#_6-9-字符串拆分"},yl={id:"public-string-split-string-regex",tabindex:"-1"},fl={class:"header-anchor",href:"#public-string-split-string-regex"},cl={id:"_6-10-修改字符串",tabindex:"-1"},kl={class:"header-anchor",href:"#_6-10-修改字符串"},Sl={id:"_6-11",tabindex:"-1"},ql={class:"header-anchor",href:"#_6-11"},xl={id:"_6-12-其他方法",tabindex:"-1"},jl={class:"header-anchor",href:"#_6-12-其他方法"},wl={id:"public-int-length",tabindex:"-1"},Bl={class:"header-anchor",href:"#public-int-length"},Cl={id:"public-boolean-startswith-string-prefix",tabindex:"-1"},El={class:"header-anchor",href:"#public-boolean-startswith-string-prefix"},Al={id:"public-boolean-endwith-string-suffix",tabindex:"-1"},Jl={class:"header-anchor",href:"#public-boolean-endwith-string-suffix"},Il={id:"string-类的声明",tabindex:"-1"},Ol={class:"header-anchor",href:"#string-类的声明"},Dl={href:"https://javabetter.cn/string/string-source.html#string-%E7%B1%BB%E7%9A%84%E5%A3%B0%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},Ll={id:"string-底层为什么由-char-数组优化为-byte-数组",tabindex:"-1"},Ul={class:"header-anchor",href:"#string-底层为什么由-char-数组优化为-byte-数组"},Fl={id:"string-类的-hashcode-方法",tabindex:"-1"},Ml={class:"header-anchor",href:"#string-类的-hashcode-方法"},Tl={href:"https://javabetter.cn/basic-extra-meal/hashcode.html",target:"_blank",rel:"noopener noreferrer"},Pl={id:"string-类的-substring-方法",tabindex:"-1"},Nl={class:"header-anchor",href:"#string-类的-substring-方法"},Vl={id:"string-类的-indexof-方法",tabindex:"-1"},zl={class:"header-anchor",href:"#string-类的-indexof-方法"},Hl={id:"string-类的其他方法",tabindex:"-1"},Kl={class:"header-anchor",href:"#string-类的其他方法"},Gl={href:"https://javabetter.cn/string/string-source.html#string-%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},Rl={id:"为什么java字符串是不可变的",tabindex:"-1"},Wl={class:"header-anchor",href:"#为什么java字符串是不可变的"},Ql={id:"深入理解java字符串常量池",tabindex:"-1"},Xl={class:"header-anchor",href:"#深入理解java字符串常量池"},Yl={id:"new-string-二哥-创建了几个对象",tabindex:"-1"},Zl={class:"header-anchor",href:"#new-string-二哥-创建了几个对象"},$l={href:"https://javabetter.cn/string/constant-pool.html#new-string-%E4%BA%8C%E5%93%A5-%E5%88%9B%E5%BB%BA%E4%BA%86%E5%87%A0%E4%B8%AA%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"},hl={id:"字符串常量池的作用",tabindex:"-1"},_l={class:"header-anchor",href:"#字符串常量池的作用"},na={href:"https://javabetter.cn/string/constant-pool.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E4%BD%9C%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},sa={id:"字符串常量池在内存中的什么位置呢",tabindex:"-1"},la={class:"header-anchor",href:"#字符串常量池在内存中的什么位置呢"},aa={href:"https://javabetter.cn/string/constant-pool.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E4%BB%80%E4%B9%88%E4%BD%8D%E7%BD%AE%E5%91%A2",target:"_blank",rel:"noopener noreferrer"},ea={id:"java-7-之前",tabindex:"-1"},ia={class:"header-anchor",href:"#java-7-之前"},ta={href:"https://javabetter.cn/string/constant-pool.html#java-7-%E4%B9%8B%E5%89%8D",target:"_blank",rel:"noopener noreferrer"},ra={id:"java-7",tabindex:"-1"},oa={class:"header-anchor",href:"#java-7"},pa={href:"https://javabetter.cn/string/constant-pool.html#java-7",target:"_blank",rel:"noopener noreferrer"},da={id:"java-8",tabindex:"-1"},ua={class:"header-anchor",href:"#java-8"},ba={href:"https://javabetter.cn/string/constant-pool.html#java-8",target:"_blank",rel:"noopener noreferrer"},va={id:"永久代、方法区、元空间",tabindex:"-1"},ga={class:"header-anchor",href:"#永久代、方法区、元空间"},ma={href:"https://javabetter.cn/string/constant-pool.html#%E6%B0%B8%E4%B9%85%E4%BB%A3%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA%E3%80%81%E5%85%83%E7%A9%BA%E9%97%B4",target:"_blank",rel:"noopener noreferrer"},ya={id:"详解-string-intern-方法",tabindex:"-1"},fa={class:"header-anchor",href:"#详解-string-intern-方法"},ca={id:"聊聊-java-stringbuilder和stringbuffer-两兄弟",tabindex:"-1"},ka={class:"header-anchor",href:"#聊聊-java-stringbuilder和stringbuffer-两兄弟"},Sa={id:"stringbuffer和stringbuilder的区别",tabindex:"-1"},qa={class:"header-anchor",href:"#stringbuffer和stringbuilder的区别"},xa={href:"https://javabetter.cn/string/builder-buffer.html#stringbuffer%E5%92%8Cstringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},ja={id:"stringbuilder的使用",tabindex:"-1"},wa={class:"header-anchor",href:"#stringbuilder的使用"},Ba={href:"https://javabetter.cn/string/builder-buffer.html#stringbuilder%E7%9A%84%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://javabetter.cn/overview/what-is-java.html",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://javabetter.cn/jvm/bytecode.html",target:"_blank",rel:"noopener noreferrer"},Aa={id:"stringbuilder的内部实现",tabindex:"-1"},Ja={class:"header-anchor",href:"#stringbuilder的内部实现"},Ia={href:"https://javabetter.cn/string/builder-buffer.html#stringbuilder%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://javabetter.cn/common-tool/arrays.html",target:"_blank",rel:"noopener noreferrer"},Da={id:"stringbuilder的-reverse-方法",tabindex:"-1"},La={class:"header-anchor",href:"#stringbuilder的-reverse-方法"},Ua={href:"https://javabetter.cn/string/builder-buffer.html#stringbuilder%E7%9A%84-reverse-%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},Fa={id:"小结",tabindex:"-1"},Ma={class:"header-anchor",href:"#小结"},Ta={href:"https://javabetter.cn/string/builder-buffer.html#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"},Pa={id:"字符串相等判断-java中的equals-与-的区别与用法",tabindex:"-1"},Na={class:"header-anchor",href:"#字符串相等判断-java中的equals-与-的区别与用法"},Va={id:"最优雅的java字符串string拼接是哪种方式",tabindex:"-1"},za={class:"header-anchor",href:"#最优雅的java字符串string拼接是哪种方式"},Ha={id:"号操作符的本质",tabindex:"-1"},Ka={class:"header-anchor",href:"#号操作符的本质"},Ga={href:"https://javabetter.cn/string/join.html#%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E6%9C%AC%E8%B4%A8",target:"_blank",rel:"noopener noreferrer"},Ra={id:"为什么要编译为-stringbuilder-append",tabindex:"-1"},Wa={class:"header-anchor",href:"#为什么要编译为-stringbuilder-append"},Qa={href:"https://javabetter.cn/string/join.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BC%96%E8%AF%91%E4%B8%BA-stringbuilder-append",target:"_blank",rel:"noopener noreferrer"},Xa={id:"append方法源码解析",tabindex:"-1"},Ya={class:"header-anchor",href:"#append方法源码解析"},Za={href:"https://javabetter.cn/string/join.html#append%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90",target:"_blank",rel:"noopener noreferrer"},$a={id:"string-concat-拼接字符串",tabindex:"-1"},ha={class:"header-anchor",href:"#string-concat-拼接字符串"},_a={href:"https://javabetter.cn/string/join.html#string-concat-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},ne={id:"string-join-拼接字符串",tabindex:"-1"},se={class:"header-anchor",href:"#string-join-拼接字符串"},le={href:"https://javabetter.cn/string/join.html#string-join-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},ae={id:"stringutils-join-拼接字符串",tabindex:"-1"},ee={class:"header-anchor",href:"#stringutils-join-拼接字符串"},ie={href:"https://javabetter.cn/string/join.html#stringutils-join-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},te={id:"如何在java中拆分字符串-详解string类的split-方法",tabindex:"-1"},re={class:"header-anchor",href:"#如何在java中拆分字符串-详解string类的split-方法"},oe={href:"https://github.com/cdoco/learn-regex-zh",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://github.com/cdoco/common-regex",target:"_blank",rel:"noopener noreferrer"},de={id:"小结-1",tabindex:"-1"},ue={class:"header-anchor",href:"#小结-1"},be={href:"https://javabetter.cn/string/string-source.html#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"};function ve(ge,n){const a=o("font"),r=o("ExternalLinkIcon");return u(),d("div",null,[i("h2",v,[i("a",g,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[0]||(n[0]=[s("1.流程控制语句 ")])),_:1})])])]),i("h3",m,[i("a",y,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[1]||(n[1]=[s("1.1 流程控制语句分类")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[2]||(n[2]=[s("顺序结构")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[3]||(n[3]=[s(" 判断和选择结构(if, switch )")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[4]||(n[4]=[s("循环结构(for, while, do…while)")])),_:1}),i("h3",f,[i("a",c,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[5]||(n[5]=[s("1.2. 顺序结构")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[6]||(n[6]=[s("顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[7]||(n[7]=[s("顺序结构执行流程图：")])),_:1}),i("h3",k,[i("a",S,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[8]||(n[8]=[s("1.3. 判断语句 ：if")])),_:1})])])]),i("h4",q,[i("a",x,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[9]||(n[9]=[s("1.3.1 格式1")])),_:1})])])]),n[1315]||(n[1315]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">格式：</span>
<span class="line"> if (关系表达式) {</span>
<span class="line">     语句体;    </span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[10]||(n[10]=[s("执行流程：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[11]||(n[11]=[s("①首先计算关系表达式的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[12]||(n[12]=[s("②如果关系表达式的值为true就执行语句体")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[13]||(n[13]=[s("③如果关系表达式的值为false就不执行语句体")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[14]||(n[14]=[s("④继续执行后面的语句内容")])),_:1}),i("h4",j,[i("a",w,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[15]||(n[15]=[s("if的注意点：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[16]||(n[16]=[s("1,大括号的开头可以另起一行书可，但是建议可在第一行的末尾")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[17]||(n[17]=[s("2,作语句体中，如果只有一句代码，大括号可以省略不写，个人建议，大括号还是不要省略")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[18]||(n[18]=[s("3,如果对一个布尔类的变量进行判断，不要用 ==号，直接把变量写在小括号里即可")])),_:1}),i("h4",B,[i("a",C,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[19]||(n[19]=[s("1.3.2 if 语句格式2")])),_:1})])])]),n[1316]||(n[1316]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">格式：</span>
<span class="line"> if (关系表达式) {</span>
<span class="line">     语句体1;   </span>
<span class="line"> } else {</span>
<span class="line">     语句体2;   </span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[20]||(n[20]=[s("执行流程：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[21]||(n[21]=[s("①首先计算关系表达式的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[22]||(n[22]=[s("②如果关系表达式的值为true就执行语句体1")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[23]||(n[23]=[s("③如果关系表达式的值为false就执行语句体2")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[24]||(n[24]=[s("④继续执行后面的语句内容")])),_:1}),i("h4",E,[i("a",A,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[25]||(n[25]=[s("1.3.3 if语句格式3")])),_:1})])])]),n[1317]||(n[1317]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">格式：</span>
<span class="line"> if (关系表达式1) {</span>
<span class="line">     语句体1;   </span>
<span class="line"> } else if (关系表达式2) {</span>
<span class="line">     语句体2;   </span>
<span class="line"> } </span>
<span class="line"> …</span>
<span class="line"> else {</span>
<span class="line">     语句体n+1;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[26]||(n[26]=[s("执行流程：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[27]||(n[27]=[s("①首先计算关系表达式1的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[28]||(n[28]=[s("②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[29]||(n[29]=[s("③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[30]||(n[30]=[s("④…")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[31]||(n[31]=[s("⑤如果没有任何关系表达式为true，就执行语句体n+1。")])),_:1}),i("h3",J,[i("a",I,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[32]||(n[32]=[s("1.4 switch 语句")])),_:1})])])]),i("h4",O,[i("a",D,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[33]||(n[33]=[s("1.4.1 格式")])),_:1})])])]),n[1318]||(n[1318]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line"> switch  (表达式) {</span>
<span class="line">      case  1:</span>
<span class="line">         语句体1;</span>
<span class="line">          break ;</span>
<span class="line">      case  2:</span>
<span class="line">         语句体2;</span>
<span class="line">          break ;</span>
<span class="line">     ...</span>
<span class="line">      default :</span>
<span class="line">         语句体n+1;</span>
<span class="line">          break ;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",L,[i("a",U,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[34]||(n[34]=[s("1.4.2 执行流程：")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[35]||(n[35]=[s("首先计算出表达式的值 ")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[36]||(n[36]=[s("其次，和 case 依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到 break 就会结 束。 ")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[37]||(n[37]=[s("最后，如果所有的 case 都和表达式的值不匹配，就会执行 default 语句体部分，然后程序结束掉。 ")])),_:1})])]),i("h4",F,[i("a",M,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[38]||(n[38]=[s("1.4.3 格式说明：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[39]||(n[39]=[s("1.表达式：(将要匹配的值)取值为")])),_:1}),n[1319]||(n[1319]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[40]||(n[40]=[s("byte、short、int、char")])),_:1}),n[1320]||(n[1320]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[41]||(n[41]=[s("。")])),_:1}),n[1321]||(n[1321]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[42]||(n[42]=[s("JDK5")])),_:1}),n[1322]||(n[1322]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[43]||(n[43]=[s("以后可以是")])),_:1}),n[1323]||(n[1323]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[44]||(n[44]=[s("枚举")])),_:1}),n[1324]||(n[1324]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[45]||(n[45]=[s("，J")])),_:1}),n[1325]||(n[1325]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[46]||(n[46]=[s("DK7")])),_:1}),n[1326]||(n[1326]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[47]||(n[47]=[s("以后可以是")])),_:1}),n[1327]||(n[1327]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[48]||(n[48]=[s("Strin")])),_:1}),n[1328]||(n[1328]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[49]||(n[49]=[s("g。")])),_:1}),i("ol",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[50]||(n[50]=[s(" case :后面跟的是要和表达式进行比较的值（被匹配的值）。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[51]||(n[51]=[s(" break :表示中断，结束的意思，用来结束 switch 语句。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[52]||(n[52]=[s(" default :表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[53]||(n[53]=[s(" case 后面的值只能是字面量，不能是变量")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[54]||(n[54]=[s(" case 给出的值不允许重复.")])),_:1})])]),i("h4",T,[i("a",P,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[55]||(n[55]=[s("1.4.3 switch 的扩展知识：")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[56]||(n[56]=[s(" default 的位置和省略情况")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[57]||(n[57]=[s(" default 可以放在任意位置，也可以省略")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[58]||(n[58]=[s(" case 穿透")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[59]||(n[59]=[s("不写 break 会引发 case 穿透现象")])),_:1})]),i("li",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[60]||(n[60]=[s(" switch 在JDK12的新特性")])),_:1})])])]),n[1329]||(n[1329]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int number = 10;</span>
<span class="line">  switch (number) {</span>
<span class="line">      case  1 -&gt; System.out.println(&quot;一&quot;);</span>
<span class="line">      case  2 -&gt; System.out.println(&quot;二&quot;);</span>
<span class="line">      case  3 -&gt; System.out.println(&quot;三&quot;);</span>
<span class="line">      default  -&gt; System.out.println(&quot;其他&quot;);</span>
<span class="line"> }</span>
<span class="line"> /*</span>
<span class="line"> 多个数对应一个执行性语句</span>
<span class="line"> int number = 10;</span>
<span class="line">  switch (number) {</span>
<span class="line">      case  1:</span>
<span class="line">      case  2:</span>
<span class="line">      case  3: System.out.println(&quot;一&quot;);</span>
<span class="line">      case  5:</span>
<span class="line">      case  7: System.out.println(&quot;二&quot;);</span>
<span class="line">      case  9: System.out.println(&quot;三&quot;);</span>
<span class="line">      default : System.out.println(&quot;其他&quot;);</span>
<span class="line"> }</span>
<span class="line"> 变成</span>
<span class="line"> int number = 10;</span>
<span class="line">  switch (number) {</span>
<span class="line">      case  1,2,3 -&gt; System.out.println(&quot;一&quot;);</span>
<span class="line">      case  5,7 -&gt; System.out.println(&quot;二&quot;);</span>
<span class="line">      case  9 -&gt; System.out.println(&quot;三&quot;);</span>
<span class="line">      default  -&gt; System.out.println(&quot;其他&quot;);</span>
<span class="line"> }</span>
<span class="line"> */</span>
<span class="line"> //相当于：</span>
<span class="line">  switch (表达式) {</span>
<span class="line">      case  1:</span>
<span class="line">         语句体1;</span>
<span class="line">          break ;</span>
<span class="line">      case  2:</span>
<span class="line">         语句体2;</span>
<span class="line">          break ;</span>
<span class="line">     ...</span>
<span class="line">      default :</span>
<span class="line">         语句体n+1;</span>
<span class="line">          break ;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[61]||(n[61]=[s(" switch 和if第三种格式各自的使用场景")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[62]||(n[62]=[s("当我们需要对一个范围进行判断的时候，用if的第三种格式")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[63]||(n[63]=[s("当我们把有限个数据列举出来，选择其中一个执行的时候，用 switch 语句")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[64]||(n[64]=[s("比如：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[65]||(n[65]=[s("小明的考试成绩，如果用 switch ，那么需要写100个 case ，太麻烦了，所以用if简单。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[66]||(n[66]=[s("如果是星期，月份，客服电话中0~9的功能选择就可以用 switch ")])),_:1}),i("h4",N,[i("a",V,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[67]||(n[67]=[s("✨")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[68]||(n[68]=[s("练习：休息日和工作日")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[69]||(n[69]=[s("需求：键盘录入星期数，输出工作日、休息日。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[70]||(n[70]=[s("(1-5) 工作日，(6-7)休息日。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[71]||(n[71]=[s("代码示例：")])),_:1}),n[1330]||(n[1330]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//分析：</span>
<span class="line"> //1.键盘录入星期数</span>
<span class="line"> Scanner sc = new Scanner(System.in);</span>
<span class="line"> System.out.println(&quot;请输入星期&quot;);</span>
<span class="line"> int week = sc.nextInt();//3</span>
<span class="line"> //2.利用 switch 进行匹配</span>
<span class="line"> ----------------------------------------------------</span>
<span class="line"> 利用 case 穿透简化代码</span>
<span class="line">  switch  (week){</span>
<span class="line">      case 1:</span>
<span class="line">      case 2:</span>
<span class="line">      case 3:</span>
<span class="line">      case 4:</span>
<span class="line">      case 5:</span>
<span class="line">         System.out.println(&quot;工作日&quot;);</span>
<span class="line">          break ;</span>
<span class="line">      case 6:</span>
<span class="line">      case 7:</span>
<span class="line">         System.out.println(&quot;休息日&quot;);</span>
<span class="line">          break ;</span>
<span class="line">      default:</span>
<span class="line">         System.out.println(&quot;没有这个星期&quot;);</span>
<span class="line">          break ;</span>
<span class="line"> }</span>
<span class="line"> </span>
<span class="line"> //----------------------------------------------------</span>
<span class="line"> //利用JDK12简化代码书写</span>
<span class="line">  switch (week) {</span>
<span class="line">      case  1, 2, 3, 4, 5 -&gt; System.out.println(&quot;工作日&quot;);</span>
<span class="line">      case  6, 7 -&gt; System.out.println(&quot;休息日&quot;);</span>
<span class="line">      default  -&gt; System.out.println(&quot;没有这个星期&quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h2",z,[i("a",H,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[72]||(n[72]=[s("2. 循环结构")])),_:1})])])]),i("h3",K,[i("a",G,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[73]||(n[73]=[s("2.1 for 循环结构 ")])),_:1})])])]),i("h4",R,[i("a",W,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[74]||(n[74]=[s("2.1.1 for循环结构")])),_:1})])])]),n[1331]||(n[1331]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">for (初始化语句;条件判断语句;条件控制语句) {</span>
<span class="line">     循环体语句;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[75]||(n[75]=[s("格式解释：")])),_:1})])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[76]||(n[76]=[s("初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[77]||(n[77]=[s("条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[78]||(n[78]=[s("循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[79]||(n[79]=[s("条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去")])),_:1})])]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[80]||(n[80]=[s("执行流程：")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[81]||(n[81]=[s("①执行初始化语句")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[82]||(n[82]=[s("②执行条件判断语句，看其结果是true还是false")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[83]||(n[83]=[s("如果是false，循环结束")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[84]||(n[84]=[s("如果是true，继续执行")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[85]||(n[85]=[s("③执行循环体语句")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[86]||(n[86]=[s("④执行条件控制语句")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[87]||(n[87]=[s("⑤回到②继续")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[88]||(n[88]=[s("for循环书写技巧：")])),_:1})])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[89]||(n[89]=[s("确定循环的开始条件")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[90]||(n[90]=[s("确定循环的结束条件")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[91]||(n[91]=[s("确定循环要重复执行的代码")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[92]||(n[92]=[s("代码示例：")])),_:1}),n[1332]||(n[1332]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.确定循环的开始条件</span>
<span class="line"> //2.确定循环的结束条件</span>
<span class="line"> //3.确定要重复执行的代码</span>
<span class="line"> </span>
<span class="line"> //需求：打印5次HelloWorld</span>
<span class="line"> //开始条件：1</span>
<span class="line"> //结束条件：5</span>
<span class="line"> //重复代码：打印语句</span>
<span class="line"> </span>
<span class="line"> for (int i = 1; i &lt;= 5; i++) {</span>
<span class="line">     System.out.println(&quot;HelloWorld&quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",Q,[i("a",X,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[93]||(n[93]=[s("2.1.2 求和和统计思想")])),_:1})])])]),i("h4",Y,[i("a",Z,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[94]||(n[94]=[s("for循环练习-求和")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[95]||(n[95]=[s("需求：求1-5之间的数据和，并把求和结果在控制台输出 ")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[96]||(n[96]=[s("示例代码：")])),_:1})])]),n[1333]||(n[1333]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class ForTest02 {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line">         //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span>
<span class="line">         int sum = 0;</span>
<span class="line">         //从1开始到5结束的数据，使用循环结构完成</span>
<span class="line">         for(int i=1; i&lt;=5; i++) {</span>
<span class="line">             //将反复进行的事情写入循环结构内部</span>
<span class="line">              // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span>
<span class="line">             sum = sum + i;</span>
<span class="line">             /*</span>
<span class="line">                 sum += i;   sum = sum + i;</span>
<span class="line">                 第一次：sum = sum + i = 0 + 1 = 1;</span>
<span class="line">                 第二次：sum = sum + i = 1 + 2 = 3;</span>
<span class="line">                 第三次：sum = sum + i = 3 + 3 = 6;</span>
<span class="line">                 第四次：sum = sum + i = 6 + 4 = 10;</span>
<span class="line">                 第五次：sum = sum + i = 10 + 5 = 15;</span>
<span class="line">             */</span>
<span class="line">         }</span>
<span class="line">         //当循环执行完毕时，将最终数据打印出来</span>
<span class="line">         System.out.println(&quot;1-5之间的数据和是：&quot; + sum);</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[97]||(n[97]=[s("本题要点：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[98]||(n[98]=[s("今后遇到的需求中，如果带有求和二字，请立即联想到求和变量")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[99]||(n[99]=[s("求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的")])),_:1})])])])]),i("h3",$,[i("a",h,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[100]||(n[100]=[s("2.2 while循环")])),_:1})])])]),i("h4",_,[i("a",nn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[101]||(n[101]=[s("2.2.1 格式")])),_:1})])])]),n[1334]||(n[1334]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">初始化语句;</span>
<span class="line"> while(条件判断语句){</span>
<span class="line">     循环体;</span>
<span class="line">     条件控制语句;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[102]||(n[102]=[s("练习1：打印5次HelloWorld")])),_:1}),n[1335]||(n[1335]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int i = 1;</span>
<span class="line"> while(i &lt;= 5){</span>
<span class="line">     System.out.println(&quot;HelloWorld&quot;);</span>
<span class="line">     i++;</span>
<span class="line"> }</span>
<span class="line"> System.out.println(i);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",sn,[i("a",ln,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[103]||(n[103]=[s("2.3 do...while循环")])),_:1})])])]),i("h4",an,[i("a",en,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[104]||(n[104]=[s("2.3.1 格式：")])),_:1})])])]),n[1336]||(n[1336]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">初始化语句;</span>
<span class="line"> do{</span>
<span class="line">     循环体;</span>
<span class="line">     条件控制语句;</span>
<span class="line"> }while(条件判断语句);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",tn,[i("a",rn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[105]||(n[105]=[s("2.3.2 特点：先执行，再判断。")])),_:1})])])]),i("h3",on,[i("a",pn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[106]||(n[106]=[s("2.3.3 三种格式的区别：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[107]||(n[107]=[s("1.for和while循环，是先判断，再执行。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[108]||(n[108]=[s("2.do...while是先执行，再判断。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[109]||(n[109]=[s("3.当知道循环次数或者循环范围的时候，用for循环。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[110]||(n[110]=[s("4.当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。")])),_:1}),i("h2",dn,[i("a",un,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[111]||(n[111]=[s("3. 练习题")])),_:1})])])]),i("h3",bn,[i("a",vn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[112]||(n[112]=[s("回文数")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[113]||(n[113]=[s("需求：给你一个整数X。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[114]||(n[114]=[s("如果X是一个回文整数，打印true,否则，返回false。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[115]||(n[115]=[s("解释：回文数是指正序（从左向右）和倒序（从右向左)读都是一样的整数。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[116]||(n[116]=[s("例如，121是回文，而123不是。")])),_:1}),n[1337]||(n[1337]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">import java.util.Scanner;</span>
<span class="line"> </span>
<span class="line"> public class demo {</span>
<span class="line">     public static void main (String[] args) {</span>
<span class="line">         Scanner sc = new Scanner(System.in);</span>
<span class="line">         int x = sc.nextInt();</span>
<span class="line">         int num=0;</span>
<span class="line">         int tmp =x;</span>
<span class="line">         while (x!=0) {</span>
<span class="line">             int y = x%10;</span>
<span class="line">             x /= 10;</span>
<span class="line">             num = num*10 + y;</span>
<span class="line">         }</span>
<span class="line">         System.out.println(num == tmp);</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",gn,[i("a",mn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[117]||(n[117]=[s("求商和余数")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[118]||(n[118]=[s("需求：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[119]||(n[119]=[s("给定两个整数，被除数和除数都是正数，且不超过int的范围")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[120]||(n[120]=[s("将两数相除，")])),_:1}),n[1338]||(n[1338]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[121]||(n[121]=[s("要求不使用乘法、除法和%运算符")])),_:1}),n[1339]||(n[1339]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[122]||(n[122]=[s("，得到商和余数。")])),_:1}),n[1340]||(n[1340]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//求商和余数</span>
<span class="line">         /*</span>
<span class="line">         int a = 100;</span>
<span class="line">         int b = 10;</span>
<span class="line">         100 - 10 == 90</span>
<span class="line">         90 - 10 == 80</span>
<span class="line">         80 - 10 == 70</span>
<span class="line">         .</span>
<span class="line">         .</span>
<span class="line">         .</span>
<span class="line">         10 - 10 = 0</span>
<span class="line">         */</span>
<span class="line">         //被除数</span>
<span class="line">         int dividend = 100;</span>
<span class="line">         //除数</span>
<span class="line">         int divisor = 10;</span>
<span class="line">         int count = 0;</span>
<span class="line">         while(dividend&gt;=divisor) {</span>
<span class="line">             dividend -= divisor;</span>
<span class="line">             count++;</span>
<span class="line">         }</span>
<span class="line">         System.out.println(&quot;商为&quot;+count);</span>
<span class="line">         System.out.println(&quot;余数为&quot;+dividend);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h2",yn,[i("a",fn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[123]||(n[123]=[s("4.循环高级综合练习")])),_:1})])])]),i("h3",cn,[i("a",kn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[124]||(n[124]=[s("4.1 无限循环")])),_:1})])])]),i("h4",Sn,[i("a",qn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[125]||(n[125]=[s("概念：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[126]||(n[126]=[s("又叫死循环。循环一直停不下来。")])),_:1}),i("h4",xn,[i("a",jn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[127]||(n[127]=[s("for格式：")])),_:1})])])]),n[1341]||(n[1341]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">for(;;){</span>
<span class="line">     System.out.println(&quot;循环执行一直在打印内容&quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[128]||(n[128]=[s("解释：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[129]||(n[129]=[s("初始化语句可以空着不写，表示循环之前不定义任何的控制变量。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[130]||(n[130]=[s("条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[131]||(n[131]=[s("条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。")])),_:1}),i("h4",wn,[i("a",Bn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[132]||(n[132]=[s("while格式：")])),_:1})])])]),n[1342]||(n[1342]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">while(true){</span>
<span class="line">     System.out.println(&quot;循环执行一直在打印内容&quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[133]||(n[133]=[s("解释：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[134]||(n[134]=[s("小括号里面就不能省略了，true一定要写出来，否则代码会报错。")])),_:1}),i("h4",Cn,[i("a",En,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[135]||(n[135]=[s("do...while格式：")])),_:1})])])]),n[1343]||(n[1343]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">do{</span>
<span class="line">     System.out.println(&quot;循环执行一直在打印内容&quot;);</span>
<span class="line"> }while(true);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[136]||(n[136]=[s("解释：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[137]||(n[137]=[s("小括号里面就不能省略了，true一定要写出来，否则代码会报错。")])),_:1}),i("h3",An,[i("a",Jn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[138]||(n[138]=[s("无限循环的注意事项：")])),_:1})])])]),i("ul",null,[i("li",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[139]||(n[139]=[s("最为常用的格式：while")])),_:1})])]),i("li",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[140]||(n[140]=[s("无限循环下面不能再写其他代码了，因为永远执行不到。")])),_:1})])])]),i("h3",In,[i("a",On,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[141]||(n[141]=[s("4.2 条件控制语句")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[142]||(n[142]=[s(" break ")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[143]||(n[143]=[s("continue")])),_:1})])]),i("h4",Dn,[i("a",Ln,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[144]||(n[144]=[s("1.break :")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1344]||(n[1344]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[145]||(n[145]=[s("不能单独存在的。可以用在 switch 和循环中，")])),_:1}),n[1345]||(n[1345]=s("****")),l(a,{style:{color:"rgb(0, 0, 0)","background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[146]||(n[146]=[s("表示结束，跳出的意思。")])),_:1}),n[1346]||(n[1346]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[147]||(n[147]=[s("代码示例：")])),_:1}),n[1347]||(n[1347]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.吃1~5号包子</span>
<span class="line"> for (int i = 1; i &lt;= 5; i++) {</span>
<span class="line">     System.out.println(&quot;在吃第&quot; + i + &quot;个包子&quot;);</span>
<span class="line">     //2.吃完第三个的时候就不吃了</span>
<span class="line">     if(i == 3){</span>
<span class="line">          break ;//结束整个循环。</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",Un,[i("a",Fn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[148]||(n[148]=[s("2.continue:")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1348]||(n[1348]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[149]||(n[149]=[s("不能单独存在的。只能存在于循环当中。")])),_:1}),n[1349]||(n[1349]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1350]||(n[1350]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[150]||(n[150]=[s("表示：")])),_:1}),n[1351]||(n[1351]=s("****")),l(a,{style:{color:"rgb(0, 0, 0)","background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[151]||(n[151]=[s("跳过本次循环")])),_:1}),n[1352]||(n[1352]=s("****")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[152]||(n[152]=[s("，继续执行下次循环。")])),_:1}),n[1353]||(n[1353]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[153]||(n[153]=[s("代码示例：")])),_:1}),n[1354]||(n[1354]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.吃1~5号包子</span>
<span class="line"> for (int i = 1; i &lt;= 5; i++) {</span>
<span class="line">     //2.第3个包子有虫子就跳过，继续吃下面的包子</span>
<span class="line">     if(i == 3){</span>
<span class="line">         //跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span>
<span class="line">         continue;</span>
<span class="line">     }</span>
<span class="line">     System.out.println(&quot;在吃第&quot; + i + &quot;个包子&quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",Mn,[i("a",Tn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[154]||(n[154]=[s("3. Random")])),_:1})])])]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[155]||(n[155]=[s("Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。")])),_:1})])]),i("h6",Pn,[i("a",Nn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[156]||(n[156]=[s("使用步骤：")])),_:1})])])]),i("h6",Vn,[i("a",zn,[i("span",null,[l(a,{style:{color:"rgb(119, 119, 119)"}},{default:e(()=>n[157]||(n[157]=[s("导包")])),_:1})])])]),n[1355]||(n[1355]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">import java.util.Random;</span>
<span class="line"> 导包的动作必须出现在类定义的上边。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h6",Hn,[i("a",Kn,[i("span",null,[l(a,{style:{color:"rgb(119, 119, 119)"}},{default:e(()=>n[158]||(n[158]=[s("创建对象")])),_:1})])])]),n[1356]||(n[1356]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Random r = new Random ();</span>
<span class="line"> 上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h6",Gn,[i("a",Rn,[i("span",null,[l(a,{style:{color:"rgb(119, 119, 119)"}},{default:e(()=>n[159]||(n[159]=[s("生成随机数")])),_:1})])])]),n[1357]||(n[1357]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int number = r.nextInt(随机数的范围);</span>
<span class="line"> 上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span>
<span class="line"> 随机数范围的特点：从0开始，不包含指定值。比如：参数为10，生成的范围[0,10)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[160]||(n[160]=[s("求【8，10】的随机数")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[161]||(n[161]=[s("1.这个范围头尾都减去一个值，让这个范围从零开始。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[162]||(n[162]=[s("2.尾巴加一。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[163]||(n[163]=[s("3.最终结果再加上第一步减去的值。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[164]||(n[164]=[s("代码示例：")])),_:1}),n[1358]||(n[1358]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.导包</span>
<span class="line"> import java.util.Random;</span>
<span class="line"> </span>
<span class="line"> public class RandomDemo1 {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line">         //2.创建对象</span>
<span class="line">         Random r = new Random();</span>
<span class="line">         //3.生成随机数</span>
<span class="line">         int number = r.nextInt(100);//包左不包右，包头不包尾</span>
<span class="line">         //0 ~ 99</span>
<span class="line">         System.out.println(number);</span>
<span class="line"> </span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",Wn,[i("a",Qn,[i("span",null,[n[166]||(n[166]=s("4.3 ")),l(a,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[165]||(n[165]=[s("跳出当前的多重嵌套循环 (循环标记)")])),_:1})])])]),l(a,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[167]||(n[167]=[s("在")])),_:1}),l(a,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[168]||(n[168]=[s("Java")])),_:1}),l(a,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[169]||(n[169]=[s("中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使 ")])),_:1}),l(a,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[170]||(n[170]=[s("用带有标号的break 语句，即可跳出外层循环。例如： ")])),_:1}),n[1359]||(n[1359]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    ok<span class="token operator">:</span> </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;,j=&quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">                <span class="token keyword">break</span> ok<span class="token punctuation">;</span> </span>
<span class="line">            <span class="token punctuation">}</span> </span>
<span class="line">         <span class="token punctuation">}</span> </span>
<span class="line">     <span class="token punctuation">}</span> </span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",Xn,[i("a",Yn,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[171]||(n[171]=[s("4.4 猜数字小游戏")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[172]||(n[172]=[s("需求：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[173]||(n[173]=[s("程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[174]||(n[174]=[s("要求：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[175]||(n[175]=[s("使用循环猜，一直猜中为止。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[176]||(n[176]=[s("思路分析：")])),_:1}),i("ol",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[177]||(n[177]=[s("生成一个1-100之间的随机数")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[178]||(n[178]=[s("使用键盘录入去猜出这个数字是多少")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[179]||(n[179]=[s("把反复猜的代码写在循环中")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[180]||(n[180]=[s("代码示例：")])),_:1}),n[1360]||(n[1360]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.生成一个1-100之间的随机数</span>
<span class="line"> Random r = new Random();</span>
<span class="line"> int number = r.nextInt(100) + 1;// 0 ~ 99 + 1 --- 1 ~ 100</span>
<span class="line"> System.out.println(number);</span>
<span class="line"> </span>
<span class="line"> //2.使用键盘录入去猜出这个数字是多少？</span>
<span class="line"> Scanner sc = new Scanner(System.in);</span>
<span class="line"> while(true){</span>
<span class="line">     System.out.println(&quot;请输入一个整数&quot;);</span>
<span class="line">     int guessNumber = sc.nextInt();</span>
<span class="line">     //3.比较</span>
<span class="line">     if(guessNumber &gt; number){</span>
<span class="line">         System.out.println(&quot;您猜的数字大了&quot;);</span>
<span class="line">     }else if(guessNumber &lt; number){</span>
<span class="line">         System.out.println(&quot;您猜的数字小了&quot;);</span>
<span class="line">     }else{</span>
<span class="line">         System.out.println(&quot;恭喜你，猜中了&quot;);</span>
<span class="line">          break ;</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h2",Zn,[i("a",$n,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[181]||(n[181]=[s("5. 数组")])),_:1})])])]),i("h3",hn,[i("a",_n,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[182]||(n[182]=[s("5.1 概念")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[183]||(n[183]=[s("🧨")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[184]||(n[184]=[s("数组指的是一种容器，用来存储同种数据类型的多个值。（在内存中开辟一个空间）但是数组容器在存储数据的时候，需要结合隐式转换考虑。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[185]||(n[185]=[s("比如：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[186]||(n[186]=[s("定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[187]||(n[187]=[s("但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[188]||(n[188]=[s("建议：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[189]||(n[189]=[s("容器的类，和存储的数据类型保持一致。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[190]||(n[190]=[s("举例：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[191]||(n[191]=[s("整数1 2 3 4 56 就可以使用int类型的数组来存储。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[192]||(n[192]=[s("小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[193]||(n[193]=[s('字符串"aaa" "bbb" "ccc" 就可以使用String类型的数组来存储。')])),_:1}),i("h3",ns,[i("a",ss,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[194]||(n[194]=[s("5.2 数组的定义")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[195]||(n[195]=[s("变量的定义：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[196]||(n[196]=[s("数组的定义")])),_:1}),i("h4",ls,[i("a",as,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[197]||(n[197]=[s("格式一：数据类型 [] 数组名")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[198]||(n[198]=[s("比如：int [] array")])),_:1}),i("h4",es,[i("a",is,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[199]||(n[199]=[s("格式二：数据类型 数组名 []")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[200]||(n[200]=[s("比如： int array []")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[201]||(n[201]=[s("详解")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[202]||(n[202]=[s("：")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[203]||(n[203]=[s("数据类型：限定了数组以后能存什么类型的数据。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[204]||(n[204]=[s("方括号：表示现在定义的是一个数组。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[205]||(n[205]=[s("数组名：就是一个名字而已，方便以后使用。")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[206]||(n[206]=[s("注意点")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[207]||(n[207]=[s("：")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1361]||(n[1361]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[208]||(n[208]=[s("方法括号跟数组名，谁写在前面，谁写在后面都是一样的。")])),_:1}),n[1362]||(n[1362]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1363]||(n[1363]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[209]||(n[209]=[s("平时习惯性使用第一种方式。")])),_:1}),n[1364]||(n[1364]=s("**")),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[210]||(n[210]=[s("格式三")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[211]||(n[211]=[s(" 二维数组")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[212]||(n[212]=[s("int ")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[213]||(n[213]=[s("[")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[214]||(n[214]=[s("][] arrayp; ")])),_:1}),i("h3",ts,[i("a",rs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[215]||(n[215]=[s("5.3 数组的静态初始化")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[216]||(n[216]=[s("初始化：就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程.")])),_:1}),i("h5",os,[i("a",ps,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[217]||(n[217]=[s("完整格式：数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4...};")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[218]||(n[218]=[s("比如：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[219]||(n[219]=[s("int[] arr = new int[]{11,22,33};")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[220]||(n[220]=[s("double[] arr = new double[]{1.1,1.2,1.3};")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[221]||(n[221]=[s("格式详解")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[222]||(n[222]=[s("：")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[223]||(n[223]=[s("数据类型：限定了数组以后能存什么类型的数据。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[224]||(n[224]=[s("方括号：表示现在定义的是一个数组。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[225]||(n[225]=[s("数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[226]||(n[226]=[s("arr namesArr")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[227]||(n[227]=[s("new：就是给数组在内存中开辟了一个空间。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[228]||(n[228]=[s("数据类型：限定了数组以后能存什么类型的数据。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[229]||(n[229]=[s(" 前面和后面的数据类型一定要保持一致。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[230]||(n[230]=[s(" int[] arr = new double[]{11,22,33}; //错误写法")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[231]||(n[231]=[s("方括号：表示现在定义的是一个数组。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[232]||(n[232]=[s("大括号：表示数组里面的元素。元素也就是存入到数组中的数据。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[233]||(n[233]=[s("多个元素之间，一定要用逗号隔开。")])),_:1}),i("h3",ds,[i("a",us,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[234]||(n[234]=[s("注意点：")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[235]||(n[235]=[s("等号前后的数据类型必须保持一致。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[236]||(n[236]=[s("数组一旦创建之后，长度不能发生变化。")])),_:1})])]),i("h3",bs,[i("a",vs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[237]||(n[237]=[s("简化格式:")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),n[1365]||(n[1365]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[238]||(n[238]=[s("数据类型[] 数组名 = {元素1，元素2，元素3，元素4...};")])),_:1}),n[1366]||(n[1366]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[239]||(n[239]=[s("比如：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[240]||(n[240]=[s("int[] array = {1,2,3,4,5};")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[241]||(n[241]=[s("double[] array = {1.1,1.2,1.3};")])),_:1}),i("h3",gs,[i("a",ms,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[242]||(n[242]=[s("5.4 地址值 ")])),_:1})])])]),n[1367]||(n[1367]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int[] arr = {1,2,3,4,5};</span>
<span class="line"> System.out.println(arr);//[I@6d03e736</span>
<span class="line"> </span>
<span class="line"> double[] arr2 = {1.1,2.2,3.3};</span>
<span class="line"> System.out.println(arr2);//[D@568db2f2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[243]||(n[243]=[s("打印数组的时候，实际出现的是数组的地址值。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[244]||(n[244]=[s("数组的地址值：就表示数组在内存中的位置。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[245]||(n[245]=[s("以[I@6d03e736为例：")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[246]||(n[246]=[s("[")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[247]||(n[247]=[s(" ：表示现在打印的是一个数组。")])),_:1})]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[248]||(n[248]=[s("I")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[249]||(n[249]=[s("：表示现在打印的数组是int类型的。")])),_:1})]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[250]||(n[250]=[s("@")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[251]||(n[251]=[s("：仅仅是一个间隔符号而已。")])),_:1})]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[252]||(n[252]=[s("6d03e736")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[253]||(n[253]=[s("：就是数组在内存中真正的地址值。（")])),_:1}),i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[254]||(n[254]=[s("十六进制的")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[255]||(n[255]=[s("）")])),_:1})]),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[256]||(n[256]=[s("但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[257]||(n[257]=[s("地址值对于我们来京，作用不大，简单了解。")])),_:1}),i("h3",ys,[i("a",fs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[258]||(n[258]=[s("5.5 元素访问")])),_:1})])])]),i("h4",cs,[i("a",ks,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[259]||(n[259]=[s("5.5.1 格式 数组名[索引];")])),_:1})])])]),i("h4",Ss,[i("a",qs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[260]||(n[260]=[s("5.5.2 作用：")])),_:1})])])]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[261]||(n[261]=[s("获取数组中对应索引上的值")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[262]||(n[262]=[s("修改数组中对应索引上的值")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[263]||(n[263]=[s("一旦修改之后，原来的值就会被覆盖了。")])),_:1})])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[264]||(n[264]=[s("代码示例：")])),_:1}),n[1368]||(n[1368]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class ArrDemo2 {</span>
<span class="line">     /*</span>
<span class="line"> </span>
<span class="line">         数组中元素访问的格式：</span>
<span class="line">                 数组名[索引];</span>
<span class="line"> </span>
<span class="line">          作用：</span>
<span class="line">             1.获取指定索引上对应的元素</span>
<span class="line">             2.修改指定索引上对应的元素</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">     */</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line">        int[] arr = {1,2,3,4,5};</span>
<span class="line">        //需求1：获取arr数组中，3索引上的值</span>
<span class="line">         int number = arr[3];</span>
<span class="line">         System.out.println(number);</span>
<span class="line">         System.out.println(arr[3]);</span>
<span class="line"> </span>
<span class="line">        //需求2：将arr数组中，3索引上的值修改为10</span>
<span class="line">             arr[3] = 10;</span>
<span class="line">         System.out.println(&quot;修改之后为:&quot; + arr[3]);</span>
<span class="line"> </span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",xs,[i("a",js,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[265]||(n[265]=[s("5.6 索引")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[266]||(n[266]=[s("也叫角标、下标 。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[267]||(n[267]=[s("就是数组容器中每一个小格子对应的编号。")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[268]||(n[268]=[s("索引的特点")])),_:1})]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[269]||(n[269]=[s("：")])),_:1})]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[270]||(n[270]=[s("索引一定是从0开始的。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[271]||(n[271]=[s("连续不间断。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[272]||(n[272]=[s("逐个+1增长。")])),_:1})])]),i("h3",ws,[i("a",Bs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[273]||(n[273]=[s("5.7 数组遍历")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[274]||(n[274]=[s("遍历：就是把数组里面所有的内容一个一个全部取出来。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[275]||(n[275]=[s("数组的长度：数组名.length;")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[276]||(n[276]=[s("通用代码：")])),_:1}),n[1369]||(n[1369]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">for(int i = 0; i &lt; arr.length; i++){</span>
<span class="line">     //在循环的过程中，i依次表示数组中的每一个索引</span>
<span class="line">     sout(arr[i]);//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",Cs,[i("a",Es,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[277]||(n[277]=[s("5.8 数组的动态初始化")])),_:1})])])]),i("h4",As,[i("a",Js,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[278]||(n[278]=[s("5.8.1 格式：数据类型[] 数组名 = new 数据类型[数组的长度];")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[279]||(n[279]=[s("举例：")])),_:1}),n[1370]||(n[1370]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.定义一个数组，存3个人的年龄，年龄未知</span>
<span class="line"> int[] agesArr = new int[3];</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> //2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span>
<span class="line"> int[] scoresArr = new int[10];</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",Is,[i("a",Os,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[280]||(n[280]=[s("5.8.2 数组的默认初始化值：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[281]||(n[281]=[s("整数类型：0")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[282]||(n[282]=[s("小数类型：0.0")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[283]||(n[283]=[s("布尔类型：false")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[284]||(n[284]=[s("字符类型：'\\u0000'（空格）")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[285]||(n[285]=[s("引用类型：null")])),_:1}),i("h3",Ds,[i("a",Ls,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[286]||(n[286]=[s("5.9 数组两种初始化")])),_:1})])])]),i("h4",Us,[i("a",Fs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[287]||(n[287]=[s("5.9.1 区别")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[288]||(n[288]=[s("静态初始化：int[] arr = {1,2,3,4,5};")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[289]||(n[289]=[s("动态初始化：int[] arr = new int[3];")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[290]||(n[290]=[s("静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[291]||(n[291]=[s("动态初始化：手动指定数组长度，由系统给出默认初始化值。")])),_:1}),i("h4",Ms,[i("a",Ts,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[292]||(n[292]=[s("5.9.1使用场景：")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[293]||(n[293]=[s("只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[294]||(n[294]=[s("已经明确了要操作的所有数据，推荐使用静态初始化。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[295]||(n[295]=[s("举例：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[296]||(n[296]=[s("使用数组来存储键盘录入的5个整数。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[297]||(n[297]=[s("int[] arr = new int[5];")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[298]||(n[298]=[s("将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[299]||(n[299]=[s("int[] arr = new int[5];")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[300]||(n[300]=[s("arr[0] = 66;")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[301]||(n[301]=[s("arr[1] = 77;")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[302]||(n[302]=[s("... 虽然可以实现，但是太麻烦了。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[303]||(n[303]=[s("建议使用静态初始化：int[] arr = {66,77,88,99,100};")])),_:1})])]),i("h3",Ps,[i("a",Ns,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[304]||(n[304]=[s("5.10 数组常见问题")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[305]||(n[305]=[s("当访问了数组中不存在的索引，就会引发索引越界异常。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[306]||(n[306]=[s("避免：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[307]||(n[307]=[s("针对于任意一个数组，索引的范围：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[308]||(n[308]=[s("最小索引：0")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[309]||(n[309]=[s("最大索引：数组的长度 - 1")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[310]||(n[310]=[s(" 数组名.length - 1")])),_:1}),n[1371]||(n[1371]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class ArrDemo6 {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line">        int[] arr = {1,2,3,4,5,5,5,5,5};</span>
<span class="line">         //用索引来访问数组中的元素</span>
<span class="line">         System.out.println(arr[1]);</span>
<span class="line">         System.out.println(arr[10]);//ArrayIndexOutOfBoundsException</span>
<span class="line"> </span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h3",Vs,[i("a",zs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[311]||(n[311]=[s("5.11 数组的内存图")])),_:1})])])]),i("h4",Hs,[i("a",Ks,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[312]||(n[312]=[s("5.11.1 java内存分配")])),_:1})])])]),n[1372]||(n[1372]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678269874331-59773311-e4e4-4dd4-9cf7-098e60080a0a.png"},null,-1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[313]||(n[313]=[s("其中JVM 一开始，堆和方法区连在一起，一块的空间")])),_:1}),n[1373]||(n[1373]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678269884802-e1eb8368-c547-4108-be11-8b694cc89927.png"},null,-1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[314]||(n[314]=[s("然后JDK8就修改了 ，补充了元空间")])),_:1}),n[1374]||(n[1374]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678269894447-c848b30f-3097-4c41-8479-455a76dd1abc.png"},null,-1)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[315]||(n[315]=[s("●")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[316]||(n[316]=[s("🎈")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[317]||(n[317]=[s("栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[318]||(n[318]=[s("●")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[319]||(n[319]=[s("🎆")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[320]||(n[320]=[s("堆：存储对象或者数组，")])),_:1}),n[1375]||(n[1375]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[321]||(n[321]=[s("new来创建的，都存储在堆内存")])),_:1}),n[1376]||(n[1376]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[322]||(n[322]=[s("，会有地址值，表示位置")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[323]||(n[323]=[s("●方法区：存储可以运行的class文件")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[324]||(n[324]=[s("●本地方法栈：JVM在使用操作系统功能的时候使用，和我们开发无关")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[325]||(n[325]=[s("●寄存器：给CPU使用，和我们开发无关")])),_:1}),n[1377]||(n[1377]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678269910500-57e8d699-61d1-4f90-99f5-10f1cbe8f3d4.png"},null,-1)),i("h5",Gs,[i("a",Rs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[326]||(n[326]=[s("两个数组指向同一个空间的内存图")])),_:1})])])]),n[1378]||(n[1378]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int[]arr1={11,22};</span>
<span class="line"> int[]arr2 arr1;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h4><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678269926851-77554c91-3fbd-4956-aa02-7e495009cf9c.png">`,3)),i("h3",Ws,[i("a",Qs,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[327]||(n[327]=[s("5.12 练习题")])),_:1})])])]),i("h4",Xs,[i("a",Ys,[i("span",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[328]||(n[328]=[s("练习7：打乱数据 ")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[329]||(n[329]=[s("需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[330]||(n[330]=[s("代码示例：")])),_:1}),n[1379]||(n[1379]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//1.定义数组存储1~5</span>
<span class="line"> int[] arr = {1, 2, 3, 4, 5};</span>
<span class="line"> //2.循环遍历数组，从0索引开始打乱数据的顺序</span>
<span class="line"> Random r = new Random();</span>
<span class="line"> for (int i = 0; i &lt; arr.length; i++) {</span>
<span class="line">     //生成一个随机索引</span>
<span class="line">     int randomIndex = r.nextInt(arr.length);</span>
<span class="line">     //拿着随机索引指向的元素 跟 i 指向的元素进行交换</span>
<span class="line">     int temp = arr[i];</span>
<span class="line">     arr[i] = arr[randomIndex];</span>
<span class="line">     arr[randomIndex] = temp;</span>
<span class="line"> }</span>
<span class="line"> //当循环结束之后，那么数组中所有的数据已经打乱顺序了</span>
<span class="line"> for (int i = 0; i &lt; arr.length; i++) {</span>
<span class="line">     System.out.print(arr[i] + &quot; &quot;);</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-string类" tabindex="-1"><a class="header-anchor" href="#_6-string类"><span>6  String类</span></a></h2><h3 id="_6-1-string类概述" tabindex="-1"><a class="header-anchor" href="#_6-1-string类概述"><span>6.1 String类概述</span></a></h3><pre><code>String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，**Java 程序中所有的双引号字符串，都是 String 类的对象**。String 类在 java.lang 包下，所以使用的时候不需要导包！
</code></pre><h3 id="_6-2-string类的特点" tabindex="-1"><a class="header-anchor" href="#_6-2-string类的特点"><span>6.2 String类的特点</span></a></h3><ul><li><strong>字符串不可变，它们的值（字符串）在创建后不能被更改</strong>，但是可以赋值新的字符串</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;尼古拉斯，阿玮&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> schoolName<span class="token operator">=</span><span class="token string">&quot;黑马程序员&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name schoolName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//产生了三个字符串  </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;尼古拉斯，阿玮&quot;</span><span class="token punctuation">;</span></span>
<span class="line">name<span class="token operator">=</span><span class="token string">&quot;三连加投币，阿玮&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//两个</span></span>
<span class="line"><span class="token comment">//此处并没有改变原本字符串值，而是将这个String类名指代了</span></span>
<span class="line"><span class="token comment">//一个新的字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>虽然 String 的值是不可变的，但是它们可以被共享</strong></li><li><strong>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</strong></li></ul><h3 id="_6-3-创建-string-类对象的两种方式" tabindex="-1"><a class="header-anchor" href="#_6-3-创建-string-类对象的两种方式"><span>6.3 创建 String 类对象的两种方式</span></a></h3><h4 id="_1-直接赋值-开发中常使用" tabindex="-1"><a class="header-anchor" href="#_1-直接赋值-开发中常使用"><span>1.直接赋值(开发中常使用)</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;尼古拉斯~为&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-new" tabindex="-1"><a class="header-anchor" href="#_2-new"><span>2.new</span></a></h4><p>2.1 空参构造：可以获取一空白的字符串对象</p><p>2.2 传递一个字符串，根据传递的字符串内容在创建一个新的字符串对象</p><p>需求：修改字符串内容，abc  --&gt; &quot;Qbc&quot;;<br> abc --&gt;  {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;}  --&gt;  {&#39;Q&#39;,&#39;b&#39;,&#39;c&#39;} --&gt; &quot;Qbc&quot;</p><p>2.3 传递一个字节数组，根据字节数组的内容再创建一个新的字符串对象<br> 应用场景：以后网络中传输的数据 其实都是字节信息，<br> 我们一般要把字节信息进行转换，转成字符串，</p><ul><li>示例代码</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.使用直接赋值的方法获取一个字符串对象</span></span>
<span class="line">        <span class="token class-name">String</span> s1 <span class="token operator">=</span>  <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.使用new的方式来获取一个字符串对象</span></span>
<span class="line">        <span class="token comment">//空参构造：可以获取一盒空白的字符串对象</span></span>
<span class="line">        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//传递一个字符串，根据传递的字符串内容在创建一个新的字符串对象</span></span>
<span class="line">        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//传递一个字符数组，根据字符数组的内容创建一个新的字符串对象</span></span>
<span class="line">        <span class="token comment">//需求：修改字符串内容，abc  --&gt; &quot;Qbc&quot;;</span></span>
<span class="line">        <span class="token comment">//abc --&gt;  {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;}  --&gt;  {&#39;Q&#39;,&#39;b&#39;,&#39;c&#39;} --&gt; &quot;Qbc&quot;</span></span>
<span class="line">        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token operator">+</span><span class="token char">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//传递一个字节数组，根据字节数组的内容再创建一个新的字符串对象</span></span>
<span class="line">        <span class="token comment">//应用场景：以后网络中传输的数据 其实都是字节信息，</span></span>
<span class="line">        <span class="token comment">//我们一般要把字节信息进行转换，转成字符串，</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcd</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)),i("table",null,[n[337]||(n[337]=i("thead",null,[i("tr",null,[i("th",{style:{"text-align":"center"}},"方法名"),i("th",{style:{"text-align":"center"}},"说明")])],-1)),i("tbody",null,[n[333]||(n[333]=i("tr",null,[i("td",{style:{"text-align":"center"}},"public   String()"),i("td",{style:{"text-align":"center"}},"创建一个空白字符串对象，不含有任何内容")],-1)),n[334]||(n[334]=i("tr",null,[i("td",{style:{"text-align":"center"}},"public   String(char[] chs)"),i("td",{style:{"text-align":"center"}},"根据字符数组的内容，来创建字符串对象")],-1)),n[335]||(n[335]=i("tr",null,[i("td",{style:{"text-align":"center"}},"public   String(byte[] bys)"),i("td",{style:{"text-align":"center"}},"根据字节数组的内容，来创建字符串对象")],-1)),n[336]||(n[336]=i("tr",null,[i("td",{style:{"text-align":"center"}},'String s = "abc";'),i("td",{style:{"text-align":"center"}},"直接赋值的方式创建字符串对象，内容就是abc")],-1)),i("tr",null,[i("td",Zs,[l(a,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 241, 236)"}},{default:e(()=>n[331]||(n[331]=[s("public String(char[]value,int offset,int count)")])),_:1})]),i("td",$s,[l(a,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(243, 241, 236)"}},{default:e(()=>n[332]||(n[332]=[s("将一个指定范围的字符数组变为字符串")])),_:1})])])])]),n[1380]||(n[1380]=t(`<h3 id="_6-4-创建字符串对象两种方式的区别" tabindex="-1"><a class="header-anchor" href="#_6-4-创建字符串对象两种方式的区别"><span>6.4 创建字符串对象两种方式的区别</span></a></h3><ul><li>通过构造方法创建<br> 通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</li><li>直接赋值方式创建<br> 以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</li></ul><p><strong>java内存模型:</strong></p><p>StringTable(串池)   在JDK7开始，从方法去挪到了堆内存</p><p>方法区：字节码文件临时存储（.class)</p><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270114293-b16a173b-0e9e-4e72-88e5-dc19b5c29c7a.png"><p><strong>当使用双引号直接赋值时，系统会检查该字符串在串池中是否存在。</strong><br><strong>不存在：创建新的</strong><br><strong>存在：复用</strong></p><h3 id="_6-5-java的常用方法-比较" tabindex="-1"><a class="header-anchor" href="#_6-5-java的常用方法-比较"><span>6.5 Java的常用方法（比较）</span></a></h3><h4 id="_6-5-1-比的究竟是什么" tabindex="-1"><a class="header-anchor" href="#_6-5-1-比的究竟是什么"><span>6.5.1 == 比的究竟是什么</span></a></h4><p><strong>基本数据类型比较的是数据值</strong></p><p><strong>引用数据类型比较的是地址值</strong></p><p>示例</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//引用数据类型</span></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">=</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;ab0c&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">=</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录堆里面的地址值</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span><span class="token comment">//记录串池中的地址值</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">=</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token operator">+</span><span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str5 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[338]||(n[338]=[s("字符串字面量拼接操作是在Java编译器编译期间执行，直接将拼接的这个常量放入字符串池. ")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[339]||(n[339]=[s("字符串引用的+运算是在Java运行期间执行的，会被转为StringBuilder,并且拼接。")])),_:1}),n[1381]||(n[1381]=s("`")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[340]||(n[340]=[s("String str4=(new StringBuilder()).append(str1).append(str2).toString()")])),_:1}),n[1382]||(n[1382]=s("`")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[341]||(n[341]=[s("字符串连接之后的对象在堆空间，不会自动进入常量池。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[342]||(n[342]=[s("intern( ) 方法手动将字符串加入常量池中，首先查询常量池中是否有字符串存在，")])),_:1}),n[1383]||(n[1383]=s("**")),l(a,{style:{color:"rgb(219, 63, 30)"}},{default:e(()=>n[343]||(n[343]=[s("如果存在，则返回常量池中的引用")])),_:1}),n[1384]||(n[1384]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[344]||(n[344]=[s("，")])),_:1}),n[1385]||(n[1385]=s("**")),l(a,{style:{color:"rgb(219, 63, 30)"}},{default:e(()=>n[345]||(n[345]=[s("当字符串常量池中找不到对应的字符串时，而只是生成一个对该字符串的引用在字符串常量池。")])),_:1}),n[1386]||(n[1386]=t(`**<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token class-name">String</span> str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span></span>
<span class="line">str3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></span>
<span class="line">        </span>
<span class="line">        </span>
<span class="line"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span></span>
<span class="line">str3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false   </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-2-字符串比较" tabindex="-1"><a class="header-anchor" href="#_6-5-2-字符串比较"><span>6.5.2 字符串比较</span></a></h4><pre><code>1.boolean equals方法（要比较的字符串）

2.boolean equalsIgnoreCase（要比较的字符串）忽视大小写的比较 **（只能是英文状态下 a A)**
</code></pre>`,4)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[346]||(n[346]=[s("3.public int compareTo(String str); 返回参与比较的前后两个字符串的ascii码的差值，如果两个字符串首字母不同，则该方法返回首字母的ascii码的差值，即参与比较的两个字符串如果首字符相同，则比较下一个字符，直到有不同的为止，返回该不同的字符的ascii码差值；如果两个字符串不一样长，可以参与比较的字符又完全一样，则返回两个字符串的长度差值")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(64, 224, 208)"}},{default:e(()=>n[347]||(n[347]=[s("返回为正数表示a1>a2, 返回为负数表示a1<a2, 返回为0表示a1==a2")])),_:1})])]),i("h6",hs,[i("a",_s,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[348]||(n[348]=[s("字符串.equals(String变量)")])),_:1})])])]),n[1387]||(n[1387]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1716091720817-fbec8a98-5c4d-43b2-a634-bb280ebf5b75.png"},null,-1)),n[1388]||(n[1388]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1716091731578-bc687ab1-b0ac-42d0-a5e0-bd7ea8f4b890.png"},null,-1)),i("p",null,[n[350]||(n[350]=s("拓展：")),l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[349]||(n[349]=[s("String str1 = sc.next();")])),_:1})]),n[1389]||(n[1389]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo3</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//1.假设我现在键盘录入一个abc</span></span>
<span class="line">	<span class="token class-name">Scanner</span> sc <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串&quot;</span><span class="token punctuation">)</span>；</span>
<span class="line">	<span class="token class-name">String</span> str1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span></span>
<span class="line">	<span class="token operator">/</span><span class="token number">2.</span>代码中再定义一个字符中abc</span>
<span class="line">	<span class="token class-name">String</span> str2 <span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//3.用==比较，这两者能一样吗？</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为是sc.next（） 是new出来的</p><p><strong>以后只要想比较字符串的内容，就必须要用String里面的方法</strong></p><h4 id="_6-5-3-字符串子串" tabindex="-1"><a class="header-anchor" href="#_6-5-3-字符串子串"><span>6.5.3 字符串子串</span></a></h4>`,4)),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[351]||(n[351]=[s("String substring(int beginIndex,int endIndex) //截取")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[352]||(n[352]=[s("//注意点：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[353]||(n[353]=[s("// 1.包头不包尾，包左不包右 [ )")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[354]||(n[354]=[s("// 2.只有返回值才是截取的小串")])),_:1}),n[1390]||(n[1390]=i("h4",{id:"_6-5-4-转换",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#_6-5-4-转换"},[i("span",null,"6.5.4 转换")])],-1)),i("h3",nl,[i("a",sl,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[355]||(n[355]=[s("6.6 字符串子串")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[356]||(n[356]=[s("String substring(int beginIndex,int endIndex) //截取")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[357]||(n[357]=[s("//注意点：")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[358]||(n[358]=[s("// 1.包头不包尾，包左不包右 [ )")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[359]||(n[359]=[s("// 2.只有返回值才是截取的小串")])),_:1}),i("h3",ll,[i("a",al,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[360]||(n[360]=[s("6.7 字符串转字符数组、byte数组")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[361]||(n[361]=[s("public char[] toCharArray（） 将字符串变为字符数组")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[362]||(n[362]=[s("public byte[] getBytes（） 将一个字符串变为byte数组")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[363]||(n[363]=[s("str.toCharArray（）")])),_:1}),i("h3",el,[i("a",il,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[364]||(n[364]=[s("6.8 检索字符串")])),_:1})])])]),i("h5",tl,[i("a",rl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[365]||(n[365]=[s("public int indexOf(String str)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[366]||(n[366]=[s("返回字符串sr第一次出现的位置，找不到返回-1。")])),_:1}),i("h5",ol,[i("a",pl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[367]||(n[367]=[s("public int indexOf(String str,int fromIndex)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[368]||(n[368]=[s("返回从fromIndex开始字符串str出现的位置，找不到")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[369]||(n[369]=[s("返回-1。")])),_:1}),i("h5",dl,[i("a",ul,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[370]||(n[370]=[s("public boolean contains(String s)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[371]||(n[371]=[s("当此字符串包含指定的字符串时，返回true。")])),_:1}),i("h5",bl,[i("a",vl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[372]||(n[372]=[s("public char charAt(int index)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[373]||(n[373]=[s("返回字符串中index位置(0~length-1)上的字符。")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[374]||(n[374]=[s("String.valueOf() ")])),_:1}),n[1391]||(n[1391]=s("**")),l(a,{style:{color:"rgb(64, 224, 208)"}},{default:e(()=>n[375]||(n[375]=[s("基本数据型态转换成 String 的 static 方法")])),_:1}),n[1392]||(n[1392]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[376]||(n[376]=[s(",数组对象都可以")])),_:1}),i("h3",gl,[i("a",ml,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[377]||(n[377]=[s("6.9 字符串拆分")])),_:1})])])]),i("h5",yl,[i("a",fl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[378]||(n[378]=[s("public String split(String regex)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[379]||(n[379]=[s("按照指定字符串（正则表达式）拆分")])),_:1}),i("h3",cl,[i("a",kl,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[380]||(n[380]=[s("6.10 修改字符串")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[381]||(n[381]=[s("String对象本身是不能改变的，修改字符串的方法")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[382]||(n[382]=[s("有多种，但都将构造一个完成修改的字符串的副本。")])),_:1}),n[1393]||(n[1393]=i("p",null,"public String concat(String str)",-1)),l(a,{style:{color:"rgb(51, 51, 51)"}}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[383]||(n[383]=[s("该方法把参数字符串连接到当前字符串的尾部，并返回这个连接而成的字符串，但当前字符串本身不改变。")])),_:1}),i("h3",Sl,[i("a",ql,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[384]||(n[384]=[s("6.11 ")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[385]||(n[385]=[s("public String replaceAll(String regex,String replacement)")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[386]||(n[386]=[s("把字符串中所有的regex子串替换为replacement子串")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[387]||(n[387]=[s("public String replaceFirst(String regex,String replacement)")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[388]||(n[388]=[s("把字符串中第一个regex子串替换为replacement-子串")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[389]||(n[389]=[s("public String toLowerCase( )")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[390]||(n[390]=[s("把字符串中所有字符变小写")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[391]||(n[391]=[s("public String toUpperCase( )")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[392]||(n[392]=[s("把字符串中所有字符变大写")])),_:1}),n[1394]||(n[1394]=s("**")),l(a,{style:{color:"rgb(219, 63, 30)"}},{default:e(()=>n[393]||(n[393]=[s("public String trim()")])),_:1}),n[1395]||(n[1395]=s("**")),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[394]||(n[394]=[s("忽略字符串的前导空白和尾部空白。trim方法在处理用户输入命令时十分有用。")])),_:1}),i("h3",xl,[i("a",jl,[i("span",null,[l(a,{style:{color:"rgb(26, 143, 55)"}},{default:e(()=>n[395]||(n[395]=[s("6.12 其他方法")])),_:1})])])]),i("h5",wl,[i("a",Bl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[396]||(n[396]=[s("public int length()")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[397]||(n[397]=[s("求字符串常量的长度")])),_:1}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[398]||(n[398]=[s("注意：获取数组的长度是利用length属性，获取字符串的长度是利用length()方法")])),_:1}),i("h5",Cl,[i("a",El,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[399]||(n[399]=[s("public boolean startsWith(String prefix)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[400]||(n[400]=[s("判断是否以指定的字符串开头")])),_:1}),i("h5",Al,[i("a",Jl,[i("span",null,[l(a,{style:{color:"rgb(135, 206, 250)"}},{default:e(()=>n[401]||(n[401]=[s("public boolean endWith(String suffix)")])),_:1})])])]),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[402]||(n[402]=[s("判断是否以指定的字符串结尾")])),_:1}),n[1396]||(n[1396]=t(`<p>compareTo()</p><h3 id="_6-13-练习题" tabindex="-1"><a class="header-anchor" href="#_6-13-练习题"><span>6.13 练习题</span></a></h3><h4 id="遍历字符串" tabindex="-1"><a class="header-anchor" href="#遍历字符串"><span>遍历字符串</span></a></h4><p>需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">:</span>根据索引返回字符</span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>返回此字符串的长度</span>
<span class="line">数组的长度：数组名<span class="token punctuation">.</span>length</span>
<span class="line">字符串的长度：字符串对象<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//遍历字符串</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>  str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="金额转换" tabindex="-1"><a class="header-anchor" href="#金额转换"><span>金额转换</span></a></h4><p>案例需求</p><pre><code>把2135变成：零佰零拾零万贰仟壹佰叁拾伍元

把789变成：零佰零拾零万零仟柒佰捌拾玖元
</code></pre><p><strong>需要注意的是</strong></p><blockquote><p>moneyStr = capitalNumber + moneyStr;<br> //第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;<br> //第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</p><p>moneyStr =  moneyStr  + capitalNumber;</p><p>会增加步骤，得到的字符串需再反转一次</p></blockquote><p>代码实现</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>stringdemo</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo9</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.键盘录入一个金额</span></span>
<span class="line">        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> money<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请录入一个金额&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            money <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> money <span class="token operator">&lt;=</span> <span class="token number">9999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;金额无效&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//定义一个变量用来表示钱的大写</span></span>
<span class="line">        <span class="token class-name">String</span> moneyStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.得到money里面的每一位数字,再转成中文</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//2135</span></span>
<span class="line">            <span class="token comment">//从右往左获取数据，因为右侧是数据的个位</span></span>
<span class="line">            <span class="token keyword">int</span> ge <span class="token operator">=</span> money <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> capitalNumber <span class="token operator">=</span> <span class="token function">getCapitalNumber</span><span class="token punctuation">(</span>ge<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//把转换之后的大写拼接到moneyStr当中</span></span>
<span class="line">            moneyStr <span class="token operator">=</span> capitalNumber <span class="token operator">+</span> moneyStr<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;</span></span>
<span class="line">            <span class="token comment">//第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</span></span>
<span class="line">            <span class="token comment">//去掉刚刚获取的数据</span></span>
<span class="line">            money <span class="token operator">=</span> money <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.在前面补0，补齐7位</span></span>
<span class="line">        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">-</span> moneyStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            moneyStr <span class="token operator">=</span> <span class="token string">&quot;零&quot;</span> <span class="token operator">+</span> moneyStr<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>moneyStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//零零零贰壹叁伍</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4.插入单位</span></span>
<span class="line">        <span class="token comment">//定义一个数组表示单位</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;佰&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;拾&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;万&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;仟&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;佰&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;拾&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;元&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//               零    零   零   贰   壹   叁   伍</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//遍历moneyStr，依次得到 零    零   零   贰   壹   叁   伍</span></span>
<span class="line">        <span class="token comment">//然后把arr的单位插入进去</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> moneyStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">char</span> c <span class="token operator">=</span> moneyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//把大写数字和单位拼接到result当中</span></span>
<span class="line">            result <span class="token operator">=</span> result <span class="token operator">+</span> c <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//5.打印最终结果</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义一个方法把数字变成大写的中文</span></span>
<span class="line">    <span class="token comment">//1 -- 壹</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCapitalNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//定义数组，让数字跟大写的中文产生一个对应关系</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;零&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;壹&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;贰&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;叁&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;肆&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;伍&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;陆&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;柒&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;捌&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;玖&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//返回结果</span></span>
<span class="line">        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="手机号屏蔽" tabindex="-1"><a class="header-anchor" href="#手机号屏蔽"><span>手机号屏蔽</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span>  <span class="token comment">//截取</span></span>
<span class="line"><span class="token comment">//注意点：</span></span>
<span class="line"><span class="token comment">//  1.包头不包尾，包左不包右 [ )</span></span>
<span class="line"><span class="token comment">//  2.只有返回值才是截取的小串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_7-stringbuilder"><span>7 StringBuilder</span></a></h2><p>可以看作一个容器，创建之后，<strong>里面的内容是可变的</strong>。</p><p>作用：提高字符串的操作效率</p><h3 id="_7-1-构造方法" tabindex="-1"><a class="header-anchor" href="#_7-1-构造方法"><span>7.1 构造方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建一个空白可变字符串对象，不含有任何内容</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token comment">//根据字符串的内容，来创建可变字符串对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-常用方法" tabindex="-1"><a class="header-anchor" href="#_7-2-常用方法"><span>7.2 常用方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span>任意类型<span class="token punctuation">)</span> <span class="token comment">//添加数据，并返回对象本身</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//反转容器中的内容，改变自身</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回长度（字符出现的个数）</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//通过toString()就可以实现把String Builder转换为String</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token class-name">String</span> str<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//在字符串的offset位置插入str。</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//修改index位置的字符。</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//删除指定位置的字符</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//删除指定范围的字符或字符串</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">StringBuffer</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//替换指定的字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_7-3-注意事项"><span>7.3 注意事项</span></a></h3><p>1.因为StringBuilder是java已经写好的类，java在底层对他做了一些特殊处理。打印对象不是地址值而是属性值</p><pre><code>   2.用new StringBuilder （）构造输出为空，说明这个是空的。



   3.new StringBuilder （“abc”）输出，会输出abc。
</code></pre><h3 id="_7-4-链式编程" tabindex="-1"><a class="header-anchor" href="#_7-4-链式编程"><span>7.4 链式编程</span></a></h3><h4 id="_7-4-1-概念" tabindex="-1"><a class="header-anchor" href="#_7-4-1-概念"><span>7.4.1 概念</span></a></h4><pre><code>	**当我们在调用一个方法的时候，不需要用变量接收他的结果，可以继续调用其他方法。**
</code></pre><h4 id="_7-4-2" tabindex="-1"><a class="header-anchor" href="#_7-4-2"><span>7.4.2</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo4</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.创建对象</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.添加字符串</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//aaabbbcccddd</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.再把StringBuilder变回字符串</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//aaabbbcccddd</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-stringjoiner" tabindex="-1"><a class="header-anchor" href="#_8-stringjoiner"><span>8 StringJoiner</span></a></h2><h3 id="_8-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-1-概念"><span>8.1 概念</span></a></h3><pre><code>●StringJoiner跟StringBuilder-一样，也可以看成是一个容器，创建之后里面的内容是可变的。  
●作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。  
●JDK8出现的
</code></pre><h3 id="_8-2-构造方法" tabindex="-1"><a class="header-anchor" href="#_8-2-构造方法"><span>8.2 构造方法</span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public StringJoiner(间隔符号)//创建一个StringJoiner对象，指定拼接时的间隔符号</span>
<span class="line">public StringJoiner(间隔符号，开始符号，结束符号)创建一个StringJoiner对像，指定拼接时的间隔符号、开始符号、结束符号</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-基本方法" tabindex="-1"><a class="header-anchor" href="#_8-3-基本方法"><span>8.3 基本方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">StringJoiner</span> <span class="token function">add</span><span class="token punctuation">(</span>添加的内容<span class="token punctuation">)</span>   <span class="token comment">//添加数据，并返回对象本身</span></span>
<span class="line">sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//返回长度（字符出现的个数）</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回一个字符串（该字符串就是拼接之后的结果）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-stringbuffer-线程安全" tabindex="-1"><a class="header-anchor" href="#_9-stringbuffer-线程安全"><span>9 StringBuffer 线程安全</span></a></h2><h2 id="_10-字符串原理" tabindex="-1"><a class="header-anchor" href="#_10-字符串原理"><span>10 字符串原理</span></a></h2><p><strong>扩展底层原理</strong>1：</p><p>字符串存储的内存原理</p><ul><li>直接赋值会复用字符串常量池中的</li><li>new出来不会复用，而是开辟一个新的空间</li></ul><p><strong>扩展底层原理</strong>2**：**</p><p>==号比较的到底是什么？</p><ul><li>基本数据类型比较数据值</li><li>引用数据类型比较地址值</li></ul><p><strong>扩展底层原理3：</strong></p><p>字符串拼接的底层原理</p><p>●等号右边无变量</p><pre><code>拼接的时候没有变量，都是字符串。触发字符串的优化机制。在编译的时候就已经是最终的结果了。
</code></pre><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270153246-a8384ba1-ed7b-4536-8dff-f19c836006ec.png"><pre><code>	●等号右边有变量



     在拼接的时候有变量,JDK8以前底层会使用StringBuilder.
</code></pre><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270159054-959c29d1-5196-4b61-9df5-c80401e820d4.png"><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270164262-649262b9-cfb6-4630-8598-c21e1d420894.png"><p>JDK8字符串拼接的底层原理。</p><p>先预估最后的字符串长度，字符串拼接的时候有变量参与：<br> 在内存中创建了很多对象<br> 浪费空间，时间也非常慢</p><p>结论：<br> 如果很多字符串变量拼接，不要直接+。在底层会创建多个对象，浪费时间，浪费性能。</p><p>用StringBuilder</p><p><strong>扩展底层原理4：</strong></p><p>StringBuilder提高效率原理图</p><p><strong>所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</strong></p><ol><li></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token comment">//记录串池中的地址值</span></span>
<span class="line"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s3 <span class="token operator">=</span>  s2 <span class="token operator">+</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">=</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//输出结果</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串拼接的时候，如果有变量：</strong><br><strong>JDK8以前：系统底层会自动创建一个StringBuilder对象，然后再调用其append方法完成拼接。</strong><br><strong>拼接后，再调用其toString.方法转换为String类型，而toString方法的底层是直接new了一个字符串对象。</strong><br><strong>JDK8版本：系统会预估要字符串拼接之后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串。</strong></p><ol start="2"><li></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//·问题：下列代码的运行结果是？</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>    <span class="token comment">//记录串池中的地址值</span></span>
<span class="line">		<span class="token class-name">String</span> s2<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">+</span><span class="token string">&quot;b&quot;</span><span class="token operator">+</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span><span class="token comment">//复用串池中的字符串</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printin</span><span class="token punctuation">(</span>s1<span class="token operator">-=</span>s2<span class="token punctuation">)</span><span class="token comment">//true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token comment">//在编译的时候，就会将&quot;a&quot;+&quot;b&quot;+&quot;c&quot;拼接为&quot;abc&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展底层原理5：StringBuilder源码分析</strong></p><p>默认容量为16</p><p>长度：实际装了多少。</p><p>容量：做多能装多少。</p><p>自动扩容：扩容：老容量*2+2=34</p><p>扩容：如果超出*2+2的容量则以实际容量为准，即如果超了容量，就按实际长度为容量，例：如果为36，超了34所以就按容量为36扩容。</p><h2 id="_11-string-源码解读" tabindex="-1"><a class="header-anchor" href="#_11-string-源码解读"><span>11 String 源码解读</span></a></h2>`,72)),i("h4",Il,[i("a",Ol,[i("span",null,[i("a",Dl,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[403]||(n[403]=[s("String 类的声明")])),_:1}),l(r)])])])]),n[1397]||(n[1397]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Stable</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[404]||(n[404]=[s("String 类是 ")])),_:1}),n[1398]||(n[1398]=s("final")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[405]||(n[405]=[s(" 的，意味着它不能被子类")])),_:1}),n[1399]||(n[1399]=s("继承")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[406]||(n[406]=[s("String 类实现了 ")])),_:1}),n[1400]||(n[1400]=s("Serializable 接口")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[407]||(n[407]=[s("，意味着它可以")])),_:1}),n[1401]||(n[1401]=s("序列化")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[408]||(n[408]=[s("（后面同样会讲，戳链接可跳转）")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[409]||(n[409]=[s("String 类实现了 ")])),_:1}),n[1402]||(n[1402]=s("Comparable 接口")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[410]||(n[410]=[s("，意味着最好不要用‘==’来")])),_:1}),n[1403]||(n[1403]=s("比较两个字符串是否相等")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[411]||(n[411]=[s("，而应该用 ")])),_:1}),n[1404]||(n[1404]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[412]||(n[412]=[s("compareTo()")])),_:1}),n[1405]||(n[1405]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[413]||(n[413]=[s(" 方法去比较。")])),_:1}),i("p",null,[n[415]||(n[415]=s("String 和 StringBuffer、StringBuilder")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[414]||(n[414]=[s(" 一样，都实现了 CharSequence 接口")])),_:1})]),i("h4",Ll,[i("a",Ul,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[416]||(n[416]=[s("String 底层为什么由 char 数组优化为 byte 数组")])),_:1})])])]),n[1406]||(n[1406]=t(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[417]||(n[417]=[s("Java 9 以前，String 是用 char 型")])),_:1}),n[1407]||(n[1407]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[418]||(n[418]=[s("数组")])),_:1}),n[1408]||(n[1408]=s("](https://javabetter.cn/array/array.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[419]||(n[419]=[s("实现的，之后改成了 byte 型数组实现，并增加了 coder 来表示编码。这样做的好处是在 Latin1 字符为主的程序里，可以把 String 占用的内存减少一半。当然，天下没有免费的午餐，这个改进在节省内存的同时引入了编码检测的开销。")])),_:1}),i("blockquote",null,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[420]||(n[420]=[s("Latin1（Latin-1）是一种")])),_:1}),n[423]||(n[423]=s("**")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[421]||(n[421]=[s("单字节字符集")])),_:1}),n[424]||(n[424]=s("**")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[422]||(n[422]=[s("（即每个字符只使用一个字节的编码方式），也称为 ISO-8859-1（国际标准化组织 8859-1），它包含了西欧语言中使用的所有字符，包括英语、法语、德语、西班牙语、葡萄牙语、意大利语等等。在 Latin1 编码中，每个字符使用一个 8 位（即一个字节）的编码，可以表示 256 种不同的字符，其中包括 ASCII 字符集中的所有字符，即 0x00 到 0x7F，以及其他西欧语言中的特殊字符，例如 é、ü、ñ 等等。由于 Latin1 只使用一个字节表示一个字符，因此在存储和传输文本时具有较小的存储空间和较快的速度")])),_:1})]),l(a,{style:{color:"rgb(102, 102, 102)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[425]||(n[425]=[s("下面是 JDK 11 版本中的 String 类源码，注意和 JDK 8 的不同。")])),_:1}),n[1409]||(n[1409]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public final class String</span>
<span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {</span>
<span class="line">    @Stable</span>
<span class="line">    private final byte[] value;</span>
<span class="line">    private final byte coder;</span>
<span class="line">    private int hash;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[426]||(n[426]=[s("从")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1410]||(n[1410]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[427]||(n[427]=[s("char[]")])),_:1}),n[1411]||(n[1411]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[428]||(n[428]=[s("到")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1412]||(n[1412]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[429]||(n[429]=[s("byte[]")])),_:1}),n[1413]||(n[1413]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[430]||(n[430]=[s("，最主要的目的是")])),_:1}),n[1414]||(n[1414]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[431]||(n[431]=[s("节省字符串占用的内存空间")])),_:1}),n[1415]||(n[1415]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[432]||(n[432]=[s("。内存占用减少带来的另外一个好处，就是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1416]||(n[1416]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[433]||(n[433]=[s("GC")])),_:1}),n[1417]||(n[1417]=s("](https://javabetter.cn/jvm/gc.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[434]||(n[434]=[s("次数也会减少。")])),_:1}),i("blockquote",null,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[435]||(n[435]=[s("GC，也就是垃圾回收，JVM 的时候会讲到。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[436]||(n[436]=[s("这里给你讲一个小知识。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[437]||(n[437]=[s("我们使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1418]||(n[1418]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[438]||(n[438]=[s("jmap -histo:live pid | head -n 10")])),_:1}),n[1419]||(n[1419]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[439]||(n[439]=[s("命令就可以查看到堆内对象示例的统计信息、ClassLoader 的信息以及 finalizer 队列等。")])),_:1}),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[440]||(n[440]=[s("Java 的对象基本上都在")])),_:1}),n[1420]||(n[1420]=s("[")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[441]||(n[441]=[s("堆")])),_:1}),n[1421]||(n[1421]=s("](https://javabetter.cn/jvm/neicun-jiegou.html)")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[442]||(n[442]=[s("上。后面也会讲。这里的 pid 就是进程号，可以通过")])),_:1}),l(a,{style:{color:"rgb(102, 102, 102)"}}),n[1422]||(n[1422]=s("`")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[443]||(n[443]=[s("ps -ef | grep java")])),_:1}),n[1423]||(n[1423]=s("`")),l(a,{style:{color:"rgb(102, 102, 102)"}}),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[444]||(n[444]=[s("命令查看，下图中红色框出来的第二项就是 pid。")])),_:1}),n[1424]||(n[1424]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660264220-0e5f6ecd-da6a-4b93-9c39-36df031e3342.png"},null,-1)),n[1425]||(n[1425]=i("p",null,"window",-1)),n[1426]||(n[1426]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726663285021-7a623505-51c7-495b-bb56-352e70e2ff24.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[445]||(n[445]=[s("就以正在运行着的")])),_:1}),n[1427]||(n[1427]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[446]||(n[446]=[s("编程喵")])),_:1}),n[1428]||(n[1428]=s("](https://github.com/itwanger/coding-more)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[447]||(n[447]=[s("项目来说吧（它是以 JDK 8 运行的），结果是这样的。")])),_:1}),n[1429]||(n[1429]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660264342-666b63d5-235e-4f14-80bc-f42e10ddf616.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[448]||(n[448]=[s("其中 String 对象有 17638 个，占用了 423312 个字节的内存，排在第三位。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[449]||(n[449]=[s("由于 Java 8 的 String 内部实现仍然是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1430]||(n[1430]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[450]||(n[450]=[s("char[]")])),_:1}),n[1431]||(n[1431]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[451]||(n[451]=[s("，所以我们可以看到内存占用排在第 1 位的就是 char 数组。")])),_:1}),i("p",null,[n[453]||(n[453]=i("code",null,'<font style="color:rgb(44, 62, 80);">char[]</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[452]||(n[452]=[s("对象有 17673 个，占用了 1621352 个字节的内存，排在第一位。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[454]||(n[454]=[s("那也就是说优化 String 节省内存空间是非常有必要的，如果是去优化一个使用频率没有 String 这么高的类，就没什么必要，对吧？")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[455]||(n[455]=[s("众所周知，char 类型的数据在 JVM 中是占用两个字节的，并且使用的是 UTF-8")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1432]||(n[1432]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[456]||(n[456]=[s("编码")])),_:1}),n[1433]||(n[1433]=s("](https://javabetter.cn/basic-extra-meal/java-unicode.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[457]||(n[457]=[s("，其值范围在 '\\u0000'（0）和 '\\uffff'（65,535）（包含）之间。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[458]||(n[458]=[s("也就是说，使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1434]||(n[1434]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[459]||(n[459]=[s("char[]")])),_:1}),n[1435]||(n[1435]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[460]||(n[460]=[s("来表示 String 就会导致，即使 String 中的字符只用一个字节就能表示，也得占用两个字节。")])),_:1}),i("blockquote",null,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[461]||(n[461]=[s("PS：在计算机中，单字节字符通常指的是一个字节（8 位）可以表示的字符，而双字节字符则指需要两个字节（16 位）才能表示的字符。单字节字符和双字节字符的定义是相对的，不同的编码方式对应的单字节和双字节字符集也不同。常见的单字节字符集有 ASCII（美国信息交换标准代码）、ISO-8859（国际标准化组织标准编号 8859）、GBK（汉字内码扩展规范）、GB2312（中国国家标准，现在已经被 GBK 取代），像拉丁字母、数字、标点符号、控制字符都是单字节字符。双字节字符集包括 Unicode、UTF-8、GB18030（中国国家标准），中文、日文、韩文、拉丁文扩展字符属于双字节字符。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[462]||(n[462]=[s("当然了，仅仅将")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1436]||(n[1436]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[463]||(n[463]=[s("char[]")])),_:1}),n[1437]||(n[1437]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[464]||(n[464]=[s("优化为")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1438]||(n[1438]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[465]||(n[465]=[s("byte[]")])),_:1}),n[1439]||(n[1439]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[466]||(n[466]=[s("是不够的，还要配合 Latin-1 的编码方式，该编码方式是用单个字节来表示字符的，这样就比 UTF-8 编码节省了更多的空间。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[467]||(n[467]=[s("换句话说，对于：")])),_:1}),n[1440]||(n[1440]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = &quot;jack&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[468]||(n[468]=[s("这样的，使用 Latin-1 编码，占用 4 个字节就够了。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[469]||(n[469]=[s("但对于：")])),_:1}),n[1441]||(n[1441]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = &quot;小二&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[470]||(n[470]=[s("这种，木的办法，只能使用 UTF16 来编码。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[471]||(n[471]=[s("针对 JDK 9 的 String 源码里，为了区别编码方式，追加了一个 coder 字段来区分。")])),_:1}),n[1442]||(n[1442]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">/**</span>
<span class="line"> * The identifier of the encoding used to encode the bytes in</span>
<span class="line"> * {@code value}. The supported values in this implementation are</span>
<span class="line"> *</span>
<span class="line"> * LATIN1</span>
<span class="line"> * UTF16</span>
<span class="line"> *</span>
<span class="line"> * @implNote This field is trusted by the VM, and is a subject to</span>
<span class="line"> * constant folding if String instance is constant. Overwriting this</span>
<span class="line"> * field after construction will cause problems.</span>
<span class="line"> */</span>
<span class="line">private final byte coder;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[472]||(n[472]=[s("Java 会根据字符串的内容自动设置为相应的编码，要么 Latin-1 要么 UTF16。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[473]||(n[473]=[s("也就是说，从")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1443]||(n[1443]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[474]||(n[474]=[s("char[]")])),_:1}),n[1444]||(n[1444]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[475]||(n[475]=[s("到")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1445]||(n[1445]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[476]||(n[476]=[s("byte[]")])),_:1}),n[1446]||(n[1446]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[477]||(n[477]=[s("，")])),_:1}),n[1447]||(n[1447]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[478]||(n[478]=[s("中文是两个字节，纯英文是一个字节，在此之前呢，中文是两个字节，英文也是两个字节")])),_:1}),n[1448]||(n[1448]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[479]||(n[479]=[s("。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[480]||(n[480]=[s("在 UTF-8 中，0-127 号的字符用 1 个字节来表示，使用和 ASCII 相同的编码。只有 128 号及以上的字符才用 2 个、3 个或者 4 个字节来表示。")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[481]||(n[481]=[s("如果只有一个字节，那么最高的比特位为 0；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[482]||(n[482]=[s("如果有多个字节，那么第一个字节从最高位开始，连续有几个比特位的值为 1，就使用几个字节编码，剩下的字节均以 10 开头。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[483]||(n[483]=[s("具体的表现形式为：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[484]||(n[484]=[s("0xxxxxxx：一个字节；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[485]||(n[485]=[s("110xxxxx 10xxxxxx：两个字节编码形式（开始两个 1）；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[486]||(n[486]=[s("1110xxxx 10xxxxxx 10xxxxxx：三字节编码形式（开始三个 1）；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[487]||(n[487]=[s("11110xxx 10xxxxxx 10xxxxxx 10xxxxxx：四字节编码形式（开始四个 1）。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[488]||(n[488]=[s("也就是说，UTF-8 是变长的，那对于 String 这种有随机访问方法的类来说，就很不方便。所谓的随机访问，就是 charAt、subString 这种方法，随便指定一个数字，String 要能给出结果。如果字符串中的每个字符占用的内存是不定长的，那么进行随机访问的时候，就需要从头开始数每个字符的长度，才能找到你想要的字符。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[489]||(n[489]=[s("那你可能会问，UTF-16 也是变长的呢？一个字符还可能占用 4 个字节呢？")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[490]||(n[490]=[s("的确，UTF-16 使用 2 个或者 4 个字节来存储字符。")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[491]||(n[491]=[s("对于 Unicode 编号范围在 0 ~ FFFF 之间的字符，UTF-16 使用两个字节存储。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[492]||(n[492]=[s("对于 Unicode 编号范围在 10000 ~ 10FFFF 之间的字符，UTF-16 使用四个字节存储，具体来说就是：将字符编号的所有比特位分成两部分，较高的一些比特位用一个值介于 D800~DBFF 之间的双字节存储，较低的一些比特位（剩下的比特位）用一个值介于 DC00~DFFF 之间的双字节存储。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[493]||(n[493]=[s("但是在 Java 中，一个字符（char）就是 2 个字节，占 4 个字节的字符，在 Java 里也是用两个 char 来存储的，而 String 的各种操作，都是以 Java 的字符（char）为单位的，charAt 是取得第几个 char，subString 取的也是第几个到第几个 char 组成的子串，甚至 length 返回的都是 char 的个数。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[494]||(n[494]=[s("所以 UTF-16 在 Java 的世界里，就可以视为一个定长的编码。")])),_:1}),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[495]||(n[495]=[s("参考链接：")])),_:1}),n[1449]||(n[1449]=s("[")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[496]||(n[496]=[s("https://www.zhihu.com/question/447224628")])),_:1}),n[1450]||(n[1450]=s("](https://www.zhihu.com/question/447224628)")),i("h4",Fl,[i("a",Ml,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[497]||(n[497]=[s("String 类的 hashCode 方法")])),_:1})])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[498]||(n[498]=[s("每一个字符串都会有一个 hash 值，这个哈希值在很大概率是不会重复的，因此 String 很适合来作为 ")])),_:1}),n[1451]||(n[1451]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[499]||(n[499]=[s("HashMap")])),_:1}),n[1452]||(n[1452]=s("](https://javabetter.cn/collection/hashmap.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[500]||(n[500]=[s("（后面会细讲）的键值。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[501]||(n[501]=[s("来看 String 类的 hashCode 方法。")])),_:1}),n[1453]||(n[1453]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private int hash; // 缓存字符串的哈希码</span>
<span class="line"></span>
<span class="line">public int hashCode() {</span>
<span class="line">    int h = hash; // 从缓存中获取哈希码</span>
<span class="line">    // 如果哈希码未被计算过（即为 0）且字符串不为空，则计算哈希码</span>
<span class="line">    if (h == 0 &amp;&amp; value.length &gt; 0) {</span>
<span class="line">        char val[] = value; // 获取字符串的字符数组</span>
<span class="line"></span>
<span class="line">        // 遍历字符串的每个字符来计算哈希码</span>
<span class="line">        for (int i = 0; i &lt; value.length; i++) {</span>
<span class="line">            h = 31 * h + val[i]; // 使用 31 作为乘法因子</span>
<span class="line">        }</span>
<span class="line">        hash = h; // 缓存计算后的哈希码</span>
<span class="line">    }</span>
<span class="line">    return h; // 返回哈希码</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[502]||(n[502]=[s("hashCode 方法首先检查是否已经计算过哈希码，如果已经计算过，则直接返回缓存的哈希码。否则，方法将使用一个循环遍历字符串的所有字符，并使用一个乘法和加法的组合计算哈希码。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[503]||(n[503]=[s("这种计算方法被称为“")])),_:1}),n[1454]||(n[1454]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[504]||(n[504]=[s("31 倍哈希法")])),_:1}),n[1455]||(n[1455]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[505]||(n[505]=[s("”。计算完成后，将得到的哈希值存储在 hash 成员变量中，以便下次调用 hashCode 方法时直接返回该值，而不需要重新计算。这是一种")])),_:1}),n[1456]||(n[1456]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[506]||(n[506]=[s("缓存优化")])),_:1}),n[1457]||(n[1457]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[507]||(n[507]=[s("，称为“")])),_:1}),n[1458]||(n[1458]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[508]||(n[508]=[s("惰性计算")])),_:1}),n[1459]||(n[1459]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[509]||(n[509]=[s("”。")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[510]||(n[510]=[s("31 倍哈希法（31-Hash）是一种简单有效的字符串哈希算法，常用于对字符串进行哈希处理")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[511]||(n[511]=[s("。该算法的基本思想是")])),_:1}),i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[512]||(n[512]=[s("将字符串中的每个字符乘以一个固定的质数 31 的幂次方，并将它们相加得到哈希值")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[513]||(n[513]=[s("。具体地，假设字符串为 s，长度为 n，则 31 倍哈希值计算公式如下：")])),_:1})]),n[1460]||(n[1460]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">H(s) = (s[0] * 31^(n-1)) + (s[1] * 31^(n-2)) + ... + (s[n-1] * 31^0)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[514]||(n[514]=[s("其中，s[i]表示字符串 s 中第 i 个字符的 ASCII 码值，")])),_:1}),n[1461]||(n[1461]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[515]||(n[515]=[s("^")])),_:1}),n[1462]||(n[1462]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[516]||(n[516]=[s("表示幂运算。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[517]||(n[517]=[s("31 倍哈希法的优点在于简单易实现，计算速度快，同时也比较均匀地分布在哈希表中。")])),_:1}),i("p",null,[i("a",Tl,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[518]||(n[518]=[s("hashCode 方法")])),_:1}),l(r)]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[519]||(n[519]=[s("，我们会在另外一个章节里详细讲，戳前面的链接了解。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[520]||(n[520]=[s("我们可以通过以下方法模拟 String 的 hashCode 方法：")])),_:1}),n[1463]||(n[1463]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class HashCodeExample {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String text = &quot;沉默王二&quot;;</span>
<span class="line">        int hashCode = computeHashCode(text);</span>
<span class="line">        System.out.println(&quot;字符串 \\&quot;&quot; + text + &quot;\\&quot; 的哈希码是: &quot; + hashCode);</span>
<span class="line"></span>
<span class="line">        System.out.println(&quot;String 的 hashCode &quot; + text.hashCode());</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static int computeHashCode(String text) {</span>
<span class="line">        int h = 0;</span>
<span class="line">        for (int i = 0; i &lt; text.length(); i++) {</span>
<span class="line">            h = 31 * h + text.charAt(i);</span>
<span class="line">        }</span>
<span class="line">        return h;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[521]||(n[521]=[s("看一下结果：")])),_:1}),n[1464]||(n[1464]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">字符串 &quot;沉默王二&quot; 的哈希码是: 867758096</span>
<span class="line">String 的 hashCode 867758096</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[522]||(n[522]=[s("结果是一样的，又学到了吧？")])),_:1}),i("h4",Pl,[i("a",Nl,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[523]||(n[523]=[s("String 类的 substring 方法")])),_:1})])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[524]||(n[524]=[s("String 类中还有一个方法比较常用 substring，用来截取字符串的，来看源码。")])),_:1}),n[1465]||(n[1465]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String substring(int beginIndex) {</span>
<span class="line">    // 检查起始索引是否小于 0，如果是，则抛出 StringIndexOutOfBoundsException 异常</span>
<span class="line">    if (beginIndex &lt; 0) {</span>
<span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span>
<span class="line">    }</span>
<span class="line">    // 计算子字符串的长度</span>
<span class="line">    int subLen = value.length - beginIndex;</span>
<span class="line">    // 检查子字符串长度是否为负数，如果是，则抛出 StringIndexOutOfBoundsException 异常</span>
<span class="line">    if (subLen &lt; 0) {</span>
<span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span>
<span class="line">    }</span>
<span class="line">    // 如果起始索引为 0，则返回原字符串；否则，创建并返回新的字符串</span>
<span class="line">    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[525]||(n[525]=[s("substring 方法首先检查参数的有效性，如果参数无效，则抛出 StringIndexOutOfBoundsException")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1466]||(n[1466]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[526]||(n[526]=[s("异常")])),_:1}),n[1467]||(n[1467]=s("](https://javabetter.cn/exception/gailan.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[527]||(n[527]=[s("（后面会细讲）。接下来，方法根据参数计算子字符串的长度。如果子字符串长度小于零，也会抛出 StringIndexOutOfBoundsException 异常。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[528]||(n[528]=[s("如果 beginIndex 为 0，说明子串与原字符串相同，直接返回原字符串。否则，使用 value 数组（原字符串的字符数组）的一部分 new 一个新的 String 对象并返回。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[529]||(n[529]=[s("下面是几个使用 substring 方法的示例：")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[530]||(n[530]=[s("①、提取字符串中的一段子串：")])),_:1}),n[1468]||(n[1468]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">String subStr = str.substring(7, 12);  // 从第7个字符（包括）提取到第12个字符（不包括）</span>
<span class="line">System.out.println(subStr);  // 输出 &quot;world&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[531]||(n[531]=[s("②、提取字符串中的前缀或后缀：")])),_:1}),n[1469]||(n[1469]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">String prefix = str.substring(0, 5);  // 提取前5个字符，即 &quot;Hello&quot;</span>
<span class="line">String suffix = str.substring(7);     // 提取从第7个字符开始的所有字符，即 &quot;world!&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[532]||(n[532]=[s("③、处理字符串中的空格和分隔符：")])),_:1}),n[1470]||(n[1470]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;   Hello,   world!  &quot;;</span>
<span class="line">String trimmed = str.trim();                  // 去除字符串开头和结尾的空格</span>
<span class="line">String[] words = trimmed.split(&quot;\\\\s+&quot;);       // 将字符串按照空格分隔成单词数组</span>
<span class="line">String firstWord = words[0].substring(0, 1);  // 提取第一个单词的首字母</span>
<span class="line">System.out.println(firstWord);                // 输出 &quot;H&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[533]||(n[533]=[s("④、处理字符串中的数字和符号：")])),_:1}),n[1471]||(n[1471]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;1234-5678-9012-3456&quot;;</span>
<span class="line">String[] parts = str.split(&quot;-&quot;);             // 将字符串按照连字符分隔成四个部分</span>
<span class="line">String last4Digits = parts[3].substring(1);  // 提取最后一个部分的后三位数字</span>
<span class="line">System.out.println(last4Digits);             // 输出 &quot;456&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[534]||(n[534]=[s("总之，substring 方法可以根据需求灵活地提取字符串中的子串，为字符串处理提供了便利。")])),_:1}),i("h4",Vl,[i("a",zl,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[535]||(n[535]=[s("String 类的 indexOf 方法")])),_:1})])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[536]||(n[536]=[s("indexOf 方法用于查找一个子字符串在原字符串中第一次出现的位置，并返回该位置的索引。来看该方法的源码：")])),_:1}),n[1472]||(n[1472]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">/*</span>
<span class="line"> * 查找字符数组 target 在字符数组 source 中第一次出现的位置。</span>
<span class="line"> * sourceOffset 和 sourceCount 参数指定 source 数组中要搜索的范围，</span>
<span class="line"> * targetOffset 和 targetCount 参数指定 target 数组中要搜索的范围，</span>
<span class="line"> * fromIndex 参数指定开始搜索的位置。</span>
<span class="line"> * 如果找到了 target 数组，则返回它在 source 数组中的位置索引（从0开始），</span>
<span class="line"> * 否则返回-1。</span>
<span class="line"> */</span>
<span class="line">static int indexOf(char[] source, int sourceOffset, int sourceCount,</span>
<span class="line">        char[] target, int targetOffset, int targetCount,</span>
<span class="line">        int fromIndex) {</span>
<span class="line">    // 如果开始搜索的位置已经超出 source 数组的范围，则直接返回-1（如果 target 数组为空，则返回 sourceCount）</span>
<span class="line">    if (fromIndex &gt;= sourceCount) {</span>
<span class="line">        return (targetCount == 0 ? sourceCount : -1);</span>
<span class="line">    }</span>
<span class="line">    // 如果开始搜索的位置小于0，则从0开始搜索</span>
<span class="line">    if (fromIndex &lt; 0) {</span>
<span class="line">        fromIndex = 0;</span>
<span class="line">    }</span>
<span class="line">    // 如果 target 数组为空，则直接返回开始搜索的位置</span>
<span class="line">    if (targetCount == 0) {</span>
<span class="line">        return fromIndex;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // 查找 target 数组的第一个字符在 source 数组中的位置</span>
<span class="line">    char first = target[targetOffset];</span>
<span class="line">    int max = sourceOffset + (sourceCount - targetCount);</span>
<span class="line"></span>
<span class="line">    // 循环查找 target 数组在 source 数组中的位置</span>
<span class="line">    for (int i = sourceOffset + fromIndex; i &lt;= max; i++) {</span>
<span class="line">        /* Look for first character. */</span>
<span class="line">        // 如果 source 数组中当前位置的字符不是 target 数组的第一个字符，则在 source 数组中继续查找 target 数组的第一个字符</span>
<span class="line">        if (source[i] != first) {</span>
<span class="line">            while (++i &lt;= max &amp;&amp; source[i] != first);</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        /* Found first character, now look at the rest of v2 */</span>
<span class="line">        // 如果在 source 数组中找到了 target 数组的第一个字符，则继续查找 target 数组的剩余部分是否匹配</span>
<span class="line">        if (i &lt;= max) {</span>
<span class="line">            int j = i + 1;</span>
<span class="line">            int end = j + targetCount - 1;</span>
<span class="line">            for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]</span>
<span class="line">                    == target[k]; j++, k++);</span>
<span class="line"></span>
<span class="line">            // 如果 target 数组全部匹配，则返回在 source 数组中的位置索引</span>
<span class="line">            if (j == end) {</span>
<span class="line">                /* Found whole string. */</span>
<span class="line">                return i - sourceOffset;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    // 没有找到 target 数组，则返回-1</span>
<span class="line">    return -1;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[537]||(n[537]=[s("来看示例。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[538]||(n[538]=[s("①、示例 1：查找子字符串的位置")])),_:1}),n[1473]||(n[1473]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">int index = str.indexOf(&quot;world&quot;);  // 查找 &quot;world&quot; 子字符串在 str 中第一次出现的位置</span>
<span class="line">System.out.println(index);        // 输出 7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[539]||(n[539]=[s("②、示例 2：查找字符串中某个字符的位置")])),_:1}),n[1474]||(n[1474]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">int index = str.indexOf(&quot;,&quot;);     // 查找逗号在 str 中第一次出现的位置</span>
<span class="line">System.out.println(index);        // 输出 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[540]||(n[540]=[s("③、示例 3：查找子字符串的位置（从指定位置开始查找）")])),_:1}),n[1475]||(n[1475]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">int index = str.indexOf(&quot;l&quot;, 3);  // 从索引为3的位置开始查找 &quot;l&quot; 子字符串在 str 中第一次出现的位置</span>
<span class="line">System.out.println(index);        // 输出 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[541]||(n[541]=[s("④、示例 4：查找多个子字符串")])),_:1}),n[1476]||(n[1476]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = &quot;Hello, world!&quot;;</span>
<span class="line">int index1 = str.indexOf(&quot;o&quot;);    // 查找 &quot;o&quot; 子字符串在 str 中第一次出现的位置</span>
<span class="line">int index2 = str.indexOf(&quot;o&quot;, 5); // 从索引为5的位置开始查找 &quot;o&quot; 子字符串在 str 中第一次出现的位置</span>
<span class="line">System.out.println(index1);       // 输出 4</span>
<span class="line">System.out.println(index2);       // 输出 8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("h4",Hl,[i("a",Kl,[i("span",null,[i("a",Gl,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[542]||(n[542]=[s("String 类的其他方法")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[543]||(n[543]=[s("①、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1477]||(n[1477]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[544]||(n[544]=[s("length()")])),_:1}),n[1478]||(n[1478]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[545]||(n[545]=[s("用于返回字符串长度。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[546]||(n[546]=[s("②、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1479]||(n[1479]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[547]||(n[547]=[s("isEmpty()")])),_:1}),n[1480]||(n[1480]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[548]||(n[548]=[s("用于判断字符串是否为空。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[549]||(n[549]=[s("③、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1481]||(n[1481]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[550]||(n[550]=[s("charAt()")])),_:1}),n[1482]||(n[1482]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[551]||(n[551]=[s("用于返回指定索引处的字符。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[552]||(n[552]=[s("④、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1483]||(n[1483]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[553]||(n[553]=[s("valueOf()")])),_:1}),n[1484]||(n[1484]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[554]||(n[554]=[s("用于将其他类型的数据转换为字符串。")])),_:1}),n[1485]||(n[1485]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = String.valueOf(123);  // 将整数 123 转换为字符串</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[555]||(n[555]=[s("valueOf 方法的背后其实调用的是包装器类的 toString 方法，比如说整数转为字符串调用的是 Integer 类的 toString 方法。")])),_:1}),n[1486]||(n[1486]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static String valueOf(int i) {</span>
<span class="line">    return Integer.toString(i);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[556]||(n[556]=[s("而 Integer 类的 toString 方法又调用了 Integer 类的静态方法")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1487]||(n[1487]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[557]||(n[557]=[s("toString(int i)")])),_:1}),n[1488]||(n[1488]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[558]||(n[558]=[s("：")])),_:1}),n[1489]||(n[1489]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static String toString(int i) {</span>
<span class="line">    // 最小值返回 &quot;-2147483648&quot;</span>
<span class="line">    if (i == Integer.MIN_VALUE)</span>
<span class="line">        return &quot;-2147483648&quot;;</span>
<span class="line">    // 整数的长度，负数的长度减 1</span>
<span class="line">    int size = (i &lt; 0) ? stringSize(-i) + 1 : stringSize(i);</span>
<span class="line">    // 把整数复制到字符数组中</span>
<span class="line">    char[] buf = new char[size];</span>
<span class="line">    // 具体的复制过程</span>
<span class="line">    getChars(i, size, buf);</span>
<span class="line">    // 通过 new 返回字符串</span>
<span class="line">    return new String(buf, true);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[559]||(n[559]=[s("至于 getChars 方法，就是把整数复制到字符数组中的具体过程了，这里就不展开了。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[560]||(n[560]=[s("⑥、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1490]||(n[1490]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[561]||(n[561]=[s("getBytes()")])),_:1}),n[1491]||(n[1491]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[562]||(n[562]=[s("用于返回字符串的字节数组，可以指定编码方式，比如说：")])),_:1}),n[1492]||(n[1492]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String text = &quot;沉默王二&quot;;</span>
<span class="line">System.out.println(Arrays.toString(text.getBytes(StandardCharsets.UTF_8)));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[563]||(n[563]=[s("⑦、比如说")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1493]||(n[1493]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[564]||(n[564]=[s("trim()")])),_:1}),n[1494]||(n[1494]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[565]||(n[565]=[s("用于去除字符串两侧的空白字符，来看源码：")])),_:1}),n[1495]||(n[1495]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String trim() {</span>
<span class="line">    int len = value.length;</span>
<span class="line">    int st = 0;</span>
<span class="line">    char[] val = value;    /* avoid getfield opcode */</span>
<span class="line"></span>
<span class="line">    while ((st &lt; len) &amp;&amp; (val[st] &lt;= &#39; &#39;)) {</span>
<span class="line">        st++;</span>
<span class="line">    }</span>
<span class="line">    while ((st &lt; len) &amp;&amp; (val[len - 1] &lt;= &#39; &#39;)) {</span>
<span class="line">        len--;</span>
<span class="line">    }</span>
<span class="line">    return ((st &gt; 0) || (len &lt; value.length)) ? substring(st, len) : this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[566]||(n[566]=[s("举例：")])),_:1}),n[1496]||(n[1496]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[567]||(n[567]=[s('" 沉默王二 ".trim()')])),_:1}),n[1497]||(n[1497]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[568]||(n[568]=[s('会返回"沉默王二"')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[569]||(n[569]=[s("除此之外，还有")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1498]||(n[1498]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[570]||(n[570]=[s("split")])),_:1}),n[1499]||(n[1499]=s("](https://javabetter.cn/string/split.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[571]||(n[571]=[s("、")])),_:1}),n[1500]||(n[1500]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[572]||(n[572]=[s("equals")])),_:1}),n[1501]||(n[1501]=s("](https://javabetter.cn/string/equals.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[573]||(n[573]=[s("、")])),_:1}),n[1502]||(n[1502]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[574]||(n[574]=[s("join")])),_:1}),n[1503]||(n[1503]=s("](https://javabetter.cn/string/join.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[575]||(n[575]=[s("等这些方法，我们后面会一一来细讲。")])),_:1}),i("h3",Rl,[i("a",Wl,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[576]||(n[576]=[s("为什么Java字符串是不可变的？")])),_:1})])])]),n[1504]||(n[1504]=i("hr",null,null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[577]||(n[577]=[s("String 可能是 Java 中使用频率最高的引用类型了，因此 String 类的设计者可以说是用心良苦。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[578]||(n[578]=[s("比如说 String 的不可变性。")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[579]||(n[579]=[s("String 类被")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[584]||(n[584]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[580]||(n[580]=[s("final 关键字")])),_:1}),n[585]||(n[585]=s("](https://javabetter.cn/oo/final.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[581]||(n[581]=[s("修饰，所以它不会有子类，这就意味着没有子类可以")])),_:1}),n[586]||(n[586]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[582]||(n[582]=[s("重写")])),_:1}),n[587]||(n[587]=s("](https://javabetter.cn/basic-extra-meal/override-overload.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[583]||(n[583]=[s("它的方法，改变它的行为。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[588]||(n[588]=[s("String 类的数据存储在")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[591]||(n[591]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[589]||(n[589]=[s("char[]")])),_:1}),n[592]||(n[592]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[590]||(n[590]=[s("数组中，而这个数组也被 final 关键字修饰了，这就表示 String 对象是没法被修改的，只要初始化一次，值就确定了。")])),_:1})])]),n[1505]||(n[1505]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public final class String</span>
<span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {</span>
<span class="line">    /** The value is used for character storage. */</span>
<span class="line">    private final char value[];</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[593]||(n[593]=[s("“哥，为什么要这样设计呢？”三妹有些不解。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[594]||(n[594]=[s("“我先简单来说下，三妹，能懂最好，不能懂后面再细说。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[595]||(n[595]=[s("第一，可以保证 String 对象的安全性，避免被篡改，毕竟像密码这种隐私信息一般就是用字符串存储的。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[596]||(n[596]=[s("以下是一个简单的 Java 示例，演示了字符串的不可变性如何有助于保证 String 对象的安全性。在本例中，我们创建了一个简单的 User 类，该类使用 String 类型的字段存储用户名和密码。同时，我们使用一个静态方法 getUserCredentials 从外部获取用户凭据。")])),_:1}),n[1506]||(n[1506]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class User {</span>
<span class="line">    private String username;</span>
<span class="line">    private String password;</span>
<span class="line"></span>
<span class="line">    public User(String username, String password) {</span>
<span class="line">        this.username = username;</span>
<span class="line">        this.password = password;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public String getUsername() {</span>
<span class="line">        return username;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public String getPassword() {</span>
<span class="line">        return password;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">public class StringSecurityExample {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String username = &quot;沉默王二&quot;;</span>
<span class="line">        String password = &quot;123456&quot;;</span>
<span class="line">        User user = new User(username, password);</span>
<span class="line"></span>
<span class="line">        // 获取用户凭据</span>
<span class="line">        String[] credentials = getUserCredentials(user);</span>
<span class="line"></span>
<span class="line">        // 尝试修改从 getUserCredentials 返回的用户名和密码字符串</span>
<span class="line">        credentials[0] = &quot;陈清扬&quot;;</span>
<span class="line">        credentials[1] = &quot;612311&quot;;</span>
<span class="line"></span>
<span class="line">        // 输出原始 User 对象中的用户名和密码</span>
<span class="line">        System.out.println(&quot;原始用户名: &quot; + user.getUsername());</span>
<span class="line">        System.out.println(&quot;原始密码: &quot; + user.getPassword());</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static String[] getUserCredentials(User user) {</span>
<span class="line">        String[] credentials = new String[2];</span>
<span class="line">        credentials[0] = user.getUsername();</span>
<span class="line">        credentials[1] = user.getPassword();</span>
<span class="line">        return credentials;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[597]||(n[597]=[s("在这个示例中，尽管我们尝试修改 getUserCredentials 返回的字符串数组（即用户名和密码），但原始 User 对象中的用户名和密码保持不变。这证明了字符串的不可变性有助于保护 String 对象的安全性。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[598]||(n[598]=[s("第二，保证哈希值不会频繁变更。毕竟要经常作为")])),_:1}),n[1507]||(n[1507]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[599]||(n[599]=[s("哈希表")])),_:1}),n[1508]||(n[1508]=s("](https://javabetter.cn/collection/hashmap.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[600]||(n[600]=[s("的键值，经常变更的话，哈希表的性能就会很差劲。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[601]||(n[601]=[s("在 String 类中，哈希值是在第一次计算时缓存的，后续对该哈希值的请求将直接使用缓存值。这有助于提高哈希表等数据结构的性能。以下是一个简单的示例，演示了字符串的哈希值缓存机制：")])),_:1}),n[1509]||(n[1509]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String text1 = &quot;沉默王二&quot;;</span>
<span class="line">String text2 = &quot;沉默王二&quot;;</span>
<span class="line"></span>
<span class="line">// 计算字符串 text1 的哈希值，此时会进行计算并缓存哈希值</span>
<span class="line">int hashCode1 = text1.hashCode();</span>
<span class="line">System.out.println(&quot;第一次计算 text1 的哈希值: &quot; + hashCode1);</span>
<span class="line"></span>
<span class="line">// 再次计算字符串 text1 的哈希值，此时直接返回缓存的哈希值</span>
<span class="line">int hashCode1Cached = text1.hashCode();</span>
<span class="line">System.out.println(&quot;第二次计算: &quot; + hashCode1Cached);</span>
<span class="line"></span>
<span class="line">// 计算字符串 text2 的哈希值，由于字符串常量池的存在，实际上 text1 和 text2 指向同一个字符串对象</span>
<span class="line">// 所以这里直接返回缓存的哈希值</span>
<span class="line">int hashCode2 = text2.hashCode();</span>
<span class="line">System.out.println(&quot;text2 直接使用缓存: &quot; + hashCode2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[602]||(n[602]=[s("在这个示例中，我们创建了两个具有相同内容的字符串 text1 和 text2。首次计算 text1 的哈希值时，会进行实际计算并缓存该值。当我们再次计算 text1 的哈希值或计算具有相同内容的 text2 的哈希值时，将直接返回缓存的哈希值，而不进行重新计算。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[603]||(n[603]=[s("由于 String 对象是不可变的，其哈希值在创建后不会发生变化。这使得 String 类可以缓存哈希值，提高哈希表等数据结构的性能。如果 String 是可变的，那么在每次修改时都需要重新计算哈希值，这会降低性能。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[604]||(n[604]=[s("第三，可以实现")])),_:1}),n[1510]||(n[1510]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[605]||(n[605]=[s("字符串常量池")])),_:1}),n[1511]||(n[1511]=s("](https://javabetter.cn/string/constant-pool.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[606]||(n[606]=[s("，Java 会将相同内容的字符串存储在字符串常量池中。这样，具有相同内容的字符串变量可以指向同一个 String 对象，节省内存空间。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[607]||(n[607]=[s("“由于字符串的不可变性，String 类的一些方法实现最终都返回了新的字符串对象。”等三妹稍微缓了一会后，我继续说到。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[608]||(n[608]=[s("“就拿")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1512]||(n[1512]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[609]||(n[609]=[s("substring()")])),_:1}),n[1513]||(n[1513]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[610]||(n[610]=[s("方法来说。”")])),_:1}),n[1514]||(n[1514]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String substring(int beginIndex) {</span>
<span class="line">    if (beginIndex &lt; 0) {</span>
<span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span>
<span class="line">    }</span>
<span class="line">    int subLen = value.length - beginIndex;</span>
<span class="line">    if (subLen &lt; 0) {</span>
<span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span>
<span class="line">    }</span>
<span class="line">    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[612]||(n[612]=i("code",null,'<font style="color:rgb(44, 62, 80);">substring()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[611]||(n[611]=[s("方法用于截取字符串，最终返回的都是 new 出来的新字符串对象。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[613]||(n[613]=[s("“还有")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1515]||(n[1515]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[614]||(n[614]=[s("concat()")])),_:1}),n[1516]||(n[1516]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[615]||(n[615]=[s("方法。”")])),_:1}),n[1517]||(n[1517]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String concat(String str) {</span>
<span class="line">    int olen = str.length();</span>
<span class="line">    if (olen == 0) {</span>
<span class="line">        return this;</span>
<span class="line">    }</span>
<span class="line">    if (coder() == str.coder()) {</span>
<span class="line">        byte[] val = this.value;</span>
<span class="line">        byte[] oval = str.value;</span>
<span class="line">        int len = val.length + oval.length;</span>
<span class="line">        byte[] buf = Arrays.copyOf(val, len);</span>
<span class="line">        System.arraycopy(oval, 0, buf, val.length, oval.length);</span>
<span class="line">        return new String(buf, coder);</span>
<span class="line">    }</span>
<span class="line">    int len = length();</span>
<span class="line">    byte[] buf = StringUTF16.newBytesFor(len + olen);</span>
<span class="line">    getBytes(buf, 0, UTF16);</span>
<span class="line">    str.getBytes(buf, len, UTF16);</span>
<span class="line">    return new String(buf, UTF16);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[617]||(n[617]=i("code",null,'<font style="color:rgb(44, 62, 80);">concat()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[616]||(n[616]=[s("方法用于拼接字符串，不管编码是否一致，最终也返回的是新的字符串对象。")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[618]||(n[618]=[s("“")])),_:1}),n[1518]||(n[1518]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[619]||(n[619]=[s("replace()")])),_:1}),n[1519]||(n[1519]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[620]||(n[620]=[s("替换方法其实也一样，三妹，你可以自己一会看一下源码，也是返回新的字符串对象。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[621]||(n[621]=[s("“这就意味着，不管是截取、拼接，还是替换，都不是在原有的字符串上进行的，而是重新生成了新的字符串对象。也就是说，这些操作执行过后，")])),_:1}),n[1520]||(n[1520]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[622]||(n[622]=[s("原来的字符串对象并没有发生改变")])),_:1}),n[1521]||(n[1521]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[623]||(n[623]=[s("。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",Ql,[i("a",Xl,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[624]||(n[624]=[s("深入理解Java字符串常量池")])),_:1})])])]),n[1522]||(n[1522]=i("hr",null,null,-1)),i("h4",Yl,[i("a",Zl,[i("span",null,[i("a",$l,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[625]||(n[625]=[s('new String("二哥")创建了几个对象')])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[626]||(n[626]=[s("“先从这道面试题开始吧！”")])),_:1}),n[1523]||(n[1523]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = new String(&quot;二哥&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[627]||(n[627]=[s("“这行代码创建了几个")])),_:1}),n[1524]||(n[1524]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[628]||(n[628]=[s("对象")])),_:1}),n[1525]||(n[1525]=s("](https://javabetter.cn/oo/object-class.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[629]||(n[629]=[s("？”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[630]||(n[630]=[s("“不就一个吗？”三妹不假思索地回答。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[631]||(n[631]=[s("“不，两个！”我直接否定了三妹的答案，“使用 new 关键字创建一个字符串对象时，Java 虚拟机会先在字符串常量池中查找有没有‘二哥’这个字符串对象，如果有，就不会在字符串常量池中创建‘二哥’这个对象了，直接在堆中创建一个‘二哥’的字符串对象，然后将堆中这个‘二哥’的对象地址返回赋值给变量 s。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[632]||(n[632]=[s("“如果没有，先在字符串常量池中创建一个‘二哥’的字符串对象，然后再在堆中创建一个‘二哥’的字符串对象，然后将堆中这个‘二哥’的字符串对象地址返回赋值给变量 s。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[633]||(n[633]=[s("我画图表示一下，会更加清楚。")])),_:1}),n[1526]||(n[1526]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660488701-3bdec85a-e29b-4f9f-8f17-d14e1ae4d658.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[634]||(n[634]=[s('String s = new String("二哥")')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[635]||(n[635]=[s("在 Java 中，栈上存储的是基本数据类型的变量和对象的引用，而对象本身则存储在堆上。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[636]||(n[636]=[s("对于这行代码")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1527]||(n[1527]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[637]||(n[637]=[s('String s = new String("二哥");')])),_:1}),n[1528]||(n[1528]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[638]||(n[638]=[s('，它创建了两个对象：一个是字符串对象 "二哥"，它被添加到了字符串常量池中，另一个是通过')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1529]||(n[1529]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[639]||(n[639]=[s("new String()")])),_:1}),n[1530]||(n[1530]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[640]||(n[640]=[s('构造方法创建的字符串对象 "二哥"，它被分配在堆内存中，同时引用变量 s 存储在栈上，它指向堆内存中的字符串对象 "二哥"。')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[641]||(n[641]=[s("“")])),_:1}),n[1531]||(n[1531]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[642]||(n[642]=[s("为什么要先在字符串常量池中创建对象，然后再在堆上创建呢")])),_:1}),n[1532]||(n[1532]=s("**")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[643]||(n[643]=[s("？这样不就多此一举了？”三妹敏锐地发现了问题。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[644]||(n[644]=[s("我回答，“是的。由于字符串的使用频率实在是太高了，所以 Java 虚拟机为了提高性能和减少内存开销，在创建字符串对象的时候进行了一些优化，特意为字符串开辟了一块空间——也就是字符串常量池。”")])),_:1}),i("h4",hl,[i("a",_l,[i("span",null,[i("a",na,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[645]||(n[645]=[s("字符串常量池的作用")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[646]||(n[646]=[s("通常情况下，我们会采用双引号的方式来创建字符串对象，而不是通过 new 关键字的方式，就像下面 ")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[647]||(n[647]=[s("👇🏻")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[648]||(n[648]=[s(" 这样，这样就不会多此一举：")])),_:1}),n[1533]||(n[1533]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = &quot;三妹&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[649]||(n[649]=[s("当执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1534]||(n[1534]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[650]||(n[650]=[s('String s = "三妹"')])),_:1}),n[1535]||(n[1535]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[651]||(n[651]=[s("时，Java 虚拟机会先在字符串常量池中查找有没有“三妹”这个字符串对象，如果有，则不创建任何对象，直接将字符串常量池中这个“三妹”的对象地址返回，赋给变量 s；如果没有，在字符串常量池中创建“三妹”这个对象，然后将其地址返回，赋给变量 s。")])),_:1}),n[1536]||(n[1536]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660488986-af42e106-525f-4d13-a9b7-690a496f4646.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[652]||(n[652]=[s('Java 虚拟机创建了一个字符串对象 "三妹"，它被添加到了字符串常量池中，同时引用变量 s 存储在栈上，它指向字符串常量池中的字符串对象 "三妹"。你看，是不是省了一步，比之前高效了。')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[653]||(n[653]=[s("“哦，我明白了，哥。”三妹突然插话到，“有了字符串常量池，就可以通过双引号的方式直接创建字符串对象，不用再通过 new 的方式在堆中创建对象了，对吧？”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[654]||(n[654]=[s("“是滴。new 的方式始终会创建一个对象，不管字符串的内容是否已经存在，而双引号的方式会重复利用字符串常量池中已经存在的对象。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[655]||(n[655]=[s("来看下面这个例子：")])),_:1}),n[1537]||(n[1537]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = new String(&quot;二哥&quot;);</span>
<span class="line">String s1 = new String(&quot;二哥&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[656]||(n[656]=[s("按照我们之前的分析，这两行代码会创建三个对象，字符串常量池中一个，堆上两个。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[657]||(n[657]=[s("再来看下面这个例子：")])),_:1}),n[1538]||(n[1538]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s = &quot;三妹&quot;;</span>
<span class="line">String s1 = &quot;三妹&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[658]||(n[658]=[s("这两行代码只会创建一个对象，就是字符串常量池中的那个。这样的话，性能肯定就提高了！")])),_:1}),i("h4",sa,[i("a",la,[i("span",null,[i("a",aa,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[659]||(n[659]=[s("字符串常量池在内存中的什么位置呢？")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[660]||(n[660]=[s("“那哥，字符串常量池在内存中的什么位置呢？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[661]||(n[661]=[s("我说，“三妹，你这个问题问得好呀！”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[662]||(n[662]=[s("分为三个阶段。")])),_:1}),i("h5",ea,[i("a",ia,[i("span",null,[i("a",ta,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[663]||(n[663]=[s("Java 7 之前")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[664]||(n[664]=[s("在 Java 7 之前，字符串常量池位于永久代（Permanent Generation）的内存区域中，主要用来存储一些字符串常量（静态数据的一种）。永久代是 Java 堆（Java Heap）的一部分，用于存储类信息、方法信息、常量池信息等静态数据。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[665]||(n[665]=[s("而 Java 堆是 JVM 中存储对象实例和数组的内存区域，也就是说，永久代是 Java 堆的一个子区域。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[666]||(n[666]=[s("换句话说，永久代中存储的静态数据与堆中存储的对象实例和数组是分开的，它们有不同的生命周期和分配方式。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[667]||(n[667]=[s("但是，永久代和堆的大小是相互影响的，因为它们都使用了 JVM 堆内存，因此它们的大小都受到 JVM 堆大小的限制。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[668]||(n[668]=[s("于是，当我们创建一个字符串常量时，它会被储存在永久代的字符串常量池中。如果我们创建一个普通字符串对象，则它将被储存在堆中。如果字符串对象的内容是一个已经存在于字符串常量池中的字符串常量，那么这个对象会指向已经存在的字符串常量，而不是重新创建一个新的字符串对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[669]||(n[669]=[s("画幅图，大概就是这个样子。")])),_:1}),n[1539]||(n[1539]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660488696-d1e1104e-39e2-4757-b6f6-1de99f9e8ffb.png"},null,-1)),i("h5",ra,[i("a",oa,[i("span",null,[i("a",pa,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[670]||(n[670]=[s("Java 7")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[671]||(n[671]=[s("需要注意的是，永久代的大小是有限的，并且很难准确地确定一个应用程序需要多少永久代空间。如果我们在应用程序中使用了大量的类、方法、常量等静态数据，就有可能导致永久代空间不足。这种情况下，JVM 就会抛出 OutOfMemoryError 错误。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[672]||(n[672]=[s("因此，从 Java 7 开始，为了解决永久代空间不足的问题，将字符串常量池从永久代中移动到堆中。这个改变也是为了更好地支持动态语言的运行时特性。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[673]||(n[673]=[s("再画幅图，大概就是这样子。")])),_:1}),n[1540]||(n[1540]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660488855-1d5c38bc-789b-476c-9d7a-3fabd03d80f2.png"},null,-1)),i("h5",da,[i("a",ua,[i("span",null,[i("a",ba,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[674]||(n[674]=[s("Java 8")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[675]||(n[675]=[s("到了 Java 8，永久代（PermGen）被取消，并由元空间（Metaspace）取代。元空间是一块本机内存区域，和 JVM 内存区域是分开的。不过，元空间的作用依然和之前的永久代一样，用于存储类信息、方法信息、常量池信息等静态数据。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[676]||(n[676]=[s("与永久代不同，元空间具有一些优点，例如：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[677]||(n[677]=[s("它不会导致 OutOfMemoryError 错误，因为元空间的大小可以动态调整。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[678]||(n[678]=[s("元空间使用本机内存，而不是 JVM 堆内存，这可以避免堆内存的碎片化问题。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[679]||(n[679]=[s("元空间中的垃圾收集与堆中的垃圾收集是分离的，这可以避免应用程序在运行过程中因为进行类加载和卸载而频繁地触发 Full GC。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[680]||(n[680]=[s("再画幅图，对比来看一下，就会一目了然。")])),_:1}),n[1541]||(n[1541]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660489029-5f8edc7e-b18e-44f3-a8e5-026447d270ca.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[681]||(n[681]=[s("字符串常量池的位置变化")])),_:1}),i("h4",va,[i("a",ga,[i("span",null,[i("a",ma,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[682]||(n[682]=[s("永久代、方法区、元空间")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[683]||(n[683]=[s("“哥，能再简单给我解释一下方法区，永久代和元空间的概念吗？有点模糊。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[684]||(n[684]=[s("“可以呀。”")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[685]||(n[685]=[s("方法区是 Java 虚拟机规范中的一个概念，就像是一个")])),_:1}),n[688]||(n[688]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[686]||(n[686]=[s("接口")])),_:1}),n[689]||(n[689]=s("](https://javabetter.cn/oo/interface.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[687]||(n[687]=[s("吧；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[690]||(n[690]=[s("永久代是 HotSpot 虚拟机中对方法区的一个实现，就像是接口的实现类；")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[691]||(n[691]=[s("Java 8 的时候，移除了永久代，取而代之的是元空间，是方法区的另外一种实现，更灵活了。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[692]||(n[692]=[s("永久代是放在运行时数据区中的，所以它的大小受到 Java 虚拟机本身大小的限制，所以 Java 8 之前，会经常遇到 ")])),_:1}),n[1542]||(n[1542]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[693]||(n[693]=[s("java.lang.OutOfMemoryError: PremGen Space")])),_:1}),n[1543]||(n[1543]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[694]||(n[694]=[s(" 的异常，PremGen Space 就是方法区的意思；而元空间是直接放在内存中的，所以只受本机可用内存的限制。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",ya,[i("a",fa,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[695]||(n[695]=[s("详解 String.intern() 方法")])),_:1})])])]),n[1544]||(n[1544]=i("hr",null,null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[696]||(n[696]=[s("“哥，你发给我的那篇文章我看了，结果直接把我给看得不想学 Java 了！”三妹气冲冲地说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[697]||(n[697]=[s("“哪一篇啊？”看着三妹面色沉重，我关心地问到。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[698]||(n[698]=[s("“就是")])),_:1}),n[1545]||(n[1545]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[699]||(n[699]=[s("美团技术团队深入解析String.intern()那篇")])),_:1}),n[1546]||(n[1546]=s("](https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[700]||(n[700]=[s("啊！”三妹回答。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[701]||(n[701]=[s("“哦，我想起来了，不挺好一篇文章嘛，深入浅出，精品中的精品，看完后你应该对 String 的 intern 方法彻底理解了才对呀。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[702]||(n[702]=[s("“好是好，但我就是看不懂！”三妹委屈地说，“哥，还是你亲自给我讲讲吧？”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[703]||(n[703]=[s("“好吧，上次学的")])),_:1}),n[1547]||(n[1547]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[704]||(n[704]=[s("字符串常量池")])),_:1}),n[1548]||(n[1548]=s("](https://javabetter.cn/string/constant-pool.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[705]||(n[705]=[s("你都搞清楚了吧？”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[706]||(n[706]=[s("“嗯。”三妹微微的点了点头。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[707]||(n[707]=[s("要理解美团技术团队的这篇文章，你只需要记住这几点内容：")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[708]||(n[708]=[s("第一，使用双引号声明的字符串对象会保存在字符串常量池中。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[709]||(n[709]=[s("第二，使用 new 关键字创建的字符串对象会先从字符串常量池中找，如果没找到就创建一个，然后再在堆中创建字符串对象；如果找到了，就直接在堆中创建字符串对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[710]||(n[710]=[s("第三，针对没有使用双引号声明的字符串对象来说，就像下面代码中的 s1 那样：")])),_:1}),n[1549]||(n[1549]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s1 = new String(&quot;二哥&quot;) + new String(&quot;三妹&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[711]||(n[711]=[s("如果想把 s1 的内容也放入字符串常量池的话，可以调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1550]||(n[1550]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[712]||(n[712]=[s("intern()")])),_:1}),n[1551]||(n[1551]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[713]||(n[713]=[s("方法来完成。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[714]||(n[714]=[s("不过，需要注意的是，Java 7 的时候，字符串常量池从永久代中移动到了堆中，虽然此时永久代还没有完全被移除。Java 8 的时候，永久代被彻底移除。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[715]||(n[715]=[s("这个变化也直接影响了")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1552]||(n[1552]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[716]||(n[716]=[s("String.intern()")])),_:1}),n[1553]||(n[1553]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[717]||(n[717]=[s("方法在执行时的策略，Java 7 之前，执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1554]||(n[1554]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[718]||(n[718]=[s("String.intern()")])),_:1}),n[1555]||(n[1555]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[719]||(n[719]=[s("方法的时候，不管对象在堆中是否已经创建，字符串常量池中仍然会创建一个内容完全相同的新对象； Java 7 之后呢，由于字符串常量池放在了堆中，执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1556]||(n[1556]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[720]||(n[720]=[s("String.intern()")])),_:1}),n[1557]||(n[1557]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[721]||(n[721]=[s("方法的时候，如果对象在堆中已经创建了，字符串常量池中就不需要再创建新的对象了，而是直接保存堆中对象的引用，也就节省了一部分的内存空间。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[722]||(n[722]=[s("“还没有理解清楚，二哥”，三妹很苦恼。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[723]||(n[723]=[s("“嗯。。。别怕，三妹，先来猜猜这段代码输出的结果吧。”我说。")])),_:1}),n[1558]||(n[1558]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s1 = new String(&quot;二哥三妹&quot;);</span>
<span class="line">String s2 = s1.intern();</span>
<span class="line">System.out.println(s1 == s2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[724]||(n[724]=[s("“哥，这我完全猜不出啊，还是你直接解释吧。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[725]||(n[725]=[s("“好吧。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[726]||(n[726]=[s("第一行代码，字符串常量池中会先创建一个“二哥三妹”的对象，然后堆中会再创建一个“二哥三妹”的对象，s1 引用的是堆中的对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[727]||(n[727]=[s("第二行代码，对 s1 执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1559]||(n[1559]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[728]||(n[728]=[s("intern()")])),_:1}),n[1560]||(n[1560]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[729]||(n[729]=[s("方法，该方法会从字符串常量池中查找“二哥三妹”这个字符串是否存在，此时是存在的，所以 s2 引用的是字符串常量池中的对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[730]||(n[730]=[s("也就意味着 s1 和 s2 的引用地址是不同的，一个来自堆，一个来自字符串常量池，所以输出的结果为 false。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[731]||(n[731]=[s("“来看一下运行结果。”我说。")])),_:1}),n[1561]||(n[1561]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[732]||(n[732]=[s("“我来画幅图，帮助你理解下。”看到三妹惊讶的表情，我耐心地说。")])),_:1}),n[1562]||(n[1562]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660542998-2e56ddfd-01ce-4d4f-ac8e-c480109fbbfa.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[733]||(n[733]=[s("“这下理解了吧？”我问三妹。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[734]||(n[734]=[s("“嗯嗯，一下子就豁然开朗了！”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[735]||(n[735]=[s("“好，我们再来看下面这段代码。”")])),_:1}),n[1563]||(n[1563]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String s1 = new String(&quot;二哥&quot;) + new String(&quot;三妹&quot;);</span>
<span class="line">String s2 = s1.intern();</span>
<span class="line">System.out.println(s1 == s2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[736]||(n[736]=[s("“难道也输出 false ？”三妹有点不确定。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[737]||(n[737]=[s("“不，这段代码会输出 true。”我否定了三妹的猜测。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[738]||(n[738]=[s("“为啥呀？”三妹迫切地想要知道答案。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[739]||(n[739]=[s("第一行代码，会在字符串常量池中创建两个对象，一个是“二哥”，一个是“三妹”，然后在堆中会创建两个匿名对象“二哥”和“三妹”，最后还有一个“二哥三妹”的对象（稍后会解释），s1 引用的是堆中“二哥三妹”这个对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[740]||(n[740]=[s("第二行代码，对 s1 执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1564]||(n[1564]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[741]||(n[741]=[s("intern()")])),_:1}),n[1565]||(n[1565]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[742]||(n[742]=[s("方法，该方法会从字符串常量池中查找“二哥三妹”这个对象是否存在，此时不存在的，但堆中已经存在了，所以字符串常量池中保存的是堆中这个“二哥三妹”对象的引用，也就是说，s2 和 s1 的引用地址是相同的，所以输出的结果为 true。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[743]||(n[743]=[s("“来看一下运行结果。”我胸有成竹地说。")])),_:1}),n[1566]||(n[1566]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[744]||(n[744]=[s("“我再来画幅图，帮助你理解下。”")])),_:1}),n[1567]||(n[1567]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660543114-fe0a2d55-77ce-4419-8847-2fbf1ce3d0ec.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[745]||(n[745]=[s("“哇，我明白了！”三妹长舒一口气，大有感慨 intern 也没什么难理解的意味，“不过，我有一个疑惑，“二哥三妹”这个对象是什么时候创建的呢？”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[746]||(n[746]=[s("“三妹，不错嘛，能抓住问题的关键。再来解释一下")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1568]||(n[1568]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[747]||(n[747]=[s('String s1 = new String("二哥") + new String("三妹")')])),_:1}),n[1569]||(n[1569]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[748]||(n[748]=[s("这行代码。”我对三妹的表现非常开心。")])),_:1}),i("ol",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[749]||(n[749]=[s('创建 "二哥" 字符串对象，存储在字符串常量池中。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[750]||(n[750]=[s('创建 "三妹" 字符串对象，存储在字符串常量池中。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[751]||(n[751]=[s("执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[754]||(n[754]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[752]||(n[752]=[s('new String("二哥")')])),_:1}),n[755]||(n[755]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[753]||(n[753]=[s('，在堆上创建一个字符串对象，内容为 "二哥"。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[756]||(n[756]=[s("执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[759]||(n[759]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[757]||(n[757]=[s('new String("三妹")')])),_:1}),n[760]||(n[760]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[758]||(n[758]=[s('，在堆上创建一个字符串对象，内容为 "三妹"。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[761]||(n[761]=[s("执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[764]||(n[764]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[762]||(n[762]=[s('new String("二哥") + new String("三妹")')])),_:1}),n[765]||(n[765]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[763]||(n[763]=[s('，会创建一个 StringBuilder 对象，并将 "二哥" 和 "三妹" 追加到其中，然后调用 StringBuilder 对象的 toString() 方法，将其转换为一个新的字符串对象，内容为 "二哥三妹"。这个新的字符串对象存储在堆上。')])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[766]||(n[766]=[s("也就是说，当编译器遇到")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1570]||(n[1570]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[767]||(n[767]=[s("+")])),_:1}),n[1571]||(n[1571]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[768]||(n[768]=[s("号这个操作符的时候，会将")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1572]||(n[1572]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[769]||(n[769]=[s('new String("二哥") + new String("三妹")')])),_:1}),n[1573]||(n[1573]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[770]||(n[770]=[s("这行代码编译为以下代码：")])),_:1}),n[1574]||(n[1574]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new StringBuilder().append(&quot;二哥&quot;).append(&quot;三妹&quot;).toString();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[771]||(n[771]=[s("实际执行过程如下：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[772]||(n[772]=[s("创建一个 StringBuilder 对象。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[773]||(n[773]=[s('在 StringBuilder 对象上调用 append("二哥")，将 "二哥" 追加到 StringBuilder 中。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[774]||(n[774]=[s('在 StringBuilder 对象上调用 append("三妹")，将 "三妹" 追加到 StringBuilder 中。')])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[775]||(n[775]=[s('在 StringBuilder 对象上调用 toString() 方法，将 StringBuilder 转换为一个新的字符串对象，内容为 "二哥三妹"。')])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[776]||(n[776]=[s("关于")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1575]||(n[1575]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[777]||(n[777]=[s("StringBuilder")])),_:1}),n[1576]||(n[1576]=s("](https://javabetter.cn/string/builder-buffer.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[778]||(n[778]=[s("，我们随后会详细地讲到。今天先了解到这。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[779]||(n[779]=[s("不过需要注意的是，尽管 intern 可以确保所有具有相同内容的字符串共享相同的内存空间，但也不要烂用 intern，因为任何的缓存池都是有大小限制的，不能无缘无故就占用了相对稀缺的缓存空间，导致其他字符串没有坑位可占。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[780]||(n[780]=[s("另外，字符串常量池本质上是一个固定大小的 StringTable，如果放进去的字符串过多，就会造成严重的哈希冲突，从而导致链表变长，链表变长也就意味着字符串常量池的性能会大幅下降，因为要一个一个找是需要花费时间的。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[781]||(n[781]=[s("“好了，三妹，关于 String 的 intern 就讲到这吧，这次理解了吧？”我问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[782]||(n[782]=[s("“哥，你真棒！”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[783]||(n[783]=[s("看到三妹一点一滴的进步，我也感到由衷的开心。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",ca,[i("a",ka,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[784]||(n[784]=[s("聊聊 Java StringBuilder和StringBuffer 两兄弟")])),_:1})])])]),n[1577]||(n[1577]=i("hr",null,null,-1)),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[785]||(n[785]=[s("此页内容")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[786]||(n[786]=[s("“哥，")])),_:1}),n[1578]||(n[1578]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[787]||(n[787]=[s("上一篇深入理解 String.intern()")])),_:1}),n[1579]||(n[1579]=s("](https://javabetter.cn/string/intern.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[788]||(n[788]=[s("讲到了 StringBuilder，这一节我们就来聊聊吧！”三妹很期待。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[789]||(n[789]=[s("“好啊，它们之间的关系还真的是挺和谐的。”看着三妹好奇的样子，我感到学技术就应该是这个样子才对。")])),_:1}),i("h4",Sa,[i("a",qa,[i("span",null,[i("a",xa,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[790]||(n[790]=[s("StringBuffer和StringBuilder的区别")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[791]||(n[791]=[s("由于")])),_:1}),n[1580]||(n[1580]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[792]||(n[792]=[s("字符串是不可变的")])),_:1}),n[1581]||(n[1581]=s("](https://javabetter.cn/string/immutable.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[793]||(n[793]=[s("，所以当遇到")])),_:1}),n[1582]||(n[1582]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[794]||(n[794]=[s("字符串拼接")])),_:1}),n[1583]||(n[1583]=s("](https://javabetter.cn/string/join.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[795]||(n[795]=[s("（尤其是使用")])),_:1}),n[1584]||(n[1584]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[796]||(n[796]=[s("+")])),_:1}),n[1585]||(n[1585]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[797]||(n[797]=[s("号操作符）的时候，就需要考量性能的问题，你不能毫无顾虑地生产太多 String 对象，对珍贵的内存造成不必要的压力。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[798]||(n[798]=[s("于是 Java 就设计了一个专门用来解决此问题的 StringBuffer 类。")])),_:1}),n[1586]||(n[1586]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public final class StringBuffer extends AbstractStringBuilder implements Serializable, CharSequence {</span>
<span class="line"></span>
<span class="line">    public StringBuffer() {</span>
<span class="line">        super(16);</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    public synchronized StringBuffer append(String str) {</span>
<span class="line">        super.append(str);</span>
<span class="line">        return this;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public synchronized String toString() {</span>
<span class="line">        return new String(value, 0, count);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // 其他方法</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[799]||(n[799]=[s("不过，由于 StringBuffer 操作字符串的方法加了")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1587]||(n[1587]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[800]||(n[800]=[s("synchronized关键字")])),_:1}),n[1588]||(n[1588]=s("](https://javabetter.cn/thread/synchronized-1.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[801]||(n[801]=[s("进行了同步，主要是考虑到多线程环境下的安全问题，所以如果在非多线程环境下，执行效率就会比较低，因为加了没必要的锁。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[802]||(n[802]=[s("于是 Java 就给 StringBuffer “生了个兄弟”，名叫 StringBuilder，说，“孩子，你别管线程安全了，你就在单线程环境下使用，这样效率会高得多，如果要在多线程环境下修改字符串，你到时候可以使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1589]||(n[1589]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[803]||(n[803]=[s("ThreadLocal")])),_:1}),n[1590]||(n[1590]=s("](https://javabetter.cn/thread/ThreadLocal.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[804]||(n[804]=[s("来避免多线程冲突。”")])),_:1}),n[1591]||(n[1591]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public final class StringBuilder extends AbstractStringBuilder</span>
<span class="line">    implements java.io.Serializable, CharSequence</span>
<span class="line">{</span>
<span class="line">    // ...</span>
<span class="line"></span>
<span class="line">    public StringBuilder append(String str) {</span>
<span class="line">        super.append(str);</span>
<span class="line">        return this;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public String toString() {</span>
<span class="line">        // Create a copy, don&#39;t share the array</span>
<span class="line">        return new String(value, 0, count);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // ...</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[805]||(n[805]=[s("除了类名不同，方法没有加 synchronized，基本上完全一样。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[806]||(n[806]=[s("实际开发中，StringBuilder 的使用频率也是远高于 StringBuffer，甚至可以这么说，StringBuilder 完全取代了 StringBuffer。")])),_:1}),i("h4",ja,[i("a",wa,[i("span",null,[i("a",Ba,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[807]||(n[807]=[s("StringBuilder的使用")])),_:1}),l(r)])])])]),i("p",null,[i("a",Ca,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[808]||(n[808]=[s("之前我们也曾聊过")])),_:1}),l(r)]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[809]||(n[809]=[s("，Java 是一门解释型的编程语言，所以当编译器遇到")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[812]||(n[812]=i("code",null,'<font style="color:rgb(44, 62, 80);">+</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[810]||(n[810]=[s("号这个操作符的时候，会将")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[813]||(n[813]=i("code",null,'<font style="color:rgb(44, 62, 80);">new String("二哥") + new String("三妹")</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[811]||(n[811]=[s("这行代码解释为以下代码：")])),_:1})]),n[1592]||(n[1592]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new StringBuilder().append(&quot;二哥&quot;).append(&quot;三妹&quot;).toString();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[814]||(n[814]=[s("这个过程是我们看不见的，但这正是 Java 的“智能”之处，它可以在编译的时候偷偷地帮我们做很多优化，这样既可以提高我们的开发效率（")])),_:1}),n[1593]||(n[1593]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[815]||(n[815]=[s("+")])),_:1}),n[1594]||(n[1594]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[816]||(n[816]=[s("号写起来比创建 StringBuilder 对象便捷得多），也不会影响 JVM 的执行效率。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[817]||(n[817]=[s("当然了，如果我们使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1595]||(n[1595]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[818]||(n[818]=[s("javap")])),_:1}),n[1596]||(n[1596]=s("](https://javabetter.cn/jvm/bytecode.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[819]||(n[819]=[s("反编译")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1597]||(n[1597]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[820]||(n[820]=[s('new String("二哥") + new String("三妹")')])),_:1}),n[1598]||(n[1598]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[821]||(n[821]=[s("的字节码的时候，也是能看出 StringBuilder 的影子的。")])),_:1}),i("p",null,[i("a",Ea,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[822]||(n[822]=[s("javap 和字节码")])),_:1}),l(r)]),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[823]||(n[823]=[s("会在后面讲 JVM 的时候详细讲解，戳链接了解详情。")])),_:1})]),n[1599]||(n[1599]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">0: new           #2                  // class java/lang/StringBuilder</span>
<span class="line">3: dup</span>
<span class="line">4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
<span class="line">7: new           #4                  // class java/lang/String</span>
<span class="line">10: dup</span>
<span class="line">11: ldc           #5                  // String 二哥</span>
<span class="line">13: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
<span class="line">16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
<span class="line">19: new           #4                  // class java/lang/String</span>
<span class="line">22: dup</span>
<span class="line">23: ldc           #8                  // String 三妹</span>
<span class="line">25: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
<span class="line">28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
<span class="line">31: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
<span class="line">34: areturn</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[824]||(n[824]=[s("可以看到 Java 编译器将字符串拼接操作（")])),_:1}),n[1600]||(n[1600]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[825]||(n[825]=[s("+")])),_:1}),n[1601]||(n[1601]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[826]||(n[826]=[s("）转换为了 StringBuilder 对象的 append 方法，然后再调用 StringBuilder 对象的 toString 方法返回拼接后的字符串。")])),_:1}),i("h4",Aa,[i("a",Ja,[i("span",null,[i("a",Ia,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[827]||(n[827]=[s("StringBuilder的内部实现")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[828]||(n[828]=[s("来看一下 StringBuilder 的 toString 方法：")])),_:1}),n[1602]||(n[1602]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String toString() {</span>
<span class="line">    return new String(value, 0, count);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[829]||(n[829]=[s("value 是一个 char 类型的")])),_:1}),n[1603]||(n[1603]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[830]||(n[830]=[s("数组")])),_:1}),n[1604]||(n[1604]=s("](https://javabetter.cn/array/array.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[831]||(n[831]=[s("：")])),_:1}),n[1605]||(n[1605]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">/**</span>
<span class="line"> * The value is used for character storage.</span>
<span class="line"> */</span>
<span class="line">char[] value;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[832]||(n[832]=[s("在 StringBuilder 对象创建时，会为 value 分配一定的内存空间（初始容量 16），用于存储字符串。")])),_:1}),n[1606]||(n[1606]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">/**</span>
<span class="line"> * Constructs a string builder with no characters in it and an</span>
<span class="line"> * initial capacity of 16 characters.</span>
<span class="line"> */</span>
<span class="line">public StringBuilder() {</span>
<span class="line">    super(16);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[833]||(n[833]=[s("随着字符串的拼接，value 数组的长度会不断增加，因此在 StringBuilder 对象的实现中，value 数组的长度是可以")])),_:1}),n[1607]||(n[1607]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[834]||(n[834]=[s("动态扩展的，就像ArrayList那样")])),_:1}),n[1608]||(n[1608]=s("](https://javabetter.cn/collection/arraylist.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[835]||(n[835]=[s("。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[836]||(n[836]=[s("继续来看 StringBuilder 的 toString 方法：")])),_:1}),n[1609]||(n[1609]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String toString() {</span>
<span class="line">    return new String(value, 0, count);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[837]||(n[837]=[s("value 用于存储 StringBuilder 对象中包含的字符序列。count 是一个 int 类型的变量，表示字符序列的长度。toString() 方法会调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1610]||(n[1610]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[838]||(n[838]=[s("new String(value, 0, count)")])),_:1}),n[1611]||(n[1611]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[839]||(n[839]=[s("，使用 value 数组中从 0 开始的前 count 个元素创建一个新的字符串对象，并将其返回。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[840]||(n[840]=[s("再来看一下 append 方法：")])),_:1}),n[1612]||(n[1612]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public StringBuilder append(String str) {</span>
<span class="line">    super.append(str);</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[841]||(n[841]=[s("实际上是调用了 AbstractStringBuilder 中的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1613]||(n[1613]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[842]||(n[842]=[s("append(String str)")])),_:1}),n[1614]||(n[1614]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[843]||(n[843]=[s("方法。在 AbstractStringBuilder 中，")])),_:1}),n[1615]||(n[1615]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[844]||(n[844]=[s("append(String str)")])),_:1}),n[1616]||(n[1616]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[845]||(n[845]=[s("方法会检查当前字符序列中的字符是否够用，如果不够用则会进行扩容，并将指定字符串追加到字符序列的末尾。")])),_:1}),n[1617]||(n[1617]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public AbstractStringBuilder append(String str) {</span>
<span class="line">    if (str == null)</span>
<span class="line">        return appendNull();</span>
<span class="line">    int len = str.length();</span>
<span class="line">    ensureCapacityInternal(count + len);</span>
<span class="line">    str.getChars(0, len, value, count);</span>
<span class="line">    count += len;</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[847]||(n[847]=i("code",null,'<font style="color:rgb(44, 62, 80);">append(String str)</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[846]||(n[846]=[s('方法将指定字符串追加到当前字符序列中。如果指定字符串为 null，则追加字符串 "null"；否则会检查指定字符串的长度，然后根据当前字符序列中的字符数和指定字符串的长度来判断是否需要扩容。')])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[848]||(n[848]=[s("如果需要扩容，则会调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1618]||(n[1618]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[849]||(n[849]=[s("ensureCapacityInternal(int minimumCapacity)")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1619]||(n[1619]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[850]||(n[850]=[s("方法。扩容之后，将指定字符串的字符拷贝到字符序列中。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[851]||(n[851]=[s("来看一下 ensureCapacityInternal 方法：")])),_:1}),n[1620]||(n[1620]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private void ensureCapacityInternal(int minimumCapacity) {</span>
<span class="line">    // 不够用了，扩容</span>
<span class="line">    if (minimumCapacity - value.length &gt; 0)</span>
<span class="line">        expandCapacity(minimumCapacity);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">void expandCapacity(int minimumCapacity) {</span>
<span class="line">    // 扩容策略：新容量为旧容量的两倍加上 2</span>
<span class="line">    int newCapacity = value.length * 2 + 2;</span>
<span class="line">    // 如果新容量小于指定的最小容量，则新容量为指定的最小容量</span>
<span class="line">    if (newCapacity - minimumCapacity &lt; 0)</span>
<span class="line">        newCapacity = minimumCapacity;</span>
<span class="line">    // 如果新容量小于 0，则新容量为 Integer.MAX_VALUE</span>
<span class="line">    if (newCapacity &lt; 0) {</span>
<span class="line">        if (minimumCapacity &lt; 0) // overflow</span>
<span class="line">            throw new OutOfMemoryError();</span>
<span class="line">        newCapacity = Integer.MAX_VALUE;</span>
<span class="line">    }</span>
<span class="line">    // 将字符序列的容量扩容到新容量的大小</span>
<span class="line">    value = Arrays.copyOf(value, newCapacity);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[853]||(n[853]=i("code",null,'<font style="color:rgb(44, 62, 80);">ensureCapacityInternal(int minimumCapacity)</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[852]||(n[852]=[s("方法用于确保当前字符序列的容量至少等于指定的最小容量 minimumCapacity。如果当前容量小于指定的容量，就会为字符序列分配一个新的内部数组。新容量的计算方式如下：")])),_:1})]),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[854]||(n[854]=[s("如果指定的最小容量大于当前容量，则新容量为两倍的旧容量加上 2。为什么要加 2 呢？对于非常小的字符串（比如空的或只有一个字符的 StringBuilder），仅仅将容量加倍可能仍然不足以容纳更多的字符。在这种情况下，+ 2 提供了一个最小的增长量，确保即使对于很小的初始容量，扩容后也能至少添加一些字符而不需要立即再次扩容。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[855]||(n[855]=[s("如果指定的最小容量小于等于当前容量，则不会进行扩容，直接返回当前对象。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[856]||(n[856]=[s("在进行扩容之前，")])),_:1}),n[1621]||(n[1621]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[857]||(n[857]=[s("ensureCapacityInternal(int minimumCapacity)")])),_:1}),n[1622]||(n[1622]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[858]||(n[858]=[s("方法会先检查当前字符序列的容量是否足够，如果不足就会调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1623]||(n[1623]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[859]||(n[859]=[s("expandCapacity(int minimumCapacity)")])),_:1}),n[1624]||(n[1624]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[860]||(n[860]=[s("方法进行扩容。")])),_:1}),n[1625]||(n[1625]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[861]||(n[861]=[s("expandCapacity(int minimumCapacity)")])),_:1}),n[1626]||(n[1626]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[862]||(n[862]=[s("方法首先计算出新容量，然后使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1627]||(n[1627]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[863]||(n[863]=[s("Arrays.copyOf(char[] original, int newLength)")])),_:1}),n[1628]||(n[1628]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[864]||(n[864]=[s("方法将原字符数组扩容到新容量的大小。")])),_:1}),i("ul",null,[i("li",null,[i("a",Oa,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[865]||(n[865]=[s("Arrays")])),_:1}),l(r)]),l(a,{style:{color:"rgb(102, 102, 102)"}}),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[866]||(n[866]=[s("是 Java 中用于操作数组的工具类，后面也会讲到。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[867]||(n[867]=[s("关于扩容，后面在讲")])),_:1}),n[870]||(n[870]=s("[")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[868]||(n[868]=[s("ArrayList")])),_:1}),n[871]||(n[871]=s("](https://javabetter.cn/collection/arraylist.html)")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[869]||(n[869]=[s("的时候会再次说明，到时候你可以回头对比来看一下，因为 ArrayList 底部实现也是数组。")])),_:1})])]),i("h4",Da,[i("a",La,[i("span",null,[i("a",Ua,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[872]||(n[872]=[s("StringBuilder的 reverse 方法")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[873]||(n[873]=[s("StringBuilder 还提供了一个 reverse 方法，用于反转当前字符序列中的字符。")])),_:1}),n[1629]||(n[1629]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public StringBuilder reverse() {</span>
<span class="line">    super.reverse();</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[874]||(n[874]=[s("也是调用了父类 AbstractStringBuilder 中的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1630]||(n[1630]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[875]||(n[875]=[s("reverse()")])),_:1}),n[1631]||(n[1631]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[876]||(n[876]=[s("方法，我把一些非核心代码剔除掉了。")])),_:1}),n[1632]||(n[1632]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public AbstractStringBuilder reverse() {</span>
<span class="line">    int n = count - 1; // 字符序列的最后一个字符的索引</span>
<span class="line">    // 遍历字符串的前半部分</span>
<span class="line">    for (int j = (n-1) &gt;&gt; 1; j &gt;= 0; j--) {</span>
<span class="line">        int k = n - j; // 计算相对于 j 对称的字符的索引</span>
<span class="line">        char cj = value[j]; // 获取当前位置的字符</span>
<span class="line">        char ck = value[k]; // 获取对称位置的字符</span>
<span class="line">        value[j] = ck; // 交换字符</span>
<span class="line">        value[k] = cj; // 交换字符</span>
<span class="line">    }</span>
<span class="line">    return this; // 返回反转后的字符串构建器对象</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("ol",null,[i("li",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[877]||(n[877]=[s("初始化")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[878]||(n[878]=[s("：")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[880]||(n[880]=i("code",null,'<font style="color:rgb(44, 62, 80);">n</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[879]||(n[879]=[s("是字符串中最后一个字符的索引。")])),_:1})]),i("li",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[881]||(n[881]=[s("字符串反转")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[882]||(n[882]=[s("：")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[883]||(n[883]=[s("方法通过一个")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[890]||(n[890]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[884]||(n[884]=[s("for")])),_:1}),n[891]||(n[891]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[885]||(n[885]=[s("循环遍历字符串的前半部分和后半部分，这是一个非常巧妙的点，比从头到尾遍历省了一半的时间。")])),_:1}),n[892]||(n[892]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[886]||(n[886]=[s("(n-1) >> 1")])),_:1}),n[893]||(n[893]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[887]||(n[887]=[s("是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[894]||(n[894]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[888]||(n[888]=[s("(n-1) / 2")])),_:1}),n[895]||(n[895]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[889]||(n[889]=[s("的位运算表示，也就是字符串的前半部分的最后一个字符的索引。")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[896]||(n[896]=[s("在每次迭代中，计算出与当前索引")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[901]||(n[901]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[897]||(n[897]=[s("j")])),_:1}),n[902]||(n[902]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[898]||(n[898]=[s("对称的索引")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[903]||(n[903]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[899]||(n[899]=[s("k")])),_:1}),n[904]||(n[904]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[900]||(n[900]=[s("，并交换这两个索引位置的字符。")])),_:1})])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[905]||(n[905]=[s("LeetCode 的第 7 题《")])),_:1}),n[1633]||(n[1633]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[906]||(n[906]=[s("007.整数反转")])),_:1}),n[1634]||(n[1634]=s("](https://leetcode-cn.com/problems/reverse-integer/)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[907]||(n[907]=[s("》要求我们反转一个整数，其实就可以借助 StringBuilder 的 reverse 方法来实现。")])),_:1}),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[908]||(n[908]=[s("题解放在了")])),_:1}),n[1635]||(n[1635]=s("[")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[909]||(n[909]=[s("技术派")])),_:1}),n[1636]||(n[1636]=s("](https://paicoding.com/column/7/7)")),l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[910]||(n[910]=[s("上，可以参考。")])),_:1}),i("h4",Fa,[i("a",Ma,[i("span",null,[i("a",Ta,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[911]||(n[911]=[s("小结")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[912]||(n[912]=[s("“我想，关于 StringBuilder、StringBuilder 之间的差别，你都搞清楚了吧？”我问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[913]||(n[913]=[s("“搞清楚的话，可以通过 LeetCode 的第六题《006.Z 字形变换》进行测试，我把题解放在了")])),_:1}),n[1637]||(n[1637]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[914]||(n[914]=[s("技术派")])),_:1}),n[1638]||(n[1638]=s("](https://paicoding.com/column/7/6)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[915]||(n[915]=[s("上，你可以作为参考。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[916]||(n[916]=[s("“哥，你真棒！区别我是搞清楚了，你后面讲的源码扩容还没消化，我一会去加个餐，再细看一下。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[917]||(n[917]=[s("“可以的，实际上，你现在只需要知道 StringBuilder 的用法就可以了。”喝了一口右手边的可口可乐（无糖）后，我感觉好爽快啊。")])),_:1}),n[1639]||(n[1639]=i("hr",null,null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[918]||(n[918]=[s("GitHub 上标星 10000+ 的开源知识库《")])),_:1}),n[1640]||(n[1640]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[919]||(n[919]=[s("二哥的 Java 进阶之路")])),_:1}),n[1641]||(n[1641]=s("](https://github.com/itwanger/toBeBetterJavaer)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[920]||(n[920]=[s("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳：")])),_:1}),n[1642]||(n[1642]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[921]||(n[921]=[s("太赞了，GitHub 上标星 10000+ 的 Java 教程")])),_:1}),n[1643]||(n[1643]=s("](https://javabetter.cn/overview/)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",Pa,[i("a",Na,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[922]||(n[922]=[s("字符串相等判断：Java中的equals()与==的区别与用法")])),_:1})])])]),n[1644]||(n[1644]=i("hr",null,null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[923]||(n[923]=[s("“二哥，如何比较两个字符串相等啊？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[924]||(n[924]=[s("“这个问题看似简单，却在 Stack Overflow 上有超过 370 万+的访问量。”我说，“这个问题也可以引申为")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1645]||(n[1645]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[925]||(n[925]=[s(".equals()")])),_:1}),n[1646]||(n[1646]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[926]||(n[926]=[s("和 ‘==’ 操作符有什么区别。”")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[927]||(n[927]=[s("“==”操作符用于比较两个对象的地址是否相等。")])),_:1})]),i("li",null,[n[929]||(n[929]=i("code",null,'<font style="color:rgb(44, 62, 80);">.equals()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[928]||(n[928]=[s("方法用于比较两个对象的内容是否相等。")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[930]||(n[930]=[s("“不是很理解。”三妹感到很困惑。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[931]||(n[931]=[s("“我来举个不恰当又很恰当的例子，一看你就明白了，三妹。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[932]||(n[932]=[s("有一对双胞胎，姐姐叫阿丽塔，妹妹叫洛丽塔。我们普通人可能完全无法分辨谁是姐姐谁是妹妹，可她们的妈妈却可以轻而易举地辨认出。")])),_:1}),n[1647]||(n[1647]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660586531-1f59be1c-47a2-46c9-9087-ac8626cbd2ac.png"},null,-1)),i("p",null,[n[934]||(n[934]=i("code",null,'<font style="color:rgb(44, 62, 80);">.equals()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[933]||(n[933]=[s("就好像我们普通人，看见阿丽塔以为是洛丽塔，看见洛丽塔以为是阿丽塔，看起来一样就觉得她们是同一个人；“==”操作符就好像她们的妈妈，要求更严格，观察更细致，一眼就能分辨出谁是姐姐谁是妹妹。")])),_:1})]),n[1648]||(n[1648]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String alita = new String(&quot;小萝莉&quot;);</span>
<span class="line">String luolita = new String(&quot;小萝莉&quot;);</span>
<span class="line"></span>
<span class="line">System.out.println(alita.equals(luolita)); // true</span>
<span class="line">System.out.println(alita == luolita); // false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[935]||(n[935]=[s("就上面这段代码来说，")])),_:1}),n[1649]||(n[1649]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[936]||(n[936]=[s(".equals()")])),_:1}),n[1650]||(n[1650]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[937]||(n[937]=[s("输出的结果为 true，而“==”操作符输出的结果为 false——前者要求内容相等就可以，后者要求必须是同一个对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[938]||(n[938]=[s("“三妹，之前已经学过了，Java 的所有类都默认地继承 Object 这个超类，该类有一个名为")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1651]||(n[1651]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[939]||(n[939]=[s(".equals()")])),_:1}),n[1652]||(n[1652]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[940]||(n[940]=[s("的方法。”一边说，我一边打开了 Object 类的源码。")])),_:1}),n[1653]||(n[1653]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public boolean equals(Object obj) {</span>
<span class="line">    return (this == obj);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[941]||(n[941]=[s("你看，Object 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1654]||(n[1654]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[942]||(n[942]=[s(".equals()")])),_:1}),n[1655]||(n[1655]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[943]||(n[943]=[s("方法默认采用的是“")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[944]||(n[944]=[s("”操作符进行比较。假如子类没有重写该方法的话，那么“")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[945]||(n[945]=[s("”操作符和")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1656]||(n[1656]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[946]||(n[946]=[s(".equals()")])),_:1}),n[1657]||(n[1657]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[947]||(n[947]=[s("方法的功效就完全一样——比较两个对象的内存地址是否相等。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[948]||(n[948]=[s("但实际情况中，有不少类重写了")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1658]||(n[1658]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[949]||(n[949]=[s(".equals()")])),_:1}),n[1659]||(n[1659]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[950]||(n[950]=[s("方法，因为比较内存地址的要求比较严格，不太符合现实中所有的场景需求。拿 String 类来说，我们在比较字符串的时候，的确只想判断它们俩的内容是相等的就可以了，并不想比较它们俩是不是同一个对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[951]||(n[951]=[s("况且，字符串有")])),_:1}),n[1660]||(n[1660]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[952]||(n[952]=[s("字符串常量池")])),_:1}),n[1661]||(n[1661]=s("](https://javabetter.cn/string/constant-pool.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[953]||(n[953]=[s("的概念，本身就推荐使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1662]||(n[1662]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[954]||(n[954]=[s('String s = "字符串"')])),_:1}),n[1663]||(n[1663]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[955]||(n[955]=[s("这种形式来创建字符串对象，而不是通过 new 关键字的方式，因为可以把字符串缓存在字符串常量池中，方便下次使用，不用遇到 new 就在堆上开辟一块新的空间。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[956]||(n[956]=[s("“哦，我明白了。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[957]||(n[957]=[s("“那就来看一下 String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1664]||(n[1664]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[958]||(n[958]=[s(".equals()")])),_:1}),n[1665]||(n[1665]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[959]||(n[959]=[s("方法的源码吧。”我说。")])),_:1}),n[1666]||(n[1666]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public boolean equals(Object anObject) {</span>
<span class="line">    if (this == anObject) {</span>
<span class="line">        return true;</span>
<span class="line">    }</span>
<span class="line">    if (anObject instanceof String) {</span>
<span class="line">        String aString = (String)anObject;</span>
<span class="line">        if (coder() == aString.coder()) {</span>
<span class="line">            return isLatin1() ? StringLatin1.equals(value, aString.value)</span>
<span class="line">                    : StringUTF16.equals(value, aString.value);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    return false;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[960]||(n[960]=[s("首先，如果两个字符串对象的可以“==”，那就直接返回 true 了，因为这种情况下，字符串内容是必然相等的。否则就按照字符编码进行比较，分为 UTF16 和 Latin1，差别不是很大，就拿 Latin1 的来说吧。")])),_:1}),n[1667]||(n[1667]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">@HotSpotIntrinsicCandidate</span>
<span class="line">public static boolean equals(byte[] value, byte[] other) {</span>
<span class="line">    if (value.length == other.length) {</span>
<span class="line">        for (int i = 0; i &lt; value.length; i++) {</span>
<span class="line">            if (value[i] != other[i]) {</span>
<span class="line">                return false;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        return true;</span>
<span class="line">    }</span>
<span class="line">    return false;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[961]||(n[961]=[s("这个 JDK 版本是 Java 17，也就是最新的 LTS（长期支持）版本。该版本中，String 类使用字节数组实现的，所以比较两个字符串的内容是否相等时，可以先比较字节数组的长度是否相等，不相等就直接返回 false；否则就遍历两个字符串的字节数组，只有有一个字节不相等，就返回 false。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[962]||(n[962]=[s("这是 Java 8 中的 equals 方法源码：")])),_:1}),n[1668]||(n[1668]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public boolean equals(Object anObject) {</span>
<span class="line">    // 判断是否为同一对象</span>
<span class="line">    if (this == anObject) {</span>
<span class="line">        return true;</span>
<span class="line">    }</span>
<span class="line">    // 判断对象是否为 String 类型</span>
<span class="line">    if (anObject instanceof String) {</span>
<span class="line">        String anotherString = (String)anObject;</span>
<span class="line">        int n = value.length;</span>
<span class="line">        // 判断字符串长度是否相等</span>
<span class="line">        if (n == anotherString.value.length) {</span>
<span class="line">            char v1[] = value;</span>
<span class="line">            char v2[] = anotherString.value;</span>
<span class="line">            int i = 0;</span>
<span class="line">            // 判断每个字符是否相等</span>
<span class="line">            while (n-- != 0) {</span>
<span class="line">                if (v1[i] != v2[i])</span>
<span class="line">                    return false;</span>
<span class="line">                i++;</span>
<span class="line">            }</span>
<span class="line">            return true;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    return false;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[963]||(n[963]=[s("JDK 8 比 JDK 17 更容易懂一些：首先判断两个对象是否为同一个对象，如果是，则返回 true。接着，判断对象是否为 String 类型，如果不是，则返回 false。如果对象为 String 类型，则比较两个字符串的长度是否相等，如果长度不相等，则返回 false。如果长度相等，则逐个比较每个字符是否相等，如果都相等，则返回 true，否则返回 false。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[964]||(n[964]=[s("“嗯，二哥，这段源码不难理解。”三妹自信地说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[965]||(n[965]=[s("“那出几道题考考你吧！”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[966]||(n[966]=[s("第一题：")])),_:1}),n[1669]||(n[1669]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new String(&quot;小萝莉&quot;).equals(&quot;小萝莉&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[967]||(n[967]=[s("“输出什么呢？”我问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[968]||(n[968]=[s("“")])),_:1}),n[1670]||(n[1670]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[969]||(n[969]=[s(".equals()")])),_:1}),n[1671]||(n[1671]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[970]||(n[970]=[s("比较的是两个字符串对象的内容是否相等，所以结果为 true。”三妹不假思索地答到。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[971]||(n[971]=[s("第二题：")])),_:1}),n[1672]||(n[1672]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new String(&quot;小萝莉&quot;) == &quot;小萝莉&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[972]||(n[972]=[s("“==操作符左侧的是在堆中创建的对象，右侧是在字符串常量池中的对象，尽管内容相同，但内存地址不同，所以返回 false。”三妹答。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[973]||(n[973]=[s("第三题：")])),_:1}),n[1673]||(n[1673]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new String(&quot;小萝莉&quot;) == new String(&quot;小萝莉&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[974]||(n[974]=[s("“new 出来的对象肯定是完全不同的内存地址，所以返回 false。”三妹答。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[975]||(n[975]=[s("第四题：")])),_:1}),n[1674]||(n[1674]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">&quot;小萝莉&quot; == &quot;小萝莉&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[976]||(n[976]=[s("“字符串常量池中只会有一个相同内容的对象，所以返回 true。”三妹答。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[977]||(n[977]=[s("第五题：")])),_:1}),n[1675]||(n[1675]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">&quot;小萝莉&quot; == &quot;小&quot; + &quot;萝莉&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[978]||(n[978]=[s("“由于‘小’和‘萝莉’都在字符串常量池，所以编译器在遇到‘+’操作符的时候将其自动优化为“小萝莉”，所以返回 true。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[979]||(n[979]=[s("PS：至于为什么，查看这篇")])),_:1}),n[1676]||(n[1676]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[980]||(n[980]=[s("String、StringBuilder、StringBuffer")])),_:1}),n[1677]||(n[1677]=s("](https://javabetter.cn/string/builder-buffer.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[981]||(n[981]=[s("第六题：")])),_:1}),n[1678]||(n[1678]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">new String(&quot;小萝莉&quot;).intern() == &quot;小萝莉&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[982]||(n[982]=[s("“")])),_:1}),n[1679]||(n[1679]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[983]||(n[983]=[s('new String("小萝莉")')])),_:1}),n[1680]||(n[1680]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[984]||(n[984]=[s("在执行的时候，会先在字符串常量池中创建对象，然后再在堆中创建对象；执行")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1681]||(n[1681]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[985]||(n[985]=[s("intern()")])),_:1}),n[1682]||(n[1682]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[986]||(n[986]=[s("方法的时候发现字符串常量池中已经有了‘小萝莉’这个对象，所以就直接返回字符串常量池中的对象引用了，那再与字符串常量池中的‘小萝莉’比较，当然会返回 true 了。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[987]||(n[987]=[s("PS：")])),_:1}),n[1683]||(n[1683]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[988]||(n[988]=[s("intern")])),_:1}),n[1684]||(n[1684]=s("](https://javabetter.cn/string/intern.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[989]||(n[989]=[s("方法我们之前已经深究过了。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[990]||(n[990]=[s("哇，不得不说，三妹前几节的字符串相关内容都完全学会了呀！")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[991]||(n[991]=[s("“三妹，哥再给你补充一点。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[992]||(n[992]=[s("“如果要进行两个字符串对象的内容比较，除了")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1685]||(n[1685]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[993]||(n[993]=[s(".equals()")])),_:1}),n[1686]||(n[1686]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[994]||(n[994]=[s("方法，还有其他两个可选的方案。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[995]||(n[995]=[s("1）")])),_:1}),n[1687]||(n[1687]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[996]||(n[996]=[s("Objects.equals()")])),_:1}),n[1688]||(n[1688]=s("`")),i("p",null,[n[998]||(n[998]=i("code",null,'<font style="color:rgb(44, 62, 80);">Objects.equals()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[997]||(n[997]=[s("这个静态方法的优势在于不需要在调用之前判空。")])),_:1})]),n[1689]||(n[1689]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static boolean equals(Object a, Object b) {</span>
<span class="line">    return (a == b) || (a != null &amp;&amp; a.equals(b));</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[999]||(n[999]=[s("如果直接使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1690]||(n[1690]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1e3]||(n[1e3]=[s("a.equals(b)")])),_:1}),n[1691]||(n[1691]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1001]||(n[1001]=[s("，则需要在调用之前对 a 进行判空，否则可能会抛出空指针")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1692]||(n[1692]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1002]||(n[1002]=[s("java.lang.NullPointerException")])),_:1}),n[1693]||(n[1693]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1003]||(n[1003]=[s("。")])),_:1}),n[1694]||(n[1694]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1004]||(n[1004]=[s("Objects.equals()")])),_:1}),n[1695]||(n[1695]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1005]||(n[1005]=[s("用起来就完全没有这个担心。")])),_:1}),n[1696]||(n[1696]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Objects.equals(&quot;小萝莉&quot;, new String(&quot;小&quot; + &quot;萝莉&quot;)) // --&gt; true</span>
<span class="line">Objects.equals(null, new String(&quot;小&quot; + &quot;萝莉&quot;)); // --&gt; false</span>
<span class="line">Objects.equals(null, null) // --&gt; true</span>
<span class="line"></span>
<span class="line">String a = null;</span>
<span class="line">a.equals(new String(&quot;小&quot; + &quot;萝莉&quot;)); // throw exception</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1006]||(n[1006]=[s("2）String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1697]||(n[1697]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1007]||(n[1007]=[s(".contentEquals()")])),_:1}),n[1698]||(n[1698]=s("`")),i("p",null,[n[1009]||(n[1009]=i("code",null,'<font style="color:rgb(44, 62, 80);">.contentEquals()</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1008]||(n[1008]=[s("的优势在于可以将字符串与任何的字符序列（StringBuffer、StringBuilder、String、CharSequence）进行比较。")])),_:1})]),n[1699]||(n[1699]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public boolean contentEquals(CharSequence cs) {</span>
<span class="line">    // Argument is a StringBuffer, StringBuilder</span>
<span class="line">    if (cs instanceof AbstractStringBuilder) {</span>
<span class="line">        if (cs instanceof StringBuffer) {</span>
<span class="line">            synchronized(cs) {</span>
<span class="line">                return nonSyncContentEquals((AbstractStringBuilder)cs);</span>
<span class="line">            }</span>
<span class="line">        } else {</span>
<span class="line">            return nonSyncContentEquals((AbstractStringBuilder)cs);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    // Argument is a String</span>
<span class="line">    if (cs instanceof String) {</span>
<span class="line">        return equals(cs);</span>
<span class="line">    }</span>
<span class="line">    // Argument is a generic CharSequence</span>
<span class="line">    int n = cs.length();</span>
<span class="line">    if (n != length()) {</span>
<span class="line">        return false;</span>
<span class="line">    }</span>
<span class="line">    byte[] val = this.value;</span>
<span class="line">    if (isLatin1()) {</span>
<span class="line">        for (int i = 0; i &lt; n; i++) {</span>
<span class="line">            if ((val[i] &amp; 0xff) != cs.charAt(i)) {</span>
<span class="line">                return false;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    } else {</span>
<span class="line">        if (!StringUTF16.contentEquals(val, cs, n)) {</span>
<span class="line">            return false;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    return true;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1010]||(n[1010]=[s("从源码上可以看得出，如果 cs 是 StringBuffer，该方法还会进行同步，非常的智能化；如果是 String 的话，其实调用的还是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1700]||(n[1700]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1011]||(n[1011]=[s("equals()")])),_:1}),n[1701]||(n[1701]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1012]||(n[1012]=[s("方法。当然了，这也就意味着使用该方法进行比较的时候，多出来了很多步骤，性能上有些损失。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1013]||(n[1013]=[s("同样来看一下 JDK 8 的源码：")])),_:1}),n[1702]||(n[1702]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public boolean contentEquals(CharSequence cs) {</span>
<span class="line">    // argument can be any CharSequence implementation</span>
<span class="line">    if (cs.length() != value.length) {</span>
<span class="line">        return false;</span>
<span class="line">    }</span>
<span class="line">    // Argument is a StringBuffer, StringBuilder or String</span>
<span class="line">    if (cs instanceof AbstractStringBuilder) {</span>
<span class="line">        char v1[] = value;</span>
<span class="line">        char v2[] = ((AbstractStringBuilder)cs).getValue();</span>
<span class="line">        int i = 0;</span>
<span class="line">        int n = value.length;</span>
<span class="line">        while (n-- != 0) {</span>
<span class="line">            if (v1[i] != v2[i])</span>
<span class="line">                return false;</span>
<span class="line">            i++;</span>
<span class="line">        }</span>
<span class="line">        return true;</span>
<span class="line">    }</span>
<span class="line">    // Argument is a String</span>
<span class="line">    if (cs.equals(this))</span>
<span class="line">        return true;</span>
<span class="line">    // Argument is a non-String, non-AbstractStringBuilder CharSequence</span>
<span class="line">    char v1[] = value;</span>
<span class="line">    int i = 0;</span>
<span class="line">    int n = value.length;</span>
<span class="line">    while (n-- != 0) {</span>
<span class="line">        if (v1[i] != cs.charAt(i))</span>
<span class="line">            return false;</span>
<span class="line">        i++;</span>
<span class="line">    }</span>
<span class="line">    return true;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1014]||(n[1014]=[s("同样更容易理解一些：首先判断参数长度是否相等，不相等则返回 false。如果参数是 AbstractStringBuilder 的实例，则取出其 char 数组，遍历比较两个 char 数组的每个元素是否相等。如果参数是 String 的实例，则直接调用 equals 方法比较两个字符串是否相等。如果参数是其他实现了 CharSequence 接口的对象，则遍历比较两个对象的每个字符是否相等。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1015]||(n[1015]=[s("“是的，总体上感觉还是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1703]||(n[1703]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1016]||(n[1016]=[s("Objects.equals()")])),_:1}),n[1704]||(n[1704]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1017]||(n[1017]=[s("比较舒服。”三妹的眼睛是雪亮的，发现了这个方法的优点。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",Va,[i("a",za,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1018]||(n[1018]=[s("最优雅的Java字符串String拼接是哪种方式？")])),_:1})])])]),n[1705]||(n[1705]=i("hr",null,null,-1)),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1019]||(n[1019]=[s("此页内容")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1020]||(n[1020]=[s("“哥，你让我看的《")])),_:1}),n[1706]||(n[1706]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1021]||(n[1021]=[s("Java 开发手册")])),_:1}),n[1707]||(n[1707]=s("](https://javabetter.cn/pdf/ali-java-shouce.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1022]||(n[1022]=[s("》上有这么一段内容：循环体内，拼接字符串最好使用 StringBuilder 的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1708]||(n[1708]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1023]||(n[1023]=[s("append()")])),_:1}),n[1709]||(n[1709]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1024]||(n[1024]=[s("方法，而不是 + 号操作符。这是为什么呀？”三妹疑惑地问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1025]||(n[1025]=[s("“其实这个问题，我们之前在")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1710]||(n[1710]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1026]||(n[1026]=[s("StringBuilder")])),_:1}),n[1711]||(n[1711]=s("](https://javabetter.cn/string/builder-buffer.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1027]||(n[1027]=[s("时已经聊过了。”我慢吞吞地回答道，“不过，三妹，哥今天来给你深入地讲讲。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1028]||(n[1028]=[s("PS：三妹能在学习的过程中不断地发现问题，让我感到非常的开心。其实很多时候，我们不应该只是把知识点记在心里，还应该问一问自己，到底是为什么，只有迈出去这一步，才能真正的成长起来。")])),_:1}),i("h4",Ha,[i("a",Ka,[i("span",null,[i("a",Ga,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1029]||(n[1029]=[s("+号操作符的本质")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1030]||(n[1030]=[s("“+ 号操作符其实被 Java 在编译的时候重新解释了，换一种说法就是，+ 号操作符是一种语法糖，让字符串的拼接变得更简便了。”一边给三妹解释，我一边在 Intellij IDEA 中敲出了下面这段代码。")])),_:1}),n[1712]||(n[1712]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Demo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String chenmo = &quot;沉默&quot;;</span>
<span class="line">        String wanger = &quot;王二&quot;;</span>
<span class="line">        System.out.println(chenmo + wanger);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1031]||(n[1031]=[s("在 Java 8 的环境下，使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1713]||(n[1713]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1032]||(n[1032]=[s("javap -c Demo.class")])),_:1}),n[1714]||(n[1714]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1033]||(n[1033]=[s("反编译")])),_:1}),n[1715]||(n[1715]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1034]||(n[1034]=[s("字节码")])),_:1}),n[1716]||(n[1716]=s("](https://javabetter.cn/jvm/bytecode.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1035]||(n[1035]=[s("后（字节码和 javap 我们会在 JVM 中详细讲，这里可以硬着头皮瞄一眼），可以看到以下内容：")])),_:1}),n[1717]||(n[1717]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Compiled from &quot;Demo.java&quot;</span>
<span class="line">class Demo {</span>
<span class="line">  Demo();</span>
<span class="line">    Code:</span>
<span class="line">       0: aload_0</span>
<span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
<span class="line">       4: return</span>
<span class="line"></span>
<span class="line">  public static void main(java.lang.String[]);</span>
<span class="line">    Code:</span>
<span class="line">       0: ldc           #2                  // String 沉默</span>
<span class="line">       2: astore_1</span>
<span class="line">       3: ldc           #3                  // String 王二</span>
<span class="line">       5: astore_2</span>
<span class="line">       6: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>
<span class="line">       9: new           #5                  // class java/lang/StringBuilder</span>
<span class="line">      12: dup</span>
<span class="line">      13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
<span class="line">      16: aload_1</span>
<span class="line">      17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
<span class="line">      20: aload_2</span>
<span class="line">      21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
<span class="line">      24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
<span class="line">      27: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
<span class="line">      30: return</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1036]||(n[1036]=[s("（如果你之前没有了解过")])),_:1}),n[1718]||(n[1718]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1037]||(n[1037]=[s("字节码指令")])),_:1}),n[1719]||(n[1719]=s("](https://javabetter.cn/jvm/zijiema-zhiling.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1038]||(n[1038]=[s("，可能会有一点压力，不过，不用担心，我们稍微解释一下就懂了）")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1039]||(n[1039]=[s("“你看，三妹，这里有一个 new 关键字，并且 class 类型为")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1720]||(n[1720]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1040]||(n[1040]=[s("java/lang/StringBuilder")])),_:1}),n[1721]||(n[1721]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1041]||(n[1041]=[s("。”我指着标号为 9 的那行对三妹说，“这意味着新建了一个 StringBuilder 的对象。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1042]||(n[1042]=[s("“然后看标号为 17 的这行，是一个 invokevirtual 指令，用于调用对象的方法，也就是 StringBuilder 对象的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1722]||(n[1722]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1043]||(n[1043]=[s("append()")])),_:1}),n[1723]||(n[1723]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1044]||(n[1044]=[s("方法。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1045]||(n[1045]=[s('“也就意味着把 chenmo（"沉默"）这个字符串添加到 StringBuilder 对象中了。”')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1046]||(n[1046]=[s("“再往下看，标号为 21 的这行，又调用了一次")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1724]||(n[1724]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1047]||(n[1047]=[s("append()")])),_:1}),n[1725]||(n[1725]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1048]||(n[1048]=[s('方法，意味着把 wanger（"王二"）这个字符串添加到 StringBuilder 对象中了。”')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1049]||(n[1049]=[s("换成 Java 代码来表示的话，大概是这个样子：")])),_:1}),n[1726]||(n[1726]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Demo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String chenmo = &quot;沉默&quot;;</span>
<span class="line">        String wanger = &quot;王二&quot;;</span>
<span class="line">        System.out.println((new StringBuilder(chenmo)).append(wanger).toString());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1050]||(n[1050]=[s("“哦，原来编译的时候把“+”号操作符替换成了 StringBuilder 的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1727]||(n[1727]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1051]||(n[1051]=[s("append()")])),_:1}),n[1728]||(n[1728]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1052]||(n[1052]=[s("方法啊。”三妹恍然大悟。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1053]||(n[1053]=[s("“是的，不过到了 Java 9（不是长期支持版本，所以我会拿 Java 11 来演示），情况发生了一些改变，同样的代码，字节码指令完全不同了。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1054]||(n[1054]=[s("同样的代码，在 Java 11 的环境下，字节码指令是这样的：")])),_:1}),n[1729]||(n[1729]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Compiled from &quot;Demo.java&quot;</span>
<span class="line">public class com.itwanger.thirtyseven.Demo {</span>
<span class="line">  public com.itwanger.thirtyseven.Demo();</span>
<span class="line">    Code:</span>
<span class="line">       0: aload_0</span>
<span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
<span class="line">       4: return</span>
<span class="line"></span>
<span class="line">  public static void main(java.lang.String[]);</span>
<span class="line">    Code:</span>
<span class="line">       0: ldc           #2                  // String</span>
<span class="line">       2: astore_1</span>
<span class="line">       3: iconst_0</span>
<span class="line">       4: istore_2</span>
<span class="line">       5: iload_2</span>
<span class="line">       6: bipush        10</span>
<span class="line">       8: if_icmpge     41</span>
<span class="line">      11: new           #3                  // class java/lang/String</span>
<span class="line">      14: dup</span>
<span class="line">      15: ldc           #4                  // String 沉默</span>
<span class="line">      17: invokespecial #5                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
<span class="line">      20: astore_3</span>
<span class="line">      21: ldc           #6                  // String 王二</span>
<span class="line">      23: astore        4</span>
<span class="line">      25: aload_1</span>
<span class="line">      26: aload_3</span>
<span class="line">      27: aload         4</span>
<span class="line">      29: invokedynamic #7,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span>
<span class="line">      34: astore_1</span>
<span class="line">      35: iinc          2, 1</span>
<span class="line">      38: goto          5</span>
<span class="line">      41: return</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1055]||(n[1055]=[s("看标号为 29 的这行，字节码指令为")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1730]||(n[1730]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1056]||(n[1056]=[s("invokedynamic")])),_:1}),n[1731]||(n[1731]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1057]||(n[1057]=[s("，该指令允许由应用级的代码来决定方法解析，所谓的应用级的代码其实是一个方法——被称为引导方法（Bootstrap Method），简称 BSM，BSM 会返回一个 CallSite（调用点） 对象，这个对象就和")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1732]||(n[1732]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1058]||(n[1058]=[s("invokedynamic")])),_:1}),n[1733]||(n[1733]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1059]||(n[1059]=[s("指令链接在一起。以后再执行这条")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1734]||(n[1734]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1060]||(n[1060]=[s("invokedynamic")])),_:1}),n[1735]||(n[1735]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1061]||(n[1061]=[s("指令时就不会创建新的 CallSite 对象。CallSite 其实就是一个 MethodHandle（方法句柄）的 holder，指向一个调用点真正执行的方法——此时就是")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1736]||(n[1736]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1062]||(n[1062]=[s("StringConcatFactory.makeConcatWithConstants()")])),_:1}),n[1737]||(n[1737]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1063]||(n[1063]=[s("方法。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1064]||(n[1064]=[s("“哥，你别再说了，再说我就听不懂了。”三妹打断了我的话。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1065]||(n[1065]=[s("“好吧，总之就是 Java 9 以后，JDK 用了另外一种方法来动态解释 + 号操作符，具体的实现方式在字节码指令层面已经看不到了，所以我就以 Java 8 来继续讲解吧。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1066]||(n[1066]=[s("这里我们再多讲一点，如果是下面这段代码：")])),_:1}),n[1738]||(n[1738]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class StringConcat {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        int i = 11;</span>
<span class="line">        String s = i + &quot;&quot;;</span>
<span class="line">        System.out.println(s);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[1068]||(n[1068]=i("code",null,'<font style="color:rgb(44, 62, 80);">+</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1067]||(n[1067]=[s("号操作符又是如何完成拼接呢？")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1069]||(n[1069]=[s("同样可以来通过")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1739]||(n[1739]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1070]||(n[1070]=[s("javap -c StringConcat")])),_:1}),n[1740]||(n[1740]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1071]||(n[1071]=[s("看一下字节码指令：")])),_:1}),n[1741]||(n[1741]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660602042-74f849e4-c17a-4758-93ea-462505ad3551.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1072]||(n[1072]=[s("从上图中可以看到，")])),_:1}),n[1742]||(n[1742]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1073]||(n[1073]=[s("+")])),_:1}),n[1743]||(n[1743]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1074]||(n[1074]=[s("号操作符被编译成了")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1744]||(n[1744]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1075]||(n[1075]=[s("StringBuilder")])),_:1}),n[1745]||(n[1745]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1076]||(n[1076]=[s("的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1746]||(n[1746]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1077]||(n[1077]=[s("append()")])),_:1}),n[1747]||(n[1747]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1078]||(n[1078]=[s("方法。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1079]||(n[1079]=[s("那如果是这样的代码：")])),_:1}),n[1748]||(n[1748]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class StringConcat1 {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String s = 11 + &quot;&quot;;</span>
<span class="line">        System.out.println(s);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),i("p",null,[n[1081]||(n[1081]=i("code",null,'<font style="color:rgb(44, 62, 80);">+</font>',-1)),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1080]||(n[1080]=[s("号操作符又是如何完成拼接呢？")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1082]||(n[1082]=[s("同样可以来通过")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1749]||(n[1749]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1083]||(n[1083]=[s("javap -c StringConcat1")])),_:1}),n[1750]||(n[1750]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1084]||(n[1084]=[s("看一下字节码指令：")])),_:1}),n[1751]||(n[1751]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660601876-96ea4523-bc32-4acb-b1ed-1c490f3bcb35.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1085]||(n[1085]=[s("StringBuilder 不见了？这是为什么呢？")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1086]||(n[1086]=[s('这是因为 + 连接操作的两个操作数都是编译时常量（一个是字面量整数 11，另一个是空字符串 ""），所以编译器能够在编译时就完成这个字符串连接操作。')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1087]||(n[1087]=[s('也就是说，字符串连接 11 + "" 被编译器优化处理了，编译器在编译阶段就将其解析为了字符串常量 "11"。')])),_:1}),i("h4",Ra,[i("a",Wa,[i("span",null,[i("a",Qa,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1088]||(n[1088]=[s("为什么要编译为 StringBuilder.append")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1089]||(n[1089]=[s("“再回到《")])),_:1}),n[1752]||(n[1752]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1090]||(n[1090]=[s("Java 开发手册")])),_:1}),n[1753]||(n[1753]=s("](https://javabetter.cn/pdf/ali-java-shouce.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1091]||(n[1091]=[s("》上的那段内容：")])),_:1}),i("p",null,[i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1092]||(n[1092]=[s("循环体内，拼接字符串最好使用 StringBuilder 的")])),_:1}),n[1093]||(n[1093]=s("****")),l(a,{style:{color:"rgb(44, 62, 80)"}})]),n[1097]||(n[1097]=i("code",null,'**<font style="color:rgb(44, 62, 80);">append()</font>**',-1)),i("strong",null,[l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1095]||(n[1095]=s("****")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1094]||(n[1094]=[s("方法，而不是 + 号操作符")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1096]||(n[1096]=[s("。原因就在于循环体内如果用 + 号操作符的话，就会产生大量的 StringBuilder 对象，不仅占用了更多的内存空间，还会让 Java 虚拟机不停的进行垃圾回收，从而降低了程序的性能。”")])),_:1})]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1098]||(n[1098]=[s("更好的写法就是在循环的外部新建一个 StringBuilder 对象，然后使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1754]||(n[1754]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1099]||(n[1099]=[s("append()")])),_:1}),n[1755]||(n[1755]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1100]||(n[1100]=[s("方法将循环体内的字符串添加进来：")])),_:1}),n[1756]||(n[1756]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">class Demo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        StringBuilder sb = new StringBuilder();</span>
<span class="line">        for (int i = 1; i &lt; 10; i++) {</span>
<span class="line">            String chenmo = &quot;沉默&quot;;</span>
<span class="line">            String wanger = &quot;王二&quot;;</span>
<span class="line">            sb.append(chenmo);</span>
<span class="line">            sb.append(wanger);</span>
<span class="line">        }</span>
<span class="line">        System.out.println(sb);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1101]||(n[1101]=[s("来做个小测试。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1102]||(n[1102]=[s("第一个，for 循环中使用”+”号操作符。")])),_:1}),n[1757]||(n[1757]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String result = &quot;&quot;;</span>
<span class="line">for (int i = 0; i &lt; 100000; i++) {</span>
<span class="line">    result += &quot;六六六&quot;;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1103]||(n[1103]=[s("第二个，for 循环外部新建 StringBuilder，循环体内使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1758]||(n[1758]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1104]||(n[1104]=[s("append()")])),_:1}),n[1759]||(n[1759]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1105]||(n[1105]=[s("方法。")])),_:1}),n[1760]||(n[1760]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">StringBuilder sb = new StringBuilder();</span>
<span class="line">for (int i = 0; i &lt; 100000; i++) {</span>
<span class="line">    sb.append(&quot;六六六&quot;);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1106]||(n[1106]=[s("“这两个小测试分别会耗时多长时间呢？三妹你来运行下。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1107]||(n[1107]=[s("“哇，第一个小测试的执行时间是 6212 毫秒，第二个只用了不到 1 毫秒，差距也太大了吧！”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1108]||(n[1108]=[s("“是的，这下明白了原因吧？”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1109]||(n[1109]=[s("“是的，哥，原来如此。”")])),_:1}),i("h4",Xa,[i("a",Ya,[i("span",null,[i("a",Za,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1110]||(n[1110]=[s("append方法源码解析")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1111]||(n[1111]=[s("“好了，三妹，来看一下 StringBuilder 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1761]||(n[1761]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1112]||(n[1112]=[s("append()")])),_:1}),n[1762]||(n[1762]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1113]||(n[1113]=[s("方法的源码吧！”")])),_:1}),n[1763]||(n[1763]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public StringBuilder append(String str) {</span>
<span class="line">    super.append(str);</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1114]||(n[1114]=[s("这 3 行代码其实没啥看的。我们来看父类 AbstractStringBuilder 的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1764]||(n[1764]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1115]||(n[1115]=[s("append()")])),_:1}),n[1765]||(n[1765]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1116]||(n[1116]=[s("方法：")])),_:1}),n[1766]||(n[1766]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public AbstractStringBuilder append(String str) {</span>
<span class="line">    if (str == null)</span>
<span class="line">        return appendNull();</span>
<span class="line">    int len = str.length();</span>
<span class="line">    ensureCapacityInternal(count + len);</span>
<span class="line">    str.getChars(0, len, value, count);</span>
<span class="line">    count += len;</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1117]||(n[1117]=[s("1）判断拼接的字符串是不是 null，如果是，当做字符串“null”来处理。")])),_:1}),n[1767]||(n[1767]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1118]||(n[1118]=[s("appendNull()")])),_:1}),n[1768]||(n[1768]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1119]||(n[1119]=[s("方法的源码如下：")])),_:1}),n[1769]||(n[1769]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private AbstractStringBuilder appendNull() {</span>
<span class="line">    int c = count;</span>
<span class="line">    ensureCapacityInternal(c + 4);</span>
<span class="line">    final char[] value = this.value;</span>
<span class="line">    value[c++] = &#39;n&#39;;</span>
<span class="line">    value[c++] = &#39;u&#39;;</span>
<span class="line">    value[c++] = &#39;l&#39;;</span>
<span class="line">    value[c++] = &#39;l&#39;;</span>
<span class="line">    count = c;</span>
<span class="line">    return this;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1120]||(n[1120]=[s("2）获取字符串的长度。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1121]||(n[1121]=[s("3）")])),_:1}),n[1770]||(n[1770]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1122]||(n[1122]=[s("ensureCapacityInternal()")])),_:1}),n[1771]||(n[1771]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1123]||(n[1123]=[s("方法的源码如下：")])),_:1}),n[1772]||(n[1772]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private void ensureCapacityInternal(int minimumCapacity) {</span>
<span class="line">    // overflow-conscious code</span>
<span class="line">    if (minimumCapacity - value.length &gt; 0) {</span>
<span class="line">        value = Arrays.copyOf(value,</span>
<span class="line">                newCapacity(minimumCapacity));</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1124]||(n[1124]=[s("由于字符串内部是用")])),_:1}),n[1773]||(n[1773]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1125]||(n[1125]=[s("数组")])),_:1}),n[1774]||(n[1774]=s("](https://javabetter.cn/array/array.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1126]||(n[1126]=[s("实现的，所以需要先判断拼接后的字符数组长度是否超过当前数组的长度，如果超过，先对数组进行扩容，然后把原有的值复制到新的数组中。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1127]||(n[1127]=[s("4）将拼接的字符串 str 复制到目标数组 value 中。")])),_:1}),n[1775]||(n[1775]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">str.getChars(0, len, value, count)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1128]||(n[1128]=[s("5）更新数组的长度 count。")])),_:1}),i("h4",$a,[i("a",ha,[i("span",null,[i("a",_a,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1129]||(n[1129]=[s("String.concat 拼接字符串")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1130]||(n[1130]=[s("“除了可以使用 + 号操作符，StringBuilder 的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1776]||(n[1776]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1131]||(n[1131]=[s("append()")])),_:1}),n[1777]||(n[1777]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1132]||(n[1132]=[s("方法，还有其他的字符串拼接方法吗？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1133]||(n[1133]=[s("“有啊，比如说 String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1778]||(n[1778]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1134]||(n[1134]=[s("concat()")])),_:1}),n[1779]||(n[1779]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1135]||(n[1135]=[s("方法，有点像 StringBuilder 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1780]||(n[1780]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1136]||(n[1136]=[s("append()")])),_:1}),n[1781]||(n[1781]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1137]||(n[1137]=[s("方法。”")])),_:1}),n[1782]||(n[1782]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String chenmo = &quot;沉默&quot;;</span>
<span class="line">String wanger = &quot;王二&quot;;</span>
<span class="line">System.out.println(chenmo.concat(wanger));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1138]||(n[1138]=[s("可以来看一下")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1783]||(n[1783]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1139]||(n[1139]=[s("concat()")])),_:1}),n[1784]||(n[1784]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1140]||(n[1140]=[s("方法的源码。")])),_:1}),n[1785]||(n[1785]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public String concat(String str) {</span>
<span class="line">    int otherLen = str.length();</span>
<span class="line">    if (otherLen == 0) {</span>
<span class="line">        return this;</span>
<span class="line">    }</span>
<span class="line">    int len = value.length;</span>
<span class="line">    char buf[] = Arrays.copyOf(value, len + otherLen);</span>
<span class="line">    str.getChars(buf, len);</span>
<span class="line">    return new String(buf, true);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1141]||(n[1141]=[s("1）如果拼接的字符串的长度为 0，那么返回拼接前的字符串。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1142]||(n[1142]=[s("2）将原字符串的字符数组 value 复制到变量 buf 数组中。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1143]||(n[1143]=[s("3）把拼接的字符串 str 复制到字符数组 buf 中，并返回新的字符串对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1144]||(n[1144]=[s("我一行一行地给三妹解释着。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1145]||(n[1145]=[s("“和")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1786]||(n[1786]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1146]||(n[1146]=[s("+")])),_:1}),n[1787]||(n[1787]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1147]||(n[1147]=[s("号操作符相比，")])),_:1}),n[1788]||(n[1788]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1148]||(n[1148]=[s("concat()")])),_:1}),n[1789]||(n[1789]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1149]||(n[1149]=[s("方法在遇到字符串为 null 的时候，会抛出 NullPointerException，而“+”号操作符会把 null 当做是“null”字符串来处理。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1150]||(n[1150]=[s('如果拼接的字符串是一个空字符串（""），那么 concat 的效率要更高一点,毕竟不需要')])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1790]||(n[1790]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1151]||(n[1151]=[s("new StringBuilder")])),_:1}),n[1791]||(n[1791]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1152]||(n[1152]=[s("对象。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1153]||(n[1153]=[s("如果拼接的字符串非常多，")])),_:1}),n[1792]||(n[1792]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1154]||(n[1154]=[s("concat()")])),_:1}),n[1793]||(n[1793]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1155]||(n[1155]=[s("的效率就会下降，因为创建的字符串对象越来越多。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1156]||(n[1156]=[s("“还有吗？”三妹似乎对字符串拼接很感兴趣。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1157]||(n[1157]=[s("“有，当然有。”")])),_:1}),i("h4",ne,[i("a",se,[i("span",null,[i("a",le,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1158]||(n[1158]=[s("String.join 拼接字符串")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1159]||(n[1159]=[s("String 类有一个静态方法")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1794]||(n[1794]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1160]||(n[1160]=[s("join()")])),_:1}),n[1795]||(n[1795]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1161]||(n[1161]=[s("，可以这样来使用。")])),_:1}),n[1796]||(n[1796]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String chenmo = &quot;沉默&quot;;</span>
<span class="line">String wanger = &quot;王二&quot;;</span>
<span class="line">String cmower = String.join(&quot;&quot;, chenmo, wanger);</span>
<span class="line">System.out.println(cmower);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1162]||(n[1162]=[s("第一个参数为字符串连接符，比如说：")])),_:1}),n[1797]||(n[1797]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String message = String.join(&quot;-&quot;, &quot;王二&quot;, &quot;太特么&quot;, &quot;有趣了&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1163]||(n[1163]=[s("输出结果为：")])),_:1}),n[1798]||(n[1798]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1164]||(n[1164]=[s("王二-太特么-有趣了")])),_:1}),n[1799]||(n[1799]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1165]||(n[1165]=[s("。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1166]||(n[1166]=[s("来看一下 join 方法的源码：")])),_:1}),n[1800]||(n[1800]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static String join(CharSequence delimiter, CharSequence... elements) {</span>
<span class="line">    Objects.requireNonNull(delimiter);</span>
<span class="line">    Objects.requireNonNull(elements);</span>
<span class="line">    // Number of elements not likely worth Arrays.stream overhead.</span>
<span class="line">    StringJoiner joiner = new StringJoiner(delimiter);</span>
<span class="line">    for (CharSequence cs: elements) {</span>
<span class="line">        joiner.add(cs);</span>
<span class="line">    }</span>
<span class="line">    return joiner.toString();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1167]||(n[1167]=[s("里面新建了一个叫 StringJoiner 的对象，然后通过 for-each 循环把可变参数添加了进来，最后调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1801]||(n[1801]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1168]||(n[1168]=[s("toString()")])),_:1}),n[1802]||(n[1802]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1169]||(n[1169]=[s("方法返回 String。")])),_:1}),i("h4",ae,[i("a",ee,[i("span",null,[i("a",ie,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1170]||(n[1170]=[s("StringUtils.join 拼接字符串")])),_:1}),l(r)])])])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1171]||(n[1171]=[s("“实际的工作中，")])),_:1}),n[1803]||(n[1803]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1172]||(n[1172]=[s("org.apache.commons.lang3.StringUtils")])),_:1}),n[1804]||(n[1804]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1173]||(n[1173]=[s("的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1805]||(n[1805]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1174]||(n[1174]=[s("join()")])),_:1}),n[1806]||(n[1806]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1175]||(n[1175]=[s("方法也经常用来进行字符串拼接。”")])),_:1}),n[1807]||(n[1807]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String chenmo = &quot;沉默&quot;;</span>
<span class="line">String wanger = &quot;王二&quot;;</span>
<span class="line">StringUtils.join(chenmo, wanger);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1176]||(n[1176]=[s("该方法不用担心 NullPointerException。")])),_:1}),n[1808]||(n[1808]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">StringUtils.join(null)            = null</span>
<span class="line">StringUtils.join([])              = &quot;&quot;</span>
<span class="line">StringUtils.join([null])          = &quot;&quot;</span>
<span class="line">StringUtils.join([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) = &quot;abc&quot;</span>
<span class="line">StringUtils.join([null, &quot;&quot;, &quot;a&quot;]) = &quot;a&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1177]||(n[1177]=[s("来看一下源码：")])),_:1}),n[1809]||(n[1809]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static String join(final Object[] array, String separator, final int startIndex, final int endIndex) {</span>
<span class="line">    if (array == null) {</span>
<span class="line">        return null;</span>
<span class="line">    }</span>
<span class="line">    if (separator == null) {</span>
<span class="line">        separator = EMPTY;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    final StringBuilder buf = new StringBuilder(noOfItems * 16);</span>
<span class="line"></span>
<span class="line">    for (int i = startIndex; i &lt; endIndex; i++) {</span>
<span class="line">        if (i &gt; startIndex) {</span>
<span class="line">            buf.append(separator);</span>
<span class="line">        }</span>
<span class="line">        if (array[i] != null) {</span>
<span class="line">            buf.append(array[i]);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">    return buf.toString();</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1178]||(n[1178]=[s("内部使用的仍然是 StringBuilder。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1179]||(n[1179]=[s("“好了，三妹，关于字符串拼接的知识点我们就讲到这吧。注意 Java 9 以后，对 + 号操作符的解释和之前发生了变化，字节码指令已经不同了，等后面你学了")])),_:1}),n[1810]||(n[1810]=s("[")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1180]||(n[1180]=[s("字节码指令")])),_:1}),n[1811]||(n[1811]=s("](https://javabetter.cn/jvm/zijiema-zhiling.html)")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1181]||(n[1181]=[s("后我们再详细地讲一次。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1182]||(n[1182]=[s("“嗯，哥，你休息吧，我把这些例子再重新跑一遍。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h3",te,[i("a",re,[i("span",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1183]||(n[1183]=[s("如何在Java中拆分字符串：详解String类的split()方法")])),_:1})])])]),n[1812]||(n[1812]=i("hr",null,null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1184]||(n[1184]=[s("“哥，我感觉字符串拆分没什么可讲的呀，直接上 String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1813]||(n[1813]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1185]||(n[1185]=[s("split()")])),_:1}),n[1814]||(n[1814]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1186]||(n[1186]=[s("方法不就可以了！”三妹毫不客气地说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1187]||(n[1187]=[s("“假如你真的这么觉得，那可要注意了，事情远没这么简单。”我微笑着说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1188]||(n[1188]=[s("假如现在有这样一串字符序列“沉默王二，一枚有趣的程序员”，需要按照中文逗号“，”进行拆分，这意味着第一串字符序列为逗号前面的“沉默王二”，第二串字符序列为逗号后面的“一枚有趣的程序员”。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1189]||(n[1189]=[s("“这不等于没说吗？哥！”还没等我说，三妹就打断了我。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1190]||(n[1190]=[s("“别着急嘛，等哥说完。”我依然保持着微笑继续说，“在拆分之前，要先进行检查，判断一下这串字符是否包含逗号，否则应该抛出异常。”")])),_:1}),n[1815]||(n[1815]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class Test {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String cmower = &quot;沉默王二，一枚有趣的程序员&quot;;</span>
<span class="line">        if (cmower.contains(&quot;，&quot;)) {</span>
<span class="line">            String [] parts = cmower.split(&quot;，&quot;);</span>
<span class="line">            System.out.println(&quot;第一部分：&quot; + parts[0] +&quot; 第二部分：&quot; + parts[1]);</span>
<span class="line">        } else {</span>
<span class="line">            throw new IllegalArgumentException(&quot;当前字符串没有包含逗号&quot;);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1191]||(n[1191]=[s("“三妹你看，这段代码挺严谨的吧？”我说，“来看一下程序的输出结果。”")])),_:1}),n[1816]||(n[1816]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">第一部分：沉默王二 第二部分：一枚有趣的程序员</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1192]||(n[1192]=[s("“的确和预期完全一致。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1193]||(n[1193]=[s("“这是建立在字符串是确定的情况下，最重要的是分隔符是确定的。否则，麻烦就来了。”我说，“大约有 12 种英文特殊符号，如果直接拿这些特殊符号替换上面代码中的分隔符（中文逗号），这段程序在运行的时候就会出现以下提到的错误。”")])),_:1}),i("ul",null,[i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1194]||(n[1194]=[s("反斜杠")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1197]||(n[1197]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1195]||(n[1195]=[s("\\")])),_:1}),n[1198]||(n[1198]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1196]||(n[1196]=[s("（ArrayIndexOutOfBoundsException）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1199]||(n[1199]=[s("插入符号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1202]||(n[1202]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1200]||(n[1200]=[s("^")])),_:1}),n[1203]||(n[1203]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1201]||(n[1201]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1204]||(n[1204]=[s("美元符号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1207]||(n[1207]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1205]||(n[1205]=[s("$")])),_:1}),n[1208]||(n[1208]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1206]||(n[1206]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1209]||(n[1209]=[s("逗点")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1212]||(n[1212]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1210]||(n[1210]=[s(".")])),_:1}),n[1213]||(n[1213]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1211]||(n[1211]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1214]||(n[1214]=[s("竖线")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1217]||(n[1217]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1215]||(n[1215]=[s("|")])),_:1}),n[1218]||(n[1218]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1216]||(n[1216]=[s("（正常，没有出错）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1219]||(n[1219]=[s("问号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1222]||(n[1222]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1220]||(n[1220]=[s("?")])),_:1}),n[1223]||(n[1223]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1221]||(n[1221]=[s("（PatternSyntaxException）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1224]||(n[1224]=[s("星号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1227]||(n[1227]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1225]||(n[1225]=[s("*")])),_:1}),n[1228]||(n[1228]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1226]||(n[1226]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1229]||(n[1229]=[s("加号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1232]||(n[1232]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1230]||(n[1230]=[s("+")])),_:1}),n[1233]||(n[1233]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1231]||(n[1231]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1234]||(n[1234]=[s("左小括号或者右小括号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1237]||(n[1237]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1235]||(n[1235]=[s("()")])),_:1}),n[1238]||(n[1238]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1236]||(n[1236]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1239]||(n[1239]=[s("左方括号或者右方括号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1242]||(n[1242]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1240]||(n[1240]=[s("[]")])),_:1}),n[1243]||(n[1243]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1241]||(n[1241]=[s("（同上）")])),_:1})]),i("li",null,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1244]||(n[1244]=[s("左大括号或者右大括号")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1247]||(n[1247]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1245]||(n[1245]=[s("{}")])),_:1}),n[1248]||(n[1248]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1246]||(n[1246]=[s("（同上）")])),_:1})])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1249]||(n[1249]=[s("“那遇到这些特殊符号该怎么办呢？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1250]||(n[1250]=[s("“用正则表达式。”我说，“正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。”")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1251]||(n[1251]=[s("我在 GitHub 上找打了一个开源的正则表达式学习文档，非常详细。一开始写正则表达式的时候难免会感觉到非常生疏，你可以查看一下这份文档。记不住没关系，遇到就查。")])),_:1}),i("p",null,[i("a",oe,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[1252]||(n[1252]=[s("https://github.com/cdoco/learn-regex-zh")])),_:1}),l(r)])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1253]||(n[1253]=[s("除了这份文档，还有一份：")])),_:1}),i("p",null,[i("a",pe,[l(a,{style:{color:"rgb(102, 102, 102)"}},{default:e(()=>n[1254]||(n[1254]=[s("https://github.com/cdoco/common-regex")])),_:1}),l(r)])]),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1255]||(n[1255]=[s("作者收集了一些在平时项目开发中经常用到的正则表达式，可以直接拿来用。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1256]||(n[1256]=[s("“哥，你真周到。”三妹笑着说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1257]||(n[1257]=[s("“好了，来用英文逗点")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1817]||(n[1817]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1258]||(n[1258]=[s(".")])),_:1}),n[1818]||(n[1818]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1259]||(n[1259]=[s("替换一下分隔符。”我说。")])),_:1}),n[1819]||(n[1819]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String cmower = &quot;沉默王二.一枚有趣的程序员&quot;;</span>
<span class="line">if (cmower.contains(&quot;.&quot;)) {</span>
<span class="line">    String [] parts = cmower.split(&quot;\\\\.&quot;);</span>
<span class="line">    System.out.println(&quot;第一部分：&quot; + parts[0] +&quot; 第二部分：&quot; + parts[1]);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1260]||(n[1260]=[s("由于英文逗点属于特殊符号，所以在使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1820]||(n[1820]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1261]||(n[1261]=[s("split()")])),_:1}),n[1821]||(n[1821]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1262]||(n[1262]=[s("方法的时候，就需要使用正则表达式")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1822]||(n[1822]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1263]||(n[1263]=[s("\\\\.")])),_:1}),n[1823]||(n[1823]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1264]||(n[1264]=[s("而不能直接使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1824]||(n[1824]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1265]||(n[1265]=[s(".")])),_:1}),n[1825]||(n[1825]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1266]||(n[1266]=[s("。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1267]||(n[1267]=[s("“为什么用两个反斜杠呢？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1268]||(n[1268]=[s("“因为反斜杠本身就是一个特殊字符，需要用反斜杠来转义。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1269]||(n[1269]=[s("当然了，你也可以使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1826]||(n[1826]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1270]||(n[1270]=[s("[]")])),_:1}),n[1827]||(n[1827]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1271]||(n[1271]=[s("来包裹住英文逗点“.”，")])),_:1}),n[1828]||(n[1828]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1272]||(n[1272]=[s("[]")])),_:1}),n[1829]||(n[1829]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1273]||(n[1273]=[s("也是一个正则表达式，用来匹配方括号中包含的任意字符。")])),_:1}),n[1830]||(n[1830]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">cmower.split(&quot;[.]&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1274]||(n[1274]=[s("除此之外， 还可以使用 Pattern 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1831]||(n[1831]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1275]||(n[1275]=[s("quote()")])),_:1}),n[1832]||(n[1832]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1276]||(n[1276]=[s("方法来包裹英文逗点“.”，该方法会返回一个使用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1833]||(n[1833]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1277]||(n[1277]=[s("\\Q\\E")])),_:1}),n[1834]||(n[1834]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1278]||(n[1278]=[s("包裹的字符串。")])),_:1}),n[1835]||(n[1835]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660616460-6dd9f490-1ba1-492d-b0e4-eed9ee62a793.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1279]||(n[1279]=[s("来看示例：")])),_:1}),n[1836]||(n[1836]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String [] parts = cmower.split(Pattern.quote(&quot;.&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1280]||(n[1280]=[s("当")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1837]||(n[1837]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1281]||(n[1281]=[s("split()")])),_:1}),n[1838]||(n[1838]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1282]||(n[1282]=[s("方法的参数是正则表达式的时候，方法最终会执行下面这行代码：")])),_:1}),n[1839]||(n[1839]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">return Pattern.compile(regex).split(this, limit);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1283]||(n[1283]=[s("也就意味着，拆分字符串有了新的选择，可以不使用 String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1840]||(n[1840]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1284]||(n[1284]=[s("split()")])),_:1}),n[1841]||(n[1841]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1285]||(n[1285]=[s("方法，直接用下面的方式。")])),_:1}),n[1842]||(n[1842]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class TestPatternSplit {</span>
<span class="line">    private static Pattern twopart = Pattern.compile(&quot;\\\\.&quot;);</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String [] parts = twopart.split(&quot;沉默王二.一枚有趣的程序员&quot;);</span>
<span class="line">        System.out.println(&quot;第一部分：&quot; + parts[0] +&quot; 第二部分：&quot; + parts[1]);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1286]||(n[1286]=[s("“为什么要把 Pattern 表达式声明称 static 的呢？”三妹问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1287]||(n[1287]=[s("“由于模式是确定的，通过 static 的预编译功能可以提高程序的效率。”我说，“除此之外，还可以使用 Pattern 配合 Matcher 类进行字符串拆分，这样做的好处是可以对要拆分的字符串进行一些严格的限制，来看这段示例代码。”")])),_:1}),n[1843]||(n[1843]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class TestPatternMatch {</span>
<span class="line">    /**</span>
<span class="line">     * 使用预编译功能，提高效率</span>
<span class="line">     */</span>
<span class="line">    private static Pattern twopart = Pattern.compile(&quot;(.+)\\\\.(.+)&quot;);</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        checkString(&quot;沉默王二.一枚有趣的程序员&quot;);</span>
<span class="line">        checkString(&quot;沉默王二.&quot;);</span>
<span class="line">        checkString(&quot;.一枚有趣的程序员&quot;);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    private static void checkString(String str) {</span>
<span class="line">        Matcher m = twopart.matcher(str);</span>
<span class="line">        if (m.matches()) {</span>
<span class="line">            System.out.println(&quot;第一部分：&quot; + m.group(1) + &quot; 第二部分：&quot; + m.group(2));</span>
<span class="line">        } else {</span>
<span class="line">            System.out.println(&quot;不匹配&quot;);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1288]||(n[1288]=[s("正则表达式")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1844]||(n[1844]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1289]||(n[1289]=[s("(.+)\\\\.(.+)")])),_:1}),n[1845]||(n[1845]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1290]||(n[1290]=[s("的意思是，不仅要把字符串按照英文标点的方式拆成两部分，并且英文逗点的前后要有内容。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1291]||(n[1291]=[s("来看一下程序的输出结果：")])),_:1}),n[1846]||(n[1846]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">第一部分：沉默王二 第二部分：一枚有趣的程序员</span>
<span class="line">不匹配</span>
<span class="line">不匹配</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1292]||(n[1292]=[s("不过，使用 Matcher 来匹配一些简单的字符串时相对比较沉重一些，使用 String 类的")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1847]||(n[1847]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1293]||(n[1293]=[s("split()")])),_:1}),n[1848]||(n[1848]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1294]||(n[1294]=[s("仍然是首选，因为该方法还有其他一些牛逼的功能。比如说，如果你想把分隔符包裹在拆分后的字符串的第一部分，可以这样做：")])),_:1}),n[1849]||(n[1849]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String cmower = &quot;沉默王二，一枚有趣的程序员&quot;;</span>
<span class="line">if (cmower.contains(&quot;，&quot;)) {</span>
<span class="line">    String [] parts = cmower.split(&quot;(?&lt;=，)&quot;);</span>
<span class="line">    System.out.println(&quot;第一部分：&quot; + parts[0] +&quot; 第二部分：&quot; + parts[1]);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1295]||(n[1295]=[s("程序输出的结果如下所示：")])),_:1}),n[1850]||(n[1850]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">第一部分：沉默王二， 第二部分：一枚有趣的程序员</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1296]||(n[1296]=[s("可以看到分隔符“，”包裹在了第一部分，如果希望包裹在第二部分，可以这样做：")])),_:1}),n[1851]||(n[1851]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String [] parts = cmower.split(&quot;(?=，)&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1297]||(n[1297]=[s("“")])),_:1}),n[1852]||(n[1852]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1298]||(n[1298]=[s("?<=")])),_:1}),n[1853]||(n[1853]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1299]||(n[1299]=[s("和")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1854]||(n[1854]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1300]||(n[1300]=[s("?=")])),_:1}),n[1855]||(n[1855]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1301]||(n[1301]=[s("是什么东东啊？”三妹好奇地问。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1302]||(n[1302]=[s("“它其实是正则表达式中的断言模式。”我说，“你有时间的话，可以看看前面我推荐的两份开源文档。”")])),_:1}),n[1856]||(n[1856]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660616446-61bdf300-b3e4-41a9-9139-4cb9d760725d.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1303]||(n[1303]=[s("“")])),_:1}),n[1857]||(n[1857]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1304]||(n[1304]=[s("split()")])),_:1}),n[1858]||(n[1858]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1305]||(n[1305]=[s("方法可以传递 2 个参数，第一个为分隔符，第二个为拆分的字符串个数。”我说。")])),_:1}),n[1859]||(n[1859]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String cmower = &quot;沉默王二，一枚有趣的程序员，宠爱他&quot;;</span>
<span class="line">if (cmower.contains(&quot;，&quot;)) {</span>
<span class="line">    String [] parts = cmower.split(&quot;，&quot;, 2);</span>
<span class="line">    System.out.println(&quot;第一部分：&quot; + parts[0] +&quot; 第二部分：&quot; + parts[1]);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1306]||(n[1306]=[s("进入 debug 模式的话，可以看到以下内容：")])),_:1}),n[1860]||(n[1860]=i("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726660616657-0fa64ae0-87b4-40d1-a0d7-6c783ff9e1cd.png"},null,-1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1307]||(n[1307]=[s("也就是说，传递 2 个参数的时候，会直接调用")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),n[1861]||(n[1861]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1308]||(n[1308]=[s("substring()")])),_:1}),n[1862]||(n[1862]=s("`")),l(a,{style:{color:"rgb(44, 62, 80)"}}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1309]||(n[1309]=[s("进行截取，第二个分隔符后的就不再拆分了。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1310]||(n[1310]=[s("来看一下程序输出的结果：")])),_:1}),n[1863]||(n[1863]=t(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">第一部分：沉默王二 第二部分：一枚有趣的程序员，宠爱他</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1311]||(n[1311]=[s("“没想到啊，这个字符串拆分还挺讲究的呀！”三妹感慨地说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1312]||(n[1312]=[s("“是的，其实字符串拆分在实际的工作当中还是挺经常用的。前端经常会按照规则传递一长串字符序列到后端，后端就需要按照规则把字符串拆分再做处理。”我说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1313]||(n[1313]=[s("“嗯，我把今天的内容温习下，二哥，你休息会。”三妹说。")])),_:1}),l(a,{style:{color:"rgb(44, 62, 80)"}}),i("h2",de,[i("a",ue,[i("span",null,[i("a",be,[l(a,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[1314]||(n[1314]=[s("小结")])),_:1}),l(r)])])])]),n[1864]||(n[1864]=t('<p>扩展底层原理1：字符串存储的内存原理<br> ●直接赋值会复用字符串常量池中的<br> ●new出来不会复用，而是开辟一个新的空间</p><p>扩展底层原理2：==号比较的到底是什么？<br> ●基本数据类型比较数据值<br> ●引用数据类型比较地址值</p><p>扩展底层原理3：字符串拼接的底层原理<br> ●如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串。<br> ●如果有变量参与，会创建新的字符串，浪费内存。</p><p>扩展底层原理4：StringBuilder提高效率原理图<br> ●所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</p><p>扩展底层原理5：StringBuilder源码分析<br> ●默认创建一个长度为16的字节数组。<br> ●添加的内容长度小于16，直接存。</p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span></span></a></h3>',6))])}const ye=p(b,[["render",ve],["__file","base03.html.vue"]]),fe=JSON.parse('{"path":"/blogs/Java/base03.html","title":"Java基础","lang":"en-US","frontmatter":{"title":"Java基础","date":"2024/09/28","tags":["流程控制","数组","字符串"],"categories":["Java"]},"headers":[{"level":2,"title":"1.流程控制语句","slug":"_1-流程控制语句","link":"#_1-流程控制语句","children":[{"level":3,"title":"1.1 流程控制语句分类","slug":"_1-1-流程控制语句分类","link":"#_1-1-流程控制语句分类","children":[]},{"level":3,"title":"1.2. 顺序结构","slug":"_1-2-顺序结构","link":"#_1-2-顺序结构","children":[]},{"level":3,"title":"1.3. 判断语句 ：if","slug":"_1-3-判断语句-if","link":"#_1-3-判断语句-if","children":[]},{"level":3,"title":"1.4  switch  语句","slug":"_1-4-switch-语句","link":"#_1-4-switch-语句","children":[]}]},{"level":2,"title":"2. 循环结构","slug":"_2-循环结构","link":"#_2-循环结构","children":[{"level":3,"title":"2.1 for 循环结构","slug":"_2-1-for-循环结构","link":"#_2-1-for-循环结构","children":[]},{"level":3,"title":"2.1.2 求和和统计思想","slug":"_2-1-2-求和和统计思想","link":"#_2-1-2-求和和统计思想","children":[]},{"level":3,"title":"2.2 while循环","slug":"_2-2-while循环","link":"#_2-2-while循环","children":[]},{"level":3,"title":"2.3 do...while循环","slug":"_2-3-do-while循环","link":"#_2-3-do-while循环","children":[]},{"level":3,"title":"2.3.3 三种格式的区别：","slug":"_2-3-3-三种格式的区别","link":"#_2-3-3-三种格式的区别","children":[]}]},{"level":2,"title":"3. 练习题","slug":"_3-练习题","link":"#_3-练习题","children":[{"level":3,"title":"回文数","slug":"回文数","link":"#回文数","children":[]},{"level":3,"title":"求商和余数","slug":"求商和余数","link":"#求商和余数","children":[]}]},{"level":2,"title":"4.循环高级综合练习","slug":"_4-循环高级综合练习","link":"#_4-循环高级综合练习","children":[{"level":3,"title":"4.1 无限循环","slug":"_4-1-无限循环","link":"#_4-1-无限循环","children":[]},{"level":3,"title":"无限循环的注意事项：","slug":"无限循环的注意事项","link":"#无限循环的注意事项","children":[]},{"level":3,"title":"4.2 条件控制语句","slug":"_4-2-条件控制语句","link":"#_4-2-条件控制语句","children":[]},{"level":3,"title":"4.3 跳出当前的多重嵌套循环 (循环标记)","slug":"_4-3-跳出当前的多重嵌套循环-循环标记","link":"#_4-3-跳出当前的多重嵌套循环-循环标记","children":[]},{"level":3,"title":"4.4 猜数字小游戏","slug":"_4-4-猜数字小游戏","link":"#_4-4-猜数字小游戏","children":[]}]},{"level":2,"title":"5. 数组","slug":"_5-数组","link":"#_5-数组","children":[{"level":3,"title":"5.1 概念","slug":"_5-1-概念","link":"#_5-1-概念","children":[]},{"level":3,"title":"5.2 数组的定义","slug":"_5-2-数组的定义","link":"#_5-2-数组的定义","children":[]},{"level":3,"title":"5.3 数组的静态初始化","slug":"_5-3-数组的静态初始化","link":"#_5-3-数组的静态初始化","children":[]},{"level":3,"title":"注意点：","slug":"注意点","link":"#注意点","children":[]},{"level":3,"title":"简化格式:","slug":"简化格式","link":"#简化格式","children":[]},{"level":3,"title":"5.4 地址值","slug":"_5-4-地址值","link":"#_5-4-地址值","children":[]},{"level":3,"title":"5.5 元素访问","slug":"_5-5-元素访问","link":"#_5-5-元素访问","children":[]},{"level":3,"title":"5.6 索引","slug":"_5-6-索引","link":"#_5-6-索引","children":[]},{"level":3,"title":"5.7 数组遍历","slug":"_5-7-数组遍历","link":"#_5-7-数组遍历","children":[]},{"level":3,"title":"5.8 数组的动态初始化","slug":"_5-8-数组的动态初始化","link":"#_5-8-数组的动态初始化","children":[]},{"level":3,"title":"5.9 数组两种初始化","slug":"_5-9-数组两种初始化","link":"#_5-9-数组两种初始化","children":[]},{"level":3,"title":"5.10 数组常见问题","slug":"_5-10-数组常见问题","link":"#_5-10-数组常见问题","children":[]},{"level":3,"title":"5.11 数组的内存图","slug":"_5-11-数组的内存图","link":"#_5-11-数组的内存图","children":[]},{"level":3,"title":"5.12 练习题","slug":"_5-12-练习题","link":"#_5-12-练习题","children":[]}]},{"level":2,"title":"6  String类","slug":"_6-string类","link":"#_6-string类","children":[{"level":3,"title":"6.1 String类概述","slug":"_6-1-string类概述","link":"#_6-1-string类概述","children":[]},{"level":3,"title":"6.2 String类的特点","slug":"_6-2-string类的特点","link":"#_6-2-string类的特点","children":[]},{"level":3,"title":"6.3 创建 String 类对象的两种方式","slug":"_6-3-创建-string-类对象的两种方式","link":"#_6-3-创建-string-类对象的两种方式","children":[]},{"level":3,"title":"6.4 创建字符串对象两种方式的区别","slug":"_6-4-创建字符串对象两种方式的区别","link":"#_6-4-创建字符串对象两种方式的区别","children":[]},{"level":3,"title":"6.5 Java的常用方法（比较）","slug":"_6-5-java的常用方法-比较","link":"#_6-5-java的常用方法-比较","children":[]},{"level":3,"title":"6.6 字符串子串","slug":"_6-6-字符串子串","link":"#_6-6-字符串子串","children":[]},{"level":3,"title":"6.7 字符串转字符数组、byte数组","slug":"_6-7-字符串转字符数组、byte数组","link":"#_6-7-字符串转字符数组、byte数组","children":[]},{"level":3,"title":"6.8 检索字符串","slug":"_6-8-检索字符串","link":"#_6-8-检索字符串","children":[]},{"level":3,"title":"6.9 字符串拆分","slug":"_6-9-字符串拆分","link":"#_6-9-字符串拆分","children":[]},{"level":3,"title":"6.10 修改字符串","slug":"_6-10-修改字符串","link":"#_6-10-修改字符串","children":[]},{"level":3,"title":"6.11","slug":"_6-11","link":"#_6-11","children":[]},{"level":3,"title":"6.12 其他方法","slug":"_6-12-其他方法","link":"#_6-12-其他方法","children":[]},{"level":3,"title":"6.13 练习题","slug":"_6-13-练习题","link":"#_6-13-练习题","children":[]}]},{"level":2,"title":"7 StringBuilder","slug":"_7-stringbuilder","link":"#_7-stringbuilder","children":[{"level":3,"title":"7.1 构造方法","slug":"_7-1-构造方法","link":"#_7-1-构造方法","children":[]},{"level":3,"title":"7.2 常用方法","slug":"_7-2-常用方法","link":"#_7-2-常用方法","children":[]},{"level":3,"title":"7.3 注意事项","slug":"_7-3-注意事项","link":"#_7-3-注意事项","children":[]},{"level":3,"title":"7.4 链式编程","slug":"_7-4-链式编程","link":"#_7-4-链式编程","children":[]}]},{"level":2,"title":"8 StringJoiner","slug":"_8-stringjoiner","link":"#_8-stringjoiner","children":[{"level":3,"title":"8.1 概念","slug":"_8-1-概念","link":"#_8-1-概念","children":[]},{"level":3,"title":"8.2 构造方法","slug":"_8-2-构造方法","link":"#_8-2-构造方法","children":[]},{"level":3,"title":"8.3 基本方法","slug":"_8-3-基本方法","link":"#_8-3-基本方法","children":[]}]},{"level":2,"title":"9 StringBuffer 线程安全","slug":"_9-stringbuffer-线程安全","link":"#_9-stringbuffer-线程安全","children":[]},{"level":2,"title":"10 字符串原理","slug":"_10-字符串原理","link":"#_10-字符串原理","children":[]},{"level":2,"title":"11 String 源码解读","slug":"_11-string-源码解读","link":"#_11-string-源码解读","children":[{"level":3,"title":"为什么Java字符串是不可变的？","slug":"为什么java字符串是不可变的","link":"#为什么java字符串是不可变的","children":[]},{"level":3,"title":"深入理解Java字符串常量池","slug":"深入理解java字符串常量池","link":"#深入理解java字符串常量池","children":[]},{"level":3,"title":"详解 String.intern() 方法","slug":"详解-string-intern-方法","link":"#详解-string-intern-方法","children":[]},{"level":3,"title":"聊聊 Java StringBuilder和StringBuffer 两兄弟","slug":"聊聊-java-stringbuilder和stringbuffer-两兄弟","link":"#聊聊-java-stringbuilder和stringbuffer-两兄弟","children":[]},{"level":3,"title":"字符串相等判断：Java中的equals()与==的区别与用法","slug":"字符串相等判断-java中的equals-与-的区别与用法","link":"#字符串相等判断-java中的equals-与-的区别与用法","children":[]},{"level":3,"title":"最优雅的Java字符串String拼接是哪种方式？","slug":"最优雅的java字符串string拼接是哪种方式","link":"#最优雅的java字符串string拼接是哪种方式","children":[]},{"level":3,"title":"如何在Java中拆分字符串：详解String类的split()方法","slug":"如何在java中拆分字符串-详解string类的split-方法","link":"#如何在java中拆分字符串-详解string类的split-方法","children":[]}]},{"level":2,"title":"小结","slug":"小结-1","link":"#小结-1","children":[{"level":3,"title":"","slug":"-1","link":"#-1","children":[]}]}],"git":{"createdTime":1727536792000,"updatedTime":1727537131000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":2}]},"filePathRelative":"blogs/Java/base03.md"}');export{ye as comp,fe as data};
