import{_ as c,c as u,e as a,w as l,d as s,b as p,a as e,r as i,o as r}from"./app-CUeFR5CM.js";const d={},k={id:"来自作者的说明",tabindex:"-1"},v={class:"header-anchor",href:"#来自作者的说明"},m={id:"基础理解",tabindex:"-1"},b={class:"header-anchor",href:"#基础理解"},g={id:"bad-practice",tabindex:"-1"},y={class:"header-anchor",href:"#bad-practice"},f={id:"_1-直接使用-ispresent-进行-if-检查",tabindex:"-1"},w={class:"header-anchor",href:"#_1-直接使用-ispresent-进行-if-检查"},S={id:"_2-在方法参数中使用-optional",tabindex:"-1"},E={class:"header-anchor",href:"#_2-在方法参数中使用-optional"},q={id:"_3-直接使用-optional-get",tabindex:"-1"},x={class:"header-anchor",href:"#_3-直接使用-optional-get"},O={id:"_4-使用在-pojo-中",tabindex:"-1"},j={class:"header-anchor",href:"#_4-使用在-pojo-中"},L={id:"_5-使用在注入的属性中",tabindex:"-1"},C={class:"header-anchor",href:"#_5-使用在注入的属性中"},I={id:"best-and-pragmatic-practice",tabindex:"-1"},P={class:"header-anchor",href:"#best-and-pragmatic-practice"},D={id:"api",tabindex:"-1"},N={class:"header-anchor",href:"#api"},A={id:"_1-empty",tabindex:"-1"},F={class:"header-anchor",href:"#_1-empty"},B={id:"_2-of-t-value",tabindex:"-1"},T={class:"header-anchor",href:"#_2-of-t-value"},R={id:"_3-ofnullable-t-value",tabindex:"-1"},U={class:"header-anchor",href:"#_3-ofnullable-t-value"},M={id:"_4-get",tabindex:"-1"},J={class:"header-anchor",href:"#_4-get"},G={id:"_5-orelse-t-other",tabindex:"-1"},K={class:"header-anchor",href:"#_5-orelse-t-other"},V={id:"_6-orelseget-supplier-extends-t-other",tabindex:"-1"},z={class:"header-anchor",href:"#_6-orelseget-supplier-extends-t-other"},Y={id:"_7-orelsethrow-supplier-extends-x-exceptionsupplier",tabindex:"-1"},W={class:"header-anchor",href:"#_7-orelsethrow-supplier-extends-x-exceptionsupplier"},H={id:"_8-ispresent",tabindex:"-1"},X={class:"header-anchor",href:"#_8-ispresent"},Q={id:"_9-ifpresent-consumer-super-t-consumer",tabindex:"-1"},Z={class:"header-anchor",href:"#_9-ifpresent-consumer-super-t-consumer"},$={id:"tips",tabindex:"-1"},h={class:"header-anchor",href:"#tips"},_={id:"_1-业务上需要空值时-不要直接返回-null-使用-font-style-color-rgb-79-79-79-optional-empty-font",tabindex:"-1"},nn={class:"header-anchor",href:"#_1-业务上需要空值时-不要直接返回-null-使用-font-style-color-rgb-79-79-79-optional-empty-font"},sn={id:"_2-使用-orelseget",tabindex:"-1"},an={class:"header-anchor",href:"#_2-使用-orelseget"},tn={id:"_3-使用-orelsethrow",tabindex:"-1"},ln={class:"header-anchor",href:"#_3-使用-orelsethrow"},pn={id:"_4-不为空则执行时-使用-ifpresent",tabindex:"-1"},en={class:"header-anchor",href:"#_4-不为空则执行时-使用-ifpresent"},on={id:"_5-不要滥用",tabindex:"-1"},cn={class:"header-anchor",href:"#_5-不要滥用"},un={id:"总结",tabindex:"-1"},rn={class:"header-anchor",href:"#总结"},dn={id:"java-8-optional最佳指南-优雅解决空指针",tabindex:"-1"},kn={class:"header-anchor",href:"#java-8-optional最佳指南-优雅解决空指针"},vn={id:"_01、没有-optional-会有什么问题",tabindex:"-1"},mn={class:"header-anchor",href:"#_01、没有-optional-会有什么问题"},bn={id:"_02、optional-是如何解决这个问题的",tabindex:"-1"},gn={class:"header-anchor",href:"#_02、optional-是如何解决这个问题的"},yn={href:"https://javabetter.cn/java8/optional.html#_02%E3%80%81optional-%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},fn={id:"_03、创建-optional-对象",tabindex:"-1"},wn={class:"header-anchor",href:"#_03、创建-optional-对象"},Sn={href:"https://javabetter.cn/java8/optional.html#_03%E3%80%81%E5%88%9B%E5%BB%BA-optional-%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"},En={id:"_04、判断值是否存在",tabindex:"-1"},qn={class:"header-anchor",href:"#_04、判断值是否存在"},xn={href:"https://javabetter.cn/java8/optional.html#_04%E3%80%81%E5%88%A4%E6%96%AD%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8",target:"_blank",rel:"noopener noreferrer"},On={id:"_05、非空表达式",tabindex:"-1"},jn={class:"header-anchor",href:"#_05、非空表达式"},Ln={href:"https://javabetter.cn/java8/optional.html#_05%E3%80%81%E9%9D%9E%E7%A9%BA%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},Cn={id:"_06、设置-获取-默认值",tabindex:"-1"},In={class:"header-anchor",href:"#_06、设置-获取-默认值"},Pn={href:"https://javabetter.cn/java8/optional.html#_06%E3%80%81%E8%AE%BE%E7%BD%AE-%E8%8E%B7%E5%8F%96-%E9%BB%98%E8%AE%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},Dn={id:"_07、获取值",tabindex:"-1"},Nn={class:"header-anchor",href:"#_07、获取值"},An={href:"https://javabetter.cn/java8/optional.html#_07%E3%80%81%E8%8E%B7%E5%8F%96%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},Fn={id:"_08、过滤值",tabindex:"-1"},Bn={class:"header-anchor",href:"#_08、过滤值"},Tn={href:"https://javabetter.cn/java8/optional.html#_08%E3%80%81%E8%BF%87%E6%BB%A4%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},Rn={id:"_09、转换值",tabindex:"-1"},Un={class:"header-anchor",href:"#_09、转换值"},Mn={href:"https://javabetter.cn/java8/optional.html#_09%E3%80%81%E8%BD%AC%E6%8D%A2%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://zhuanlan.zhihu.com/p/28909673",target:"_blank",rel:"noopener noreferrer"},Gn={id:"jdbc接口定义",tabindex:"-1"},Kn={class:"header-anchor",href:"#jdbc接口定义"},Vn={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89",target:"_blank",rel:"noopener noreferrer"},zn={id:"mysql实现",tabindex:"-1"},Yn={class:"header-anchor",href:"#mysql实现"},Wn={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#mysql%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},Hn={id:"postgresql实现",tabindex:"-1"},Xn={class:"header-anchor",href:"#postgresql实现"},Qn={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#postgresql%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},Zn={id:"使用方法",tabindex:"-1"},$n={class:"header-anchor",href:"#使用方法"},hn={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},_n={id:"源码实现",tabindex:"-1"},ns={class:"header-anchor",href:"#源码实现"},ss={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},as={href:"/md/develop/package/dev-package-x-log.html",target:"_blank",rel:"noopener noreferrer"},ts={id:"定义标准",tabindex:"-1"},ls={class:"header-anchor",href:"#定义标准"},ps={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86",target:"_blank",rel:"noopener noreferrer"},es={id:"具体厂商或者框架开发者实现",tabindex:"-1"},os={class:"header-anchor",href:"#具体厂商或者框架开发者实现"},is={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E5%85%B7%E4%BD%93%E5%8E%82%E5%95%86%E6%88%96%E8%80%85%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},cs={id:"程序猿使用",tabindex:"-1"},us={class:"header-anchor",href:"#程序猿使用"},rs={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},ds={id:"使用规范",tabindex:"-1"},ks={class:"header-anchor",href:"#使用规范"},vs={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83",target:"_blank",rel:"noopener noreferrer"},ms={id:"spi和api的区别是什么",tabindex:"-1"},bs={class:"header-anchor",href:"#spi和api的区别是什么"},gs={href:"https://www.yuque.com/yuqueyonghupqqdjr/gre6wb/qfk5yqc8g2matrnh#spi%E5%92%8Capi%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html",target:"_blank",rel:"noopener noreferrer"};function ws(Ss,n){const t=i("font"),o=i("ExternalLinkIcon");return r(),u("div",null,[a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[0]||(n[0]=[s("我们都知道，在 Java 8 新增了一个类 - ")])),_:1}),n[376]||(n[376]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[1]||(n[1]=[s("Optional")])),_:1}),n[377]||(n[377]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[2]||(n[2]=[s(" ， 主要是用来解决程序中常见的 ")])),_:1}),n[378]||(n[378]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[3]||(n[3]=[s("NullPointerException")])),_:1}),n[379]||(n[379]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[4]||(n[4]=[s("异常问题。但是在实际开发过程中很多人都是在一知半解的使用 ")])),_:1}),n[380]||(n[380]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[5]||(n[5]=[s("Optional")])),_:1}),n[381]||(n[381]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[6]||(n[6]=[s("，类似 ")])),_:1}),n[382]||(n[382]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[7]||(n[7]=[s("if (userOpt.isPresent()){...}")])),_:1}),n[383]||(n[383]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[8]||(n[8]=[s("这样的代码随处可见。如果是这样我更愿意看到老老实实的 null 判断，这样强行使用 ")])),_:1}),n[384]||(n[384]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[9]||(n[9]=[s("Optional")])),_:1}),n[385]||(n[385]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[10]||(n[10]=[s("反而增加了代码的复杂度。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[11]||(n[11]=[s("今天我给大家分享的这篇文章，便是 Java Optional 的一些")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[386]||(n[386]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[12]||(n[12]=[s("Best Practise")])),_:1}),n[387]||(n[387]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[13]||(n[13]=[s("和一些反面的")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[388]||(n[388]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[14]||(n[14]=[s("Bad Practice")])),_:1}),n[389]||(n[389]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[15]||(n[15]=[s("，以供大家参考。")])),_:1}),p("h3",k,[p("a",v,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[16]||(n[16]=[s("来自作者的说明")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[17]||(n[17]=[s("首先我们来看一下")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[390]||(n[390]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[18]||(n[18]=[s("Optional")])),_:1}),n[391]||(n[391]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[19]||(n[19]=[s("的作者 Brian Goetz 对这个 API 的说明：")])),_:1}),p("blockquote",null,[a(t,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>n[20]||(n[20]=[s("“")])),_:1}),a(t,{style:{color:"rgb(79, 79, 79)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>n[21]||(n[21]=[s('Our intention was to provide a limited mechanism for library method return types where there needed to be a clear way to represent "no result", and using')])),_:1}),a(t,{style:{color:"rgb(79, 79, 79)","background-color":"rgb(238, 240, 244)"}}),n[25]||(n[25]=s("`")),a(t,{style:{color:"rgb(79, 79, 79)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>n[22]||(n[22]=[s("null")])),_:1}),n[26]||(n[26]=s("`")),a(t,{style:{color:"rgb(79, 79, 79)","background-color":"rgb(238, 240, 244)"}}),a(t,{style:{color:"rgb(79, 79, 79)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>n[23]||(n[23]=[s("for such was overwhelmingly likely to cause errors.")])),_:1}),a(t,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(238, 240, 244)"}},{default:l(()=>n[24]||(n[24]=[s("”")])),_:1})]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[27]||(n[27]=[s("大意为，为了避免")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[392]||(n[392]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[28]||(n[28]=[s("null")])),_:1}),n[393]||(n[393]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[29]||(n[29]=[s("带来的错误，我们提供了一个可以明确表示空值的有限的机制。")])),_:1}),p("h3",m,[p("a",b,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[30]||(n[30]=[s("基础理解")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[31]||(n[31]=[s("首先，")])),_:1}),n[394]||(n[394]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[32]||(n[32]=[s("Optional")])),_:1}),n[395]||(n[395]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[33]||(n[33]=[s("是一个")])),_:1}),n[396]||(n[396]=s("**")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[34]||(n[34]=[s("容器，用于放置可能为空的值")])),_:1}),n[397]||(n[397]=s("**")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[35]||(n[35]=[s("，它可以合理而优雅的处理 ")])),_:1}),n[398]||(n[398]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[36]||(n[36]=[s("null")])),_:1}),n[399]||(n[399]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[37]||(n[37]=[s("。众所周知，")])),_:1}),n[400]||(n[400]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[38]||(n[38]=[s("null")])),_:1}),n[401]||(n[401]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[39]||(n[39]=[s("在编程历史上极具话题性，号称是")])),_:1}),n[402]||(n[402]=s("_")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[40]||(n[40]=[s("计算机历史上最严重的错误")])),_:1}),n[403]||(n[403]=s("_")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[41]||(n[41]=[s("，感兴趣可以读一下这篇文章：THE WORST MISTAKE OF COMPUTER SCIENCE，这里暂且不做过多讨论。在 Java 1.8 之前的版本，没有可以用于表示 ")])),_:1}),n[404]||(n[404]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[42]||(n[42]=[s("null")])),_:1}),n[405]||(n[405]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[43]||(n[43]=[s("官方 API，如果你足够的谨慎，你可能需要常常在代码中做如下的判断：")])),_:1}),n[406]||(n[406]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//doing something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//doing something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[44]||(n[44]=[s("确实，返回值是")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[407]||(n[407]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[45]||(n[45]=[s("null")])),_:1}),n[408]||(n[408]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[46]||(n[46]=[s("的情况太多了，一不小心，就会产生 NPE，接踵而来的就是应用运行终止，产品抱怨，用户投诉。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[47]||(n[47]=[s("1.8 之后，jdk 新增了")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[409]||(n[409]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[48]||(n[48]=[s("Optional")])),_:1}),n[410]||(n[410]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[49]||(n[49]=[s("来表示空结果。其实本质上什么也没变，只是增加了一个表达方式。")])),_:1}),n[411]||(n[411]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[50]||(n[50]=[s("Optional")])),_:1}),n[412]||(n[412]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[51]||(n[51]=[s("表示空的静态方法为")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[413]||(n[413]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[52]||(n[52]=[s("Optional.empty()")])),_:1}),n[414]||(n[414]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[53]||(n[53]=[s("，跟")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[415]||(n[415]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[54]||(n[54]=[s("null")])),_:1}),n[416]||(n[416]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[55]||(n[55]=[s("有什么本质区别吗？其实没有。翻看它的实现，")])),_:1}),n[417]||(n[417]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[56]||(n[56]=[s("Optional")])),_:1}),n[418]||(n[418]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[57]||(n[57]=[s("中的 value 就是")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[419]||(n[419]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[58]||(n[58]=[s("null")])),_:1}),n[420]||(n[420]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[59]||(n[59]=[s("，只不过包了一层")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[421]||(n[421]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[60]||(n[60]=[s("Optional")])),_:1}),n[422]||(n[422]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[61]||(n[61]=[s("，所以说它其实是个容器。用之后的代码可能长这样：")])),_:1}),n[423]||(n[423]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line">Optional<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> optionalUser <span class="token operator">=</span> RemoteService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optionalUser<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">//doing something </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">User user <span class="token operator">=</span> optionalUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line">User user <span class="token operator">=</span> optionalUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[62]||(n[62]=[s("看起来，好像比之前好了一些，至少看起来没那么笨。但如果采用写法 1，好像更啰嗦了。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[63]||(n[63]=[s('如果你对 kotlin 稍有了解，kotlin 的非空类型是他们大肆宣传的"卖点"之一，通过')])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[424]||(n[424]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[64]||(n[64]=[s("var param!!")])),_:1}),n[425]||(n[425]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[65]||(n[65]=[s("在使用它的地方做强制的空检查，否则无法通过编译，最大程度上减少了 NPE。其实在我看来，")])),_:1}),n[426]||(n[426]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[66]||(n[66]=[s("Optional")])),_:1}),n[427]||(n[427]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[67]||(n[67]=[s("的方式更加优雅和灵活。同时，")])),_:1}),n[428]||(n[428]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[68]||(n[68]=[s("Optional")])),_:1}),n[429]||(n[429]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[69]||(n[69]=[s("也可能会带来一些误解。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[70]||(n[70]=[s("下面先说一些在我看来不合适的使用方式：")])),_:1}),p("h3",g,[p("a",y,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[71]||(n[71]=[s("Bad Practice")])),_:1})])])]),p("h5",f,[p("a",w,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[72]||(n[72]=[s("1. 直接使用 isPresent() 进行 if 检查")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[73]||(n[73]=[s("这个直接参考上面的例子，用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[430]||(n[430]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[74]||(n[74]=[s("if")])),_:1}),n[431]||(n[431]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[75]||(n[75]=[s("判断和 1.8 之前的写法并没有什么区别，反而返回值包了一层")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[432]||(n[432]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[76]||(n[76]=[s("Optional")])),_:1}),n[433]||(n[433]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[77]||(n[77]=[s("，增加了代码的复杂性，没有带来任何实质的收益。其实")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[434]||(n[434]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[78]||(n[78]=[s("isPresent()")])),_:1}),n[435]||(n[435]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[79]||(n[79]=[s("一般用于流处理的结尾，用于判断是否符合条件。")])),_:1}),n[436]||(n[436]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filer</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">&gt;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",S,[p("a",E,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[80]||(n[80]=[s("2. 在方法参数中使用 Optional")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[81]||(n[81]=[s("我们用一个东西之前得想明白，这东西是为解决什么问题而诞生的。")])),_:1}),n[437]||(n[437]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[82]||(n[82]=[s("Optional")])),_:1}),n[438]||(n[438]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[83]||(n[83]=[s("直白一点说就是为了表达可空性，如果方法参数可以为空，为何不重载呢？包括使用构造函数也一样。重载的业务表达更加清晰直观。")])),_:1}),n[439]||(n[439]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">//don&#39;t write method like this</span></span>
<span class="line">public void <span class="token function">getUser</span><span class="token punctuation">(</span>long uid<span class="token punctuation">,</span>Optional<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> userType<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//use Overload</span></span>
<span class="line">public void <span class="token function">getUser</span><span class="token punctuation">(</span>long uid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">getUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">public void <span class="token function">getUser</span><span class="token punctuation">(</span>long uid<span class="token punctuation">,</span>UserType userType<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//doing something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",q,[p("a",x,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[84]||(n[84]=[s("3. 直接使用 Optional.get")])),_:1})])])]),p("p",null,[n[88]||(n[88]=p("code",null,'<font style="color:rgb(77, 77, 77);">Optional</font>',-1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[85]||(n[85]=[s("不会帮你做任何的空判断或者异常处理，如果直接在代码中使用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[89]||(n[89]=p("code",null,'<font style="color:rgb(77, 77, 77);">Optional.get()</font>',-1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[86]||(n[86]=[s("和不做任何空判断一样，十分危险。这种可能会出现在那种所谓的着急上线，着急交付，对")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[90]||(n[90]=p("code",null,'<font style="color:rgb(77, 77, 77);">Optional</font>',-1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[87]||(n[87]=[s("也不是很熟悉，直接就用了。这里多说一句，可能有人会反问了：甲方/业务着急，需求又多，哪有时间给他去做优化啊？因为我在现实工作中遇到过，但这两者并不矛盾，因为代码行数上差别并不大，只要自己平时保持学习，都是信手拈来的东西。")])),_:1})]),p("h5",O,[p("a",j,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[91]||(n[91]=[s("4. 使用在 POJO 中")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[92]||(n[92]=[s("估计很少有人这么用：")])),_:1}),n[440]||(n[440]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public class User <span class="token punctuation">{</span></span>
<span class="line">    private <span class="token builtin">int</span> age<span class="token punctuation">;</span></span>
<span class="line">    private String name<span class="token punctuation">;</span></span>
<span class="line">    private Optional<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> address<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[93]||(n[93]=[s("这样的写法将会给序列化带来麻烦，")])),_:1}),n[441]||(n[441]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[94]||(n[94]=[s("Optional")])),_:1}),n[442]||(n[442]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[95]||(n[95]=[s("本身并没有实现序列化，现有的 JSON 序列化框架也没有对此提供支持的。")])),_:1}),p("h5",L,[p("a",C,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[96]||(n[96]=[s("5. 使用在注入的属性中")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[97]||(n[97]=[s("这种写法估计用的人会更少，但不排除有脑洞的。")])),_:1}),n[443]||(n[443]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public class CommonService <span class="token punctuation">{</span></span>
<span class="line">    private Optional<span class="token operator">&lt;</span>UserService<span class="token operator">&gt;</span> userService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    public User <span class="token function">getUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">&gt;</span> u<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[98]||(n[98]=[s("首先依赖注入大多在 spring 的框架之下，直接使用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[444]||(n[444]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[99]||(n[99]=[s("@Autowired")])),_:1}),n[445]||(n[445]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[100]||(n[100]=[s("很方便。但如果使用以上的写法，如果")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[446]||(n[446]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[101]||(n[101]=[s("userService")])),_:1}),n[447]||(n[447]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[102]||(n[102]=[s("set 失败了，程序就应该终止并报异常，并不是无声无息，让其看起来什么问题都没有。")])),_:1}),p("h3",I,[p("a",P,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[103]||(n[103]=[s("Best and Pragmatic Practice")])),_:1})])])]),p("h4",D,[p("a",N,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[104]||(n[104]=[s("API")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[105]||(n[105]=[s("在说最佳实践前，让我们来看一下")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[448]||(n[448]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[106]||(n[106]=[s("Optional")])),_:1}),n[449]||(n[449]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[107]||(n[107]=[s("都提供了哪些常用 API。")])),_:1}),p("h5",A,[p("a",F,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[108]||(n[108]=[s("1. empty()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[109]||(n[109]=[s("返回一个")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[450]||(n[450]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[110]||(n[110]=[s("Optional")])),_:1}),n[451]||(n[451]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[111]||(n[111]=[s("容器对象，而不是 null。建议常用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[112]||(n[112]=[s("⭐⭐⭐⭐")])),_:1}),p("h5",B,[p("a",T,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[113]||(n[113]=[s("2. of(T value)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[114]||(n[114]=[s("创建一个")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[452]||(n[452]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[115]||(n[115]=[s("Optional")])),_:1}),n[453]||(n[453]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[116]||(n[116]=[s("对象，如果 value 是 null，则抛出 NPE。不建议用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[117]||(n[117]=[s("⭐⭐")])),_:1}),p("h5",R,[p("a",U,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[118]||(n[118]=[s("3. ofNullable(T value)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[119]||(n[119]=[s("同上，创建一个")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[454]||(n[454]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[120]||(n[120]=[s("Optional")])),_:1}),n[455]||(n[455]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[121]||(n[121]=[s("对象，但 value 为空时返回")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[456]||(n[456]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[122]||(n[122]=[s("Optional.empty()")])),_:1}),n[457]||(n[457]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[123]||(n[123]=[s("。推荐使用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[124]||(n[124]=[s("⭐⭐⭐⭐⭐")])),_:1}),p("h5",M,[p("a",J,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[125]||(n[125]=[s("4. get()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[126]||(n[126]=[s("返回")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[458]||(n[458]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[127]||(n[127]=[s("Optional")])),_:1}),n[459]||(n[459]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[128]||(n[128]=[s("中包装的值，在判空之前，千万不要直接使用！尽量别用！")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[129]||(n[129]=[s("⭐")])),_:1}),p("h5",G,[p("a",K,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[130]||(n[130]=[s("5. orElse(T other)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[131]||(n[131]=[s("同样是返回")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[460]||(n[460]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[132]||(n[132]=[s("Optional")])),_:1}),n[461]||(n[461]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[133]||(n[133]=[s("中包装的值，但不同的是当取不到值时，返回你指定的 default。看似很好，但不建议用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[134]||(n[134]=[s("⭐⭐")])),_:1}),p("h5",V,[p("a",z,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[135]||(n[135]=[s("6. orElseGet(Supplier<? extends T> other)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[136]||(n[136]=[s("同样是返回")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[462]||(n[462]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[137]||(n[137]=[s("Optional")])),_:1}),n[463]||(n[463]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[138]||(n[138]=[s("中包装的值，取不到值时，返回你指定的 default。看似和 5 一样，但推荐使用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[139]||(n[139]=[s("⭐⭐⭐⭐⭐")])),_:1}),p("h5",Y,[p("a",W,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[140]||(n[140]=[s("7. orElseThrow(Supplier<? extends X> exceptionSupplier)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[141]||(n[141]=[s("返回")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[464]||(n[464]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[142]||(n[142]=[s("Optional")])),_:1}),n[465]||(n[465]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[143]||(n[143]=[s("中包装的值，取不到值时抛出指定的异常。阻塞性业务场景推荐使用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[144]||(n[144]=[s("⭐⭐⭐⭐")])),_:1}),p("h5",H,[p("a",X,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[145]||(n[145]=[s("8. isPresent()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[146]||(n[146]=[s("判断")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[466]||(n[466]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[147]||(n[147]=[s("Optional")])),_:1}),n[467]||(n[467]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[148]||(n[148]=[s("中是否有值，返回 boolean，某些情况下很有用，但尽量不要用在 if 判断体中。可以用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[149]||(n[149]=[s("⭐⭐⭐")])),_:1}),p("h5",Q,[p("a",Z,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[150]||(n[150]=[s("9. ifPresent(Consumer<? super T> consumer)")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[151]||(n[151]=[s("判断")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[468]||(n[468]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[152]||(n[152]=[s("Optional")])),_:1}),n[469]||(n[469]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[153]||(n[153]=[s("中是否有值，有值则执行 consumer，否则什么都不干。日常情况下请使用这个")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[154]||(n[154]=[s("⭐⭐⭐⭐")])),_:1}),p("h4",$,[p("a",h,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[155]||(n[155]=[s("TIPS")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[156]||(n[156]=[s("首先是一些基本原则：")])),_:1}),p("ul",null,[p("li",null,[a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[157]||(n[157]=[s("不要声明任何")])),_:1}),n[160]||(n[160]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[158]||(n[158]=[s("Optional")])),_:1}),n[161]||(n[161]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[159]||(n[159]=[s("实例属性")])),_:1})]),p("li",null,[a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[162]||(n[162]=[s("不要在任何 setter 或者构造方法中使用")])),_:1}),n[164]||(n[164]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[163]||(n[163]=[s("Optional")])),_:1}),n[165]||(n[165]=s("`"))]),p("li",null,[n[167]||(n[167]=p("code",null,'<font style="color:rgb(77, 77, 77);">Optional</font>',-1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[166]||(n[166]=[s("属于返回类型，在业务返回值或者远程调用中使用")])),_:1})])]),p("h5",_,[p("a",nn,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[168]||(n[168]=[s("1. 业务上需要空值时，不要直接返回 null，使用")])),_:1}),a(t,{style:{color:"rgb(79, 79, 79)"}}),n[169]||(n[169]=p("code",null,'**<font style="color:rgb(79, 79, 79);">Optional.empty()</font>**',-1))])])]),n[470]||(n[470]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public Optional<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUser</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> RemoteService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line">    <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",sn,[p("a",an,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[170]||(n[170]=[s("2. 使用 orElseGet()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[171]||(n[171]=[s("获取 value 有三种方式：")])),_:1}),n[471]||(n[471]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[172]||(n[172]=[s("get()")])),_:1}),n[472]||(n[472]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[473]||(n[473]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[173]||(n[173]=[s("orElse()")])),_:1}),n[474]||(n[474]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[475]||(n[475]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[174]||(n[174]=[s("orElseGet()")])),_:1}),n[476]||(n[476]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[175]||(n[175]=[s("。这里推荐在需要用到的地方只用")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[477]||(n[477]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[176]||(n[176]=[s("orElseGet()")])),_:1}),n[478]||(n[478]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[177]||(n[177]=[s("。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[178]||(n[178]=[s("首先，")])),_:1}),n[479]||(n[479]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[179]||(n[179]=[s("get()")])),_:1}),n[480]||(n[480]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[180]||(n[180]=[s("不能直接使用，需要结合判空使用。这和")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[481]||(n[481]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[181]||(n[181]=[s("!=null")])),_:1}),n[482]||(n[482]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[182]||(n[182]=[s("其实没多大区别，只是在表达和抽象上有所改善。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[183]||(n[183]=[s("其次，为什么不推荐")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[483]||(n[483]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[184]||(n[184]=[s("orElse()")])),_:1}),n[484]||(n[484]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[185]||(n[185]=[s("呢？因为")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[485]||(n[485]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[186]||(n[186]=[s("orElse()")])),_:1}),n[486]||(n[486]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[187]||(n[187]=[s("无论如何都会执行括号中的内容，")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[487]||(n[487]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[188]||(n[188]=[s("orElseGet()")])),_:1}),n[488]||(n[488]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[189]||(n[189]=[s("只在主体 value 是空时执行，下面看个例子：")])),_:1}),n[489]||(n[489]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;method called&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">String name1 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output: method called</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">String name2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//output:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[190]||(n[190]=[s("如果上面的例子")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[490]||(n[490]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[191]||(n[191]=[s("getName()")])),_:1}),n[491]||(n[491]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[192]||(n[192]=[s("方法是一个远程调用，或者涉及大量的文件 IO，代价可想而知。")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[193]||(n[193]=[s("但")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[492]||(n[492]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[194]||(n[194]=[s("orElse()")])),_:1}),n[493]||(n[493]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[195]||(n[195]=[s("就一无是处吗？并不是。")])),_:1}),n[494]||(n[494]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[196]||(n[196]=[s("orElseGet()")])),_:1}),n[495]||(n[495]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[197]||(n[197]=[s("需要构建一个")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[496]||(n[496]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[198]||(n[198]=[s("Supplier")])),_:1}),n[497]||(n[497]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[199]||(n[199]=[s("，如果只是简单的返回一个静态资源、字符串等等，直接返回静态资源即可。")])),_:1}),n[498]||(n[498]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public static final String USER_STATUS <span class="token operator">=</span> <span class="token string">&quot;UNKNOWN&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">public String <span class="token function">findUserStatus</span><span class="token punctuation">(</span>long id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    Optional<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> status <span class="token operator">=</span> <span class="token operator">...</span> <span class="token punctuation">;</span> <span class="token comment">// </span></span>
<span class="line">    <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>USER_STATUS<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//不要这么写</span></span>
<span class="line">public String <span class="token function">findUserStatus</span><span class="token punctuation">(</span>long id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    Optional<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> status <span class="token operator">=</span> <span class="token operator">...</span> <span class="token punctuation">;</span> <span class="token comment">// </span></span>
<span class="line">    <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;UNKNOWN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样每次都会新建一个String对象</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",tn,[p("a",ln,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[200]||(n[200]=[s("3. 使用 orElseThrow()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[201]||(n[201]=[s("这个针对阻塞性的业务场景比较合适，例如没有从上游获取到用户信息，下面的所有操作都无法进行，那此时就应该抛出异常。正常的写法是先判空，再手动 throw 异常，现在可以集成为一行：")])),_:1}),n[499]||(n[499]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public String <span class="token function">findUser</span><span class="token punctuation">(</span>long id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    Optional<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> user <span class="token operator">=</span> remoteService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>IllegalStateException<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",pn,[p("a",en,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[202]||(n[202]=[s("4. 不为空则执行时，使用 ifPresent()")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[203]||(n[203]=[s("这点没有性能上的优势，但可以使代码更简洁：")])),_:1}),n[500]||(n[500]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token comment">//之前是这样的</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Status: &quot;</span> <span class="token operator">+</span> status<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//现在</span></span>
<span class="line">status<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token builtin">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h5",on,[p("a",cn,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[204]||(n[204]=[s("5. 不要滥用")])),_:1})])])]),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[205]||(n[205]=[s("有些简单明了的方法，完全没必要增加")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[501]||(n[501]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[206]||(n[206]=[s("Optional")])),_:1}),n[502]||(n[502]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[207]||(n[207]=[s("来增加复杂性。")])),_:1}),n[503]||(n[503]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">public String <span class="token function">fetchStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    String status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;PENDING&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//判断一个简单的状态而已</span></span>
<span class="line">public String <span class="token function">fetchStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    String status <span class="token operator">=</span> <span class="token operator">...</span> <span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> status <span class="token operator">==</span> null ? <span class="token string">&quot;PENDING&quot;</span> <span class="token punctuation">:</span> status<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[208]||(n[208]=[s("首先，null 可以作为集合的元素之一，它并不是非法的；其次，集合类型本身已经具备了完整的空表达，再去包装一层")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[504]||(n[504]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[209]||(n[209]=[s("Optional")])),_:1}),n[505]||(n[505]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[210]||(n[210]=[s("也是徒增复杂，收益甚微。例如，map 已经有了")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[506]||(n[506]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[211]||(n[211]=[s("getOrDefault()")])),_:1}),n[507]||(n[507]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[212]||(n[212]=[s("这样的类似")])),_:1}),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[508]||(n[508]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[213]||(n[213]=[s("orElse()")])),_:1}),n[509]||(n[509]=s("`")),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[214]||(n[214]=[s("的 API 了。")])),_:1}),p("h3",un,[p("a",rn,[p("span",null,[a(t,{style:{color:"rgb(79, 79, 79)"}},{default:l(()=>n[215]||(n[215]=[s("总结")])),_:1})])])]),p("p",null,[n[217]||(n[217]=p("code",null,'<font style="color:rgb(77, 77, 77);">Optional</font>',-1)),a(t,{style:{color:"rgb(77, 77, 77)"}},{default:l(()=>n[216]||(n[216]=[s("的出现使 Java 对 null 的表达能力更近了一步，好马配好鞍，合理使用可以避免大量的 NPE，节省大量的人力物力。以上内容也是本人查询了很多资料，边学边写的产出，如有错漏之处，还请不吝指教。")])),_:1})]),a(t,{style:{color:"rgb(77, 77, 77)"}}),n[510]||(n[510]=p("p",null,[p("img",{src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1721146106788-ada95772-d76e-413f-be1a-c1238bbed105.png",alt:""})],-1)),p("h1",dn,[p("a",kn,[p("span",null,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[218]||(n[218]=[s("Java 8 Optional最佳指南，优雅解决空指针")])),_:1})])])]),n[511]||(n[511]=p("hr",null,null,-1)),p("p",null,[p("strong",null,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[219]||(n[219]=[s("此页内容")])),_:1})])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[220]||(n[220]=[s("想学习，永远都不晚，尤其是针对 Java 8 里面的好东西，Optional 就是其中之一，该类提供了一种用于表示可选值而非空引用的类级别解决方案。作为一名 Java 程序员，我真的是烦透了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[512]||(n[512]=s("[")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[221]||(n[221]=[s("NullPointerException（NPE）")])),_:1}),n[513]||(n[513]=s("](https://javabetter.cn/exception/npe.html)")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[222]||(n[222]=[s("，尽管和它熟得就像一位老朋友，知道它也是迫不得已——程序正在使用一个对象却发现这个对象的值为 null，于是 Java 虚拟机就怒发冲冠地把它抛了出来当做替罪羊。")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[223]||(n[223]=[s("当然了，我们程序员是富有责任心的，不会坐视不管，于是就有了大量的 null 值检查。尽管有时候这种检查完全没有必要，但我们已经习惯了例行公事。终于，Java 8 看不下去了，就引入了 Optional，以便我们编写的代码不再那么刻薄呆板。")])),_:1}),n[514]||(n[514]=p("p",null,[p("img",{src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1724412397742-092defef-5ef0-4dbc-a821-c952de3aad55.png",alt:""})],-1)),p("h3",vn,[p("a",mn,[p("span",null,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[224]||(n[224]=[s("01、没有 Optional 会有什么问题")])),_:1})])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[225]||(n[225]=[s("我们来模拟一个实际的应用场景。小王第一天上班，领导老马就给他安排了一个任务，要他从数据库中根据会员 ID 拉取一个会员的姓名，然后将姓名打印到控制台。虽然是新来的，但这个任务难不倒小王，于是他花了 10 分钟写下了这段代码：")])),_:1}),n[515]||(n[515]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class WithoutOptionalDemo {</span>
<span class="line">    class Member {</span>
<span class="line">        private String name;</span>
<span class="line"></span>
<span class="line">        public String getName() {</span>
<span class="line">            return name;</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        public void setName(String name) {</span>
<span class="line">            this.name = name;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        Member mem = getMemberByIdFromDB();</span>
<span class="line">        if (mem != null) {</span>
<span class="line">            System.out.println(mem.getName());</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static Member getMemberByIdFromDB() {</span>
<span class="line">        // 当前 ID 的会员不存在</span>
<span class="line">        return null;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[226]||(n[226]=[s("由于当前 ID 的会员不存在，所以")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[516]||(n[516]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[227]||(n[227]=[s("getMemberByIdFromDB()")])),_:1}),n[517]||(n[517]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[228]||(n[228]=[s("方法返回了 null 来作为没有获取到该会员的结果，那就意味着在打印会员姓名的时候要先对 mem 判空，否则就会抛出 NPE 异常，不信？让小王把")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[518]||(n[518]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[229]||(n[229]=[s("if (mem != null)")])),_:1}),n[519]||(n[519]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[230]||(n[230]=[s("去掉试试，控制台立马打印错误堆栈给你颜色看看。")])),_:1}),n[520]||(n[520]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span>
<span class="line">	at com.cmower.dzone.optional.WithoutOptionalDemo.main(WithoutOptionalDemo.java:24)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h3",bn,[p("a",gn,[p("span",null,[p("a",yn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[231]||(n[231]=[s("02、Optional 是如何解决这个问题的")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[232]||(n[232]=[s("小王把代码提交后，就兴高采烈地去找老马要新的任务了。本着虚心学习的态度，小王请求老马看一下自己的代码，于是老王就告诉他应该尝试一下 Optional，可以避免没有必要的 null 值检查。现在，让我们来看看小王是如何通过 Optional 来解决上述问题的。")])),_:1}),n[521]||(n[521]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OptionalDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        Optional&lt;Member&gt; optional = getMemberByIdFromDB();</span>
<span class="line">        optional.ifPresent(mem -&gt; {</span>
<span class="line">            System.out.println(&quot;会员姓名是：&quot; + mem.getName());</span>
<span class="line">        });</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static Optional&lt;Member&gt; getMemberByIdFromDB() {</span>
<span class="line">        boolean hasName = true;</span>
<span class="line">        if (hasName) {</span>
<span class="line">            return Optional.of(new Member(&quot;沉默王二&quot;));</span>
<span class="line">        }</span>
<span class="line">        return Optional.empty();</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">class Member {</span>
<span class="line">    private String name;</span>
<span class="line"></span>
<span class="line">    public String getName() {</span>
<span class="line">        return name;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    // getter / setter</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("p",null,[n[236]||(n[236]=p("code",null,'<font style="color:rgb(44, 62, 80);">getMemberByIdFromDB()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[233]||(n[233]=[s("方法返回了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[237]||(n[237]=p("code",null,'<font style="color:rgb(44, 62, 80);">Optional<Member></font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[234]||(n[234]=[s("作为结果，这样就表明 Member 可能存在，也可能不存在，这时候就可以在 Optional 的")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[238]||(n[238]=p("code",null,'<font style="color:rgb(44, 62, 80);">ifPresent()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[235]||(n[235]=[s("方法中使用 Lambda 表达式来直接打印结果。")])),_:1})]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[239]||(n[239]=[s("Optional 之所以可以解决 NPE 的问题，是因为它明确的告诉我们，不需要对它进行判空。它就好像十字路口的路标，明确地告诉你该往哪走。")])),_:1}),p("h3",fn,[p("a",wn,[p("span",null,[p("a",Sn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[240]||(n[240]=[s("03、创建 Optional 对象")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[241]||(n[241]=[s("1）可以使用静态方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[522]||(n[522]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[242]||(n[242]=[s("empty()")])),_:1}),n[523]||(n[523]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[243]||(n[243]=[s("创建一个空的 Optional 对象")])),_:1}),n[524]||(n[524]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span>
<span class="line">System.out.println(empty); // 输出：Optional.empty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[244]||(n[244]=[s("2）可以使用静态方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[525]||(n[525]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[245]||(n[245]=[s("of()")])),_:1}),n[526]||(n[526]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[246]||(n[246]=[s("创建一个非空的 Optional 对象")])),_:1}),n[527]||(n[527]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;沉默王二&quot;);</span>
<span class="line">System.out.println(opt); // 输出：Optional[沉默王二]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[247]||(n[247]=[s("当然了，传递给")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[528]||(n[528]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[248]||(n[248]=[s("of()")])),_:1}),n[529]||(n[529]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[249]||(n[249]=[s("方法的参数必须是非空的，也就是说不能为 null，否则仍然会抛出 NullPointerException。")])),_:1}),n[530]||(n[530]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = null;</span>
<span class="line">Optional&lt;String&gt; optnull = Optional.of(name);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[250]||(n[250]=[s("3）可以使用静态方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[531]||(n[531]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[251]||(n[251]=[s("ofNullable()")])),_:1}),n[532]||(n[532]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[252]||(n[252]=[s("创建一个即可空又可非空的 Optional 对象")])),_:1}),n[533]||(n[533]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = null;</span>
<span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(name);</span>
<span class="line">System.out.println(optOrNull); // 输出：Optional.empty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("p",null,[n[254]||(n[254]=p("code",null,'<font style="color:rgb(44, 62, 80);">ofNullable()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[253]||(n[253]=[s("方法内部有一个三元表达式，如果为参数为 null，则返回私有常量 EMPTY；否则使用 new 关键字创建了一个新的 Optional 对象——不会再抛出 NPE 异常了。")])),_:1})]),p("h3",En,[p("a",qn,[p("span",null,[p("a",xn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[255]||(n[255]=[s("04、判断值是否存在")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[256]||(n[256]=[s("可以通过方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[534]||(n[534]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[257]||(n[257]=[s("isPresent()")])),_:1}),n[535]||(n[535]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[258]||(n[258]=[s("判断一个 Optional 对象是否存在，如果存在，该方法返回 true，否则返回 false——取代了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[536]||(n[536]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[259]||(n[259]=[s("obj != null")])),_:1}),n[537]||(n[537]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[260]||(n[260]=[s("的判断。")])),_:1}),n[538]||(n[538]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;沉默王二&quot;);</span>
<span class="line">System.out.println(opt.isPresent()); // 输出：true</span>
<span class="line"></span>
<span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(null);</span>
<span class="line">System.out.println(optOrNull.isPresent()); // 输出：false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[261]||(n[261]=[s("Java 11 后还可以通过方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[539]||(n[539]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[262]||(n[262]=[s("isEmpty()")])),_:1}),n[540]||(n[540]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[263]||(n[263]=[s("判断与")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[541]||(n[541]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[264]||(n[264]=[s("isPresent()")])),_:1}),n[542]||(n[542]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[265]||(n[265]=[s("相反的结果。")])),_:1}),n[543]||(n[543]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;沉默王二&quot;);</span>
<span class="line">System.out.println(opt.isEmpty()); // 输出：false</span>
<span class="line"></span>
<span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(null);</span>
<span class="line">System.out.println(optOrNull.isEmpty()); // 输出：true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h3",On,[p("a",jn,[p("span",null,[p("a",Ln,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[266]||(n[266]=[s("05、非空表达式")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[267]||(n[267]=[s("Optional 类有一个非常现代化的方法——")])),_:1}),n[544]||(n[544]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[268]||(n[268]=[s("ifPresent()")])),_:1}),n[545]||(n[545]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[269]||(n[269]=[s("，允许我们使用函数式编程的方式执行一些代码，因此，我把它称为非空表达式。如果没有该方法的话，我们通常需要先通过")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[546]||(n[546]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[270]||(n[270]=[s("isPresent()")])),_:1}),n[547]||(n[547]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[271]||(n[271]=[s("方法对 Optional 对象进行判空后再执行相应的代码：")])),_:1}),n[548]||(n[548]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(null);</span>
<span class="line">if (optOrNull.isPresent()) {</span>
<span class="line">    System.out.println(optOrNull.get().length());</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[272]||(n[272]=[s("有了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[549]||(n[549]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[273]||(n[273]=[s("ifPresent()")])),_:1}),n[550]||(n[550]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[274]||(n[274]=[s("之后，情况就完全不同了，可以直接将 Lambda 表达式传递给该方法，代码更加简洁，更加直观。")])),_:1}),n[551]||(n[551]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;沉默王二&quot;);</span>
<span class="line">opt.ifPresent(str -&gt; System.out.println(str.length()));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[275]||(n[275]=[s("Java 9 后还可以通过方法")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[552]||(n[552]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[276]||(n[276]=[s("ifPresentOrElse(action, emptyAction)")])),_:1}),n[553]||(n[553]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[277]||(n[277]=[s("执行两种结果，非空时执行 action，空时执行 emptyAction。")])),_:1}),n[554]||(n[554]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;沉默王二&quot;);</span>
<span class="line">opt.ifPresentOrElse(str -&gt; System.out.println(str.length()), () -&gt; System.out.println(&quot;为空&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("h3",Cn,[p("a",In,[p("span",null,[p("a",Pn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[278]||(n[278]=[s("06、设置（获取）默认值")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[279]||(n[279]=[s("有时候，我们在创建（获取） Optional 对象的时候，需要一个默认值，")])),_:1}),n[555]||(n[555]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[280]||(n[280]=[s("orElse()")])),_:1}),n[556]||(n[556]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[281]||(n[281]=[s("和")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[557]||(n[557]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[282]||(n[282]=[s("orElseGet()")])),_:1}),n[558]||(n[558]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[283]||(n[283]=[s("方法就派上用场了。")])),_:1}),p("p",null,[n[285]||(n[285]=p("code",null,'<font style="color:rgb(44, 62, 80);">orElse()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[284]||(n[284]=[s("方法用于返回包裹在 Optional 对象中的值，如果该值不为 null，则返回；否则返回默认值。该方法的参数类型和值的类型一致。")])),_:1})]),n[559]||(n[559]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String nullName = null;</span>
<span class="line">String name = Optional.ofNullable(nullName).orElse(&quot;沉默王二&quot;);</span>
<span class="line">System.out.println(name); // 输出：沉默王二</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("p",null,[n[288]||(n[288]=p("code",null,'<font style="color:rgb(44, 62, 80);">orElseGet()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[286]||(n[286]=[s("方法与")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[289]||(n[289]=p("code",null,'<font style="color:rgb(44, 62, 80);">orElse()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[287]||(n[287]=[s("方法类似，但参数类型不同。如果 Optional 对象中的值为 null，则执行参数中的函数。")])),_:1})]),n[560]||(n[560]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String nullName = null;</span>
<span class="line">String name = Optional.ofNullable(nullName).orElseGet(()-&gt;&quot;沉默王二&quot;);</span>
<span class="line">System.out.println(name); // 输出：沉默王二</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[290]||(n[290]=[s("从输出结果以及代码的形式上来看，这两个方法极其相似，这不免引起我们的怀疑，Java 类库的设计者有必要这样做吗？")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[291]||(n[291]=[s("假设现在有这样一个获取默认值的方法，很传统的方式。")])),_:1}),n[561]||(n[561]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static String getDefaultValue() {</span>
<span class="line">    System.out.println(&quot;getDefaultValue&quot;);</span>
<span class="line">    return &quot;沉默王二&quot;;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[292]||(n[292]=[s("然后，通过")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[562]||(n[562]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[293]||(n[293]=[s("orElse()")])),_:1}),n[563]||(n[563]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[294]||(n[294]=[s("方法和")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[564]||(n[564]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[295]||(n[295]=[s("orElseGet()")])),_:1}),n[565]||(n[565]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[296]||(n[296]=[s("方法分别调用")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[566]||(n[566]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[297]||(n[297]=[s("getDefaultValue()")])),_:1}),n[567]||(n[567]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[298]||(n[298]=[s("方法返回默认值。")])),_:1}),n[568]||(n[568]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void main(String[] args) {</span>
<span class="line">    String name = null;</span>
<span class="line">    System.out.println(&quot;orElse&quot;);</span>
<span class="line">    String name2 = Optional.ofNullable(name).orElse(getDefaultValue());</span>
<span class="line"></span>
<span class="line">    System.out.println(&quot;orElseGet&quot;);</span>
<span class="line">    String name3 = Optional.ofNullable(name).orElseGet(OrElseOptionalDemo::getDefaultValue);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[299]||(n[299]=[s("注：")])),_:1}),n[569]||(n[569]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[300]||(n[300]=[s("类名 :: 方法名")])),_:1}),n[570]||(n[570]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[301]||(n[301]=[s("是 Java 8 引入的语法，方法名后面是没有")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[571]||(n[571]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[302]||(n[302]=[s("()")])),_:1}),n[572]||(n[572]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[303]||(n[303]=[s("的，表明该方法并不一定会被调用。")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[304]||(n[304]=[s("输出结果如下所示：")])),_:1}),n[573]||(n[573]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">orElse</span>
<span class="line">getDefaultValue</span>
<span class="line"></span>
<span class="line">orElseGet</span>
<span class="line">getDefaultValue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[305]||(n[305]=[s("输出结果是相似的，没什么太大的不同，这是在 Optional 对象的值为 null 的情况下。假如 Optional 对象的值不为 null 呢？")])),_:1}),n[574]||(n[574]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void main(String[] args) {</span>
<span class="line">    String name = &quot;沉默王三&quot;;</span>
<span class="line">    System.out.println(&quot;orElse&quot;);</span>
<span class="line">    String name2 = Optional.ofNullable(name).orElse(getDefaultValue());</span>
<span class="line"></span>
<span class="line">    System.out.println(&quot;orElseGet&quot;);</span>
<span class="line">    String name3 = Optional.ofNullable(name).orElseGet(OrElseOptionalDemo::getDefaultValue);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[306]||(n[306]=[s("输出结果如下所示：")])),_:1}),n[575]||(n[575]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">orElse</span>
<span class="line">getDefaultValue</span>
<span class="line">orElseGet</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[307]||(n[307]=[s("咦，")])),_:1}),n[576]||(n[576]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[308]||(n[308]=[s("orElseGet()")])),_:1}),n[577]||(n[577]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[309]||(n[309]=[s("没有去调用")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[578]||(n[578]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[310]||(n[310]=[s("getDefaultValue()")])),_:1}),n[579]||(n[579]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[311]||(n[311]=[s("。哪个方法的性能更佳，你明白了吧？")])),_:1}),p("h3",Dn,[p("a",Nn,[p("span",null,[p("a",An,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[312]||(n[312]=[s("07、获取值")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[313]||(n[313]=[s("直观从语义上来看，")])),_:1}),n[580]||(n[580]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[314]||(n[314]=[s("get()")])),_:1}),n[581]||(n[581]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[315]||(n[315]=[s("方法才是最正宗的获取 Optional 对象值的方法，但很遗憾，该方法是有缺陷的，因为假如 Optional 对象的值为 null，该方法会抛出 NoSuchElementException 异常。这完全与我们使用 Optional 类的初衷相悖。")])),_:1}),n[582]||(n[582]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class GetOptionalDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String name = null;</span>
<span class="line">        Optional&lt;String&gt; optOrNull = Optional.ofNullable(name);</span>
<span class="line">        System.out.println(optOrNull.get());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[316]||(n[316]=[s("这段程序在运行时会抛出异常：")])),_:1}),n[583]||(n[583]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value present</span>
<span class="line">	at java.base/java.util.Optional.get(Optional.java:141)</span>
<span class="line">	at com.cmower.dzone.optional.GetOptionalDemo.main(GetOptionalDemo.java:9)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[317]||(n[317]=[s("尽管抛出的异常是 NoSuchElementException 而不是 NPE，但在我们看来，显然是在“五十步笑百步”。建议")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[584]||(n[584]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[318]||(n[318]=[s("orElseGet()")])),_:1}),n[585]||(n[585]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[319]||(n[319]=[s("方法获取 Optional 对象的值。")])),_:1}),p("h3",Fn,[p("a",Bn,[p("span",null,[p("a",Tn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[320]||(n[320]=[s("08、过滤值")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[321]||(n[321]=[s("小王通过 Optional 类对之前的代码进行了升级，完成后又兴高采烈地跑去找老马要任务了。老马觉得这小伙子不错，头脑灵活，又干活积极，很值得培养，就又交给了小王一个新的任务：用户注册时对密码的长度进行检查。")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[322]||(n[322]=[s("小王拿到任务后，乐开了花，因为他刚要学习 Optional 类的")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[586]||(n[586]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[323]||(n[323]=[s("filter()")])),_:1}),n[587]||(n[587]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[324]||(n[324]=[s("方法，这就派上了用场。")])),_:1}),n[588]||(n[588]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class FilterOptionalDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String password = &quot;12345&quot;;</span>
<span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(password);</span>
<span class="line">        System.out.println(opt.filter(pwd -&gt; pwd.length() &gt; 6).isPresent());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p("p",null,[n[326]||(n[326]=p("code",null,'<font style="color:rgb(44, 62, 80);">filter()</font>',-1)),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[325]||(n[325]=[s("方法的参数类型为 Predicate（Java 8 新增的一个函数式接口），也就是说可以将一个 Lambda 表达式传递给该方法作为条件，如果表达式的结果为 false，则返回一个 EMPTY 的 Optional 对象，否则返回过滤后的 Optional 对象。")])),_:1})]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[327]||(n[327]=[s("在上例中，由于 password 的长度为 5 ，所以程序输出的结果为 false。假设密码的长度要求在 6 到 10 位之间，那么还可以再追加一个条件。来看小王增加难度后的代码。")])),_:1}),n[589]||(n[589]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Predicate&lt;String&gt; len6 = pwd -&gt; pwd.length() &gt; 6;</span>
<span class="line">Predicate&lt;String&gt; len10 = pwd -&gt; pwd.length() &lt; 10;</span>
<span class="line"></span>
<span class="line">password = &quot;1234567&quot;;</span>
<span class="line">opt = Optional.ofNullable(password);</span>
<span class="line">boolean result = opt.filter(len6.and(len10)).isPresent();</span>
<span class="line">System.out.println(result);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[328]||(n[328]=[s("这次程序输出的结果为 true，因为密码变成了 7 位，在 6 到 10 位之间。想象一下，假如小王使用 if-else 来完成这个任务，代码该有多冗长。")])),_:1}),p("h3",Rn,[p("a",Un,[p("span",null,[p("a",Mn,[a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[329]||(n[329]=[s("09、转换值")])),_:1}),a(o)])])])]),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[330]||(n[330]=[s("小王检查完了密码的长度，仍然觉得不够尽兴，觉得要对密码的强度也进行检查，比如说密码不能是“password”，这样的密码太弱了。于是他又开始研究起了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[590]||(n[590]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[331]||(n[331]=[s("map()")])),_:1}),n[591]||(n[591]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[332]||(n[332]=[s("方法，该方法可以按照一定的规则将原有 Optional 对象转换为一个新的 Optional 对象，原有的 Optional 对象不会更改。")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[333]||(n[333]=[s("先来看小王写的一个简单的例子：")])),_:1}),n[592]||(n[592]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OptionalMapDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String name = &quot;沉默王二&quot;;</span>
<span class="line">        Optional&lt;String&gt; nameOptional = Optional.of(name);</span>
<span class="line">        Optional&lt;Integer&gt; intOpt = nameOptional</span>
<span class="line">                .map(String::length);</span>
<span class="line">        </span>
<span class="line">        System.out.println( intOpt.orElse(0));</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[334]||(n[334]=[s("在上面这个例子中，")])),_:1}),n[593]||(n[593]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[335]||(n[335]=[s("map()")])),_:1}),n[594]||(n[594]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[336]||(n[336]=[s("方法的参数")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[595]||(n[595]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[337]||(n[337]=[s("String::length")])),_:1}),n[596]||(n[596]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[338]||(n[338]=[s("，意味着要 将原有的字符串类型的 Optional 按照字符串长度重新生成一个新的 Optional 对象，类型为 Integer。")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[339]||(n[339]=[s("搞清楚了")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[597]||(n[597]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[340]||(n[340]=[s("map()")])),_:1}),n[598]||(n[598]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[341]||(n[341]=[s("方法的基本用法后，小王决定把")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[599]||(n[599]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[342]||(n[342]=[s("map()")])),_:1}),n[600]||(n[600]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[343]||(n[343]=[s("方法与")])),_:1}),a(t,{style:{color:"rgb(44, 62, 80)"}}),n[601]||(n[601]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[344]||(n[344]=[s("filter()")])),_:1}),n[602]||(n[602]=s("`")),a(t,{style:{color:"rgb(44, 62, 80)"}}),a(t,{style:{color:"rgb(44, 62, 80)"}},{default:l(()=>n[345]||(n[345]=[s("方法结合起来用，前者用于将密码转化为小写，后者用于判断长度以及是否是“password”。")])),_:1}),n[603]||(n[603]=e(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OptionalMapFilterDemo {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        String password = &quot;password&quot;;</span>
<span class="line">        Optional&lt;String&gt;  opt = Optional.ofNullable(password);</span>
<span class="line"></span>
<span class="line">        Predicate&lt;String&gt; len6 = pwd -&gt; pwd.length() &gt; 6;</span>
<span class="line">        Predicate&lt;String&gt; len10 = pwd -&gt; pwd.length() &lt; 10;</span>
<span class="line">        Predicate&lt;String&gt; eq = pwd -&gt; pwd.equals(&quot;password&quot;);</span>
<span class="line"></span>
<span class="line">        boolean result = opt.map(String::toLowerCase).filter(len6.and(len10 ).and(eq)).isPresent();</span>
<span class="line">        System.out.println(result);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35376129/1724412397711-b453eec1-c5aa-4087-a219-5ba8edb0885a.jpeg" alt=""></p><h1 id="什么是spi机制" tabindex="-1"><a class="header-anchor" href="#什么是spi机制"><span>什么是SPI机制</span></a></h1><p><strong>SPI</strong>（Service Provider Interface），是 JDK 内置的一种<strong>服务提供发现机制</strong>，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如 java.sql.Driver 接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL 和 PostgreSQL 都有不同的实现提供给用户，而 Java 的 SPI 机制可以为某个接口寻找服务实现。<strong>Java 中 SPI 机制</strong>主要思想是<strong>将装配的控制权移到程序之外</strong>，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。</p><p><strong>SPI</strong> 整体机制图如下:</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35376129/1727095381864-d868277f-bae2-4ce0-9829-42d06b59ee46.jpeg" alt=""></p><p>当服务的提供者提供了一种接口的实现之后，需要在 classpath 下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code>。</p><h1 id="spi机制的简单示例" tabindex="-1"><a class="header-anchor" href="#spi机制的简单示例"><span>SPI机制的简单示例</span></a></h1>`,8)),p("blockquote",null,[p("p",null,[n[347]||(n[347]=s("网上找了个例子：")),p("a",Jn,[n[346]||(n[346]=s("这里在新窗口打开")),a(o)])])]),n[604]||(n[604]=e(`<p>我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。</p><ul><li>先定义好接口</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Search</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>   </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文件搜索实现</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileSearch</span> <span class="token keyword">implements</span> <span class="token class-name">Search</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件搜索 &quot;</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据库搜索实现</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseSearch</span> <span class="token keyword">implements</span> <span class="token class-name">Search</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据搜索 &quot;</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),p("ul",null,[p("li",null,[p("strong",null,[a(t,{style:{color:"#DF2A3F"}},{default:l(()=>n[348]||(n[348]=[s("resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件：")])),_:1})]),n[350]||(n[350]=p("code",null,'**<font style="color:#DF2A3F;">com.cainiao.ys.spi.learn.Search</font>**',-1)),p("strong",null,[a(t,{style:{color:"#DF2A3F"}},{default:l(()=>n[349]||(n[349]=[s("（接口所在文件夹路径），里面加上我们需要用到的实现类（该接口实现类所在路径）")])),_:1})])])]),n[605]||(n[605]=e(`<div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line">com.cainiao.ys.spi.learn.FileSearch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>测试方法</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token class-name">Search</span> search <span class="token operator">=</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           search<span class="token punctuation">.</span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出结果：文件搜索 hello world</p><p>如果在<code>com.cainiao.ys.spi.learn.Search</code>文件里写上两个实现类，那最后的输出结果就是两行了。</p><p>这就是因为<code>ServiceLoader.load(Search.class)</code>在加载某接口时，会去<code>META-INF/services</code>下找接口的全限定名文件，再根据里面的内容加载相应的实现类。</p><p>这就是spi的思想，接口的实现由provider实现，provider 只用在提交的 jar 包里的<code>META-INF/services</code>下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1727666896110-737419f6-8b46-44d9-b810-05afd92a5edf.png" alt=""></p><h1 id="spi机制的广泛应用" tabindex="-1"><a class="header-anchor" href="#spi机制的广泛应用"><span>SPI机制的广泛应用</span></a></h1><h2 id="spi机制-jdbc-drivermanager" tabindex="-1"><a class="header-anchor" href="#spi机制-jdbc-drivermanager"><span>SPI机制 - JDBC DriverManager</span></a></h2><p>在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName(&quot;com.mysql.jdbc.Driver&quot;)这句先加载数据库相关的驱动，然后再进行获取连接等的操作。<strong>而JDBC4.0之后不需要用Class.forName(&quot;com.mysql.jdbc.Driver&quot;)来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java 的 SPI 扩展机制来实现</strong>。</p>`,11)),p("h3",Gn,[p("a",Kn,[p("span",null,[p("a",Vn,[n[351]||(n[351]=s("#")),a(o)]),n[352]||(n[352]=s(" JDBC接口定义"))])])]),n[606]||(n[606]=p("p",null,[s("首先在java中定义了接口"),p("code",null,"java.sql.Driver"),s("，并没有具体的实现，具体的实现都是由不同厂商来提供的。")],-1)),p("h3",zn,[p("a",Yn,[p("span",null,[p("a",Wn,[n[353]||(n[353]=s("#")),a(o)]),n[354]||(n[354]=s(" mysql实现"))])])]),n[607]||(n[607]=p("p",null,[s("在mysql的jar包"),p("code",null,"mysql-connector-java-6.0.6.jar"),s("中，可以找到"),p("code",null,"META-INF/services"),s("目录，该目录下会有一个名字为"),p("code",null,"java.sql.Driver"),s("的文件，文件内容是"),p("code",null,"com.mysql.cj.jdbc.Driver"),s("，这里面的内容就是针对Java中定义的接口的实现。")],-1)),p("h3",Hn,[p("a",Xn,[p("span",null,[p("a",Qn,[n[355]||(n[355]=s("#")),a(o)]),n[356]||(n[356]=s(" postgresql实现"))])])]),n[608]||(n[608]=p("p",null,[s("同样在postgresql的jar包"),p("code",null,"postgresql-42.0.0.jar"),s("中，也可以找到同样的配置文件，文件内容是"),p("code",null,"org.postgresql.Driver"),s("，这是postgresql对Java的"),p("code",null,"java.sql.Driver"),s("的实现。")],-1)),p("h3",Zn,[p("a",$n,[p("span",null,[p("a",hn,[n[357]||(n[357]=s("#")),a(o)]),n[358]||(n[358]=s(" 使用方法"))])])]),n[609]||(n[609]=e(`<p>上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>来加载驱动了，而是直接使用如下代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:xxxx://xxxx:xxxx/xxxx&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里并没有涉及到spi的使用，接着看下面的解析。</p>`,3)),p("h3",_n,[p("a",ns,[p("span",null,[p("a",ss,[n[359]||(n[359]=s("#")),a(o)]),n[360]||(n[360]=s(" 源码实现"))])])]),n[610]||(n[610]=e(`<p>上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到SPI的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>！</p><p>上面的代码可以直接获取数据库连接进行操作，但是跟SPI有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用Java的SPI扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在<code>DriverManager</code>中，<code>DriverManager</code>是Java中的实现，用来获取数据库连接，在<code>DriverManager</code>中有一个静态代码块如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">loadInitialDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JDBC DriverManager initialized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadInitialDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> drivers<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        drivers <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.drivers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        drivers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">//使用SPI的ServiceLoader来加载接口的实现</span></span>
<span class="line">            <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> loadedDrivers <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> driversIterator <span class="token operator">=</span> loadedDrivers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">while</span><span class="token punctuation">(</span>driversIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    driversIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Do nothing</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span> <span class="token operator">+</span> drivers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>drivers <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> drivers<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> driversList <span class="token operator">=</span> drivers<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;number of Drivers:&quot;</span> <span class="token operator">+</span> driversList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> aDriver <span class="token operator">:</span> driversList<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DriverManager.Initialize: loading &quot;</span> <span class="token operator">+</span> aDriver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>aDriver<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DriverManager.Initialize: load failed: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码主要步骤是：</p><ul><li>从系统变量中获取有关驱动的定义。</li><li>使用SPI来获取驱动的实现。</li><li>遍历使用SPI获取到的具体实现，实例化各个实现类。</li><li>根据第一步获取到的驱动列表来实例化具体实现类。</li></ul><p>我们主要关注2,3步，这两步是SPI的用法，首先看第二步，使用SPI来获取驱动的实现，对应的代码是：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> loadedDrivers <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里没有去<code>META-INF/services</code>目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。</p><p>接着看第三步，遍历使用SPI获取到的具体实现，实例化各个实现类，对应的代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//获取迭代器</span></span>
<span class="line"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> driversIterator <span class="token operator">=</span> loadedDrivers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//遍历所有的驱动实现</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>driversIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    driversIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历的时候，首先调用<code>driversIterator.hasNext()</code>方法，这里会搜索classpath下以及jar包中所有的<code>META-INF/services</code>目录下的<code>java.sql.Driver</code>文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（ServiceLoader具体的源码实现在下面）。</p><p>然后是调用<code>driversIterator.next();</code>方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。</p><p>可以看下截图，我在测试项目中添加了两个jar包，<code>mysql-connector-java-6.0.6.jar</code>和<code>postgresql-42.0.0.0.jar</code>，跟踪到DriverManager中之后：<img src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1727095614917-530f4f0c-31f3-4b03-8aa1-3067d2fedeb2.png" alt=""></p><p>可以看到此时迭代器中有两个驱动，mysql和postgresql的都被加载了。</p><h2 id="spi机制-common-logging" tabindex="-1"><a class="header-anchor" href="#spi机制-common-logging"><span>SPI机制 - Common-Logging</span></a></h2>`,17)),p("p",null,[n[362]||(n[362]=s("common-logging（也称Jakarta Commons Logging，缩写 JCL）是常用的日志库门面，具体")),p("a",as,[n[361]||(n[361]=s("日志库相关可以看这篇")),a(o)]),n[363]||(n[363]=s("。我们看下它是怎么解耦的。"))]),n[611]||(n[611]=e(`<p>首先，日志实例是通过LogFactory的getLog(String)方法创建的：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LogConfigurationException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LogFatory是一个抽象类，它负责加载具体的日志实现，分析其Factory getFactory()方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>LogFactory</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LogConfigurationException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Identify the class loader we will be using</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> contextClassLoader <span class="token operator">=</span> <span class="token function">getContextClassLoaderInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClassLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// This is an odd enough situation to report about. This</span></span>
<span class="line">        <span class="token comment">// output will be a nuisance on JDK1.1, as the system</span></span>
<span class="line">        <span class="token comment">// classloader is null in that environment.</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;Context classloader is null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Return any previously registered factory for this class loader</span></span>
<span class="line">    <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>LogFactory</span> factory <span class="token operator">=</span> <span class="token function">getCachedFactory</span><span class="token punctuation">(</span>contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">logDiagnostic</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&quot;[LOOKUP] LogFactory implementation requested for the first time for context classloader &quot;</span> <span class="token operator">+</span></span>
<span class="line">                        <span class="token function">objectId</span><span class="token punctuation">(</span>contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">logHierarchy</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] &quot;</span><span class="token punctuation">,</span> contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Load properties file.</span></span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line">    <span class="token comment">// If the properties file exists, then its contents are used as</span></span>
<span class="line">    <span class="token comment">// &quot;attributes&quot; on the LogFactory implementation class. One particular</span></span>
<span class="line">    <span class="token comment">// property may also control which LogFactory concrete subclass is</span></span>
<span class="line">    <span class="token comment">// used, but only if other discovery mechanisms fail..</span></span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line">    <span class="token comment">// As the properties file (if it exists) will be used one way or</span></span>
<span class="line">    <span class="token comment">// another in the end we may as well look for it first.</span></span>
<span class="line">    <span class="token comment">// classpath根目录下寻找commons-logging.properties</span></span>
<span class="line">    <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token function">getConfigurationFile</span><span class="token punctuation">(</span>contextClassLoader<span class="token punctuation">,</span> <span class="token constant">FACTORY_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Determine whether we will be using the thread context class loader to</span></span>
<span class="line">    <span class="token comment">// load logging classes or not by checking the loaded properties file (if any).</span></span>
<span class="line">    <span class="token comment">// classpath根目录下commons-logging.properties是否配置use_tccl</span></span>
<span class="line">    <span class="token class-name">ClassLoader</span> baseClassLoader <span class="token operator">=</span> contextClassLoader<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> useTCCLStr <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TCCL_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>useTCCLStr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// The Boolean.valueOf(useTCCLStr).booleanValue() formulation</span></span>
<span class="line">            <span class="token comment">// is required for Java 1.2 compatibility.</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>useTCCLStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Don&#39;t use current context classloader when locating any</span></span>
<span class="line">                <span class="token comment">// LogFactory or Log classes, just use the class that loaded</span></span>
<span class="line">                <span class="token comment">// this abstract class. When this class is deployed in a shared</span></span>
<span class="line">                <span class="token comment">// classpath of a container, it means webapps cannot deploy their</span></span>
<span class="line">                <span class="token comment">// own logging implementations. It also means that it is up to the</span></span>
<span class="line">                <span class="token comment">// implementation whether to load library-specific config files</span></span>
<span class="line">                <span class="token comment">// from the TCCL or not.</span></span>
<span class="line">                baseClassLoader <span class="token operator">=</span> thisClassLoader<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 这里真正开始决定使用哪个factory</span></span>
<span class="line">    <span class="token comment">// 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory</span></span>
<span class="line">    <span class="token comment">// Determine which concrete LogFactory subclass to use.</span></span>
<span class="line">    <span class="token comment">// First, try a global system property</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] Looking for system property [&quot;</span> <span class="token operator">+</span> <span class="token constant">FACTORY_PROPERTY</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;] to define the LogFactory subclass to use...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> factoryClass <span class="token operator">=</span> <span class="token function">getSystemProperty</span><span class="token punctuation">(</span><span class="token constant">FACTORY_PROPERTY</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] Creating an instance of LogFactory class &#39;&quot;</span> <span class="token operator">+</span> factoryClass <span class="token operator">+</span></span>
<span class="line">                        <span class="token string">&quot;&#39; as specified by system property &quot;</span> <span class="token operator">+</span> <span class="token constant">FACTORY_PROPERTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            factory <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span>factoryClass<span class="token punctuation">,</span> baseClassLoader<span class="token punctuation">,</span> contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] No system property [&quot;</span> <span class="token operator">+</span> <span class="token constant">FACTORY_PROPERTY</span> <span class="token operator">+</span> <span class="token string">&quot;] defined.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot; instance of the custom factory class&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;: [&quot;</span> <span class="token operator">+</span> <span class="token function">trim</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot;]. Trying alternative implementations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// ignore</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// This is not consistent with the behaviour when a bad LogFactory class is</span></span>
<span class="line">        <span class="token comment">// specified in a services file.</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token comment">// One possible exception that can occur here is a ClassCastException when</span></span>
<span class="line">        <span class="token comment">// the specified class wasn&#39;t castable to this LogFactory type.</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] An exception occurred while trying to create an&quot;</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot; instance of the custom factory class&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;: [&quot;</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token function">trim</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot;] as specified by a system property.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">throw</span> e<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现</span></span>
<span class="line">    <span class="token comment">// Second, try to find a service by using the JDK1.3 class</span></span>
<span class="line">    <span class="token comment">// discovery mechanism, which involves putting a file with the name</span></span>
<span class="line">    <span class="token comment">// of an interface class in the META-INF/services directory, where the</span></span>
<span class="line">    <span class="token comment">// contents of the file is a single line specifying a concrete class</span></span>
<span class="line">    <span class="token comment">// that implements the desired interface.</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] Looking for a resource file of name [&quot;</span> <span class="token operator">+</span> <span class="token constant">SERVICE_ID</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot;] to define the LogFactory subclass to use...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID</span></span>
<span class="line">            <span class="token keyword">final</span> <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>contextClassLoader<span class="token punctuation">,</span> <span class="token constant">SERVICE_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// This code is needed by EBCDIC and other strange systems.</span></span>
<span class="line">                <span class="token comment">// It&#39;s a fix for bugs reported in xerces</span></span>
<span class="line">                <span class="token class-name">BufferedReader</span> rd<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">String</span> factoryClassName <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                rd<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryClassName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP]  Creating an instance of LogFactory class &quot;</span> <span class="token operator">+</span></span>
<span class="line">                                factoryClassName <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot; as specified by file &#39;&quot;</span> <span class="token operator">+</span> <span class="token constant">SERVICE_ID</span> <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot;&#39; which was present in the path of the context classloader.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    factory <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">,</span> baseClassLoader<span class="token punctuation">,</span> contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// is == null</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] No resource file with name &#39;&quot;</span> <span class="token operator">+</span> <span class="token constant">SERVICE_ID</span> <span class="token operator">+</span> <span class="token string">&quot;&#39; found.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// note: if the specified LogFactory class wasn&#39;t compatible with LogFactory</span></span>
<span class="line">            <span class="token comment">// for some reason, a ClassCastException will be caught here, and attempts will</span></span>
<span class="line">            <span class="token comment">// continue to find a compatible class.</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">logDiagnostic</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span> <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot; instance of the custom factory class&quot;</span> <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot;: [&quot;</span> <span class="token operator">+</span> <span class="token function">trim</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot;]. Trying alternative implementations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// ignore</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory</span></span>
<span class="line">    <span class="token comment">// Third try looking into the properties file read earlier (if found)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">logDiagnostic</span><span class="token punctuation">(</span></span>
<span class="line">                        <span class="token string">&quot;[LOOKUP] Looking in properties file for entry with key &#39;&quot;</span> <span class="token operator">+</span> <span class="token constant">FACTORY_PROPERTY</span> <span class="token operator">+</span></span>
<span class="line">                                <span class="token string">&quot;&#39; to define the LogFactory subclass to use...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token class-name">String</span> factoryClass <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">FACTORY_PROPERTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">logDiagnostic</span><span class="token punctuation">(</span></span>
<span class="line">                            <span class="token string">&quot;[LOOKUP] Properties file specifies LogFactory subclass &#39;&quot;</span> <span class="token operator">+</span> factoryClass <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                factory <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span>factoryClass<span class="token punctuation">,</span> baseClassLoader<span class="token punctuation">,</span> contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// TODO: think about whether we need to handle exceptions from newFactory</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] Properties file has no entry specifying LogFactory subclass.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">logDiagnostic</span><span class="token punctuation">(</span><span class="token string">&quot;[LOOKUP] No properties file available to determine&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; LogFactory subclass from..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl</span></span>
<span class="line">    <span class="token comment">// Fourth, try the fallback implementation class</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDiagnosticsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">logDiagnostic</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token string">&quot;[LOOKUP] Loading the default LogFactory implementation &#39;&quot;</span> <span class="token operator">+</span> <span class="token constant">FACTORY_DEFAULT</span> <span class="token operator">+</span></span>
<span class="line">                            <span class="token string">&quot;&#39; via the same classloader that loaded this LogFactory&quot;</span> <span class="token operator">+</span></span>
<span class="line">                            <span class="token string">&quot; class (ie not looking in the context classloader).&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Note: unlike the above code which can try to load custom LogFactory</span></span>
<span class="line">        <span class="token comment">// implementations via the TCCL, we don&#39;t try to load the default LogFactory</span></span>
<span class="line">        <span class="token comment">// implementation via the context classloader because:</span></span>
<span class="line">        <span class="token comment">// * that can cause problems (see comments in newFactory method)</span></span>
<span class="line">        <span class="token comment">// * no-one should be customising the code of the default class</span></span>
<span class="line">        <span class="token comment">// Yes, we do give up the ability for the child to ship a newer</span></span>
<span class="line">        <span class="token comment">// version of the LogFactoryImpl class and have it used dynamically</span></span>
<span class="line">        <span class="token comment">// by an old LogFactory class in the parent, but that isn&#39;t</span></span>
<span class="line">        <span class="token comment">// necessarily a good idea anyway.</span></span>
<span class="line">        factory <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span><span class="token constant">FACTORY_DEFAULT</span><span class="token punctuation">,</span> thisClassLoader<span class="token punctuation">,</span> contextClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">            * Always cache using context class loader.</span>
<span class="line">            */</span></span>
<span class="line">        <span class="token function">cacheFactory</span><span class="token punctuation">(</span>contextClassLoader<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Enumeration</span> names <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">propertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">String</span> value <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                factory<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> factory<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，抽象类LogFactory加载具体实现的步骤如下：</p><ul><li>从vm系统属性org.apache.commons.logging.LogFactory</li><li>使用SPI服务发现机制，发现org.apache.commons.logging.LogFactory的实现</li><li>查找classpath根目录commons-logging.properties的org.apache.commons.logging.LogFactory属性是否指定factory实现</li><li>使用默认factory实现，org.apache.commons.logging.impl.LogFactoryImpl</li></ul><p>LogFactory的getLog()方法返回类型是org.apache.commons.logging.Log接口，提供了从trace到fatal方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。</p><h2 id="spi机制-插件体系" tabindex="-1"><a class="header-anchor" href="#spi机制-插件体系"><span>SPI机制 - 插件体系</span></a></h2><p>其实最具spi思想的应该属于插件开发，我们项目中也用到的这种思想，后面再说，这里具体说一下eclipse的插件思想。</p><p>Eclipse使用OSGi作为插件系统的基础，动态添加新插件和停止现有插件，以动态的方式管理组件生命周期。</p><p>一般来说，插件的文件结构必须在指定目录下包含以下三个文件：</p><ul><li><code>META-INF/MANIFEST.MF</code>: 项目基本配置信息，版本、名称、启动器等</li><li><code>build.properties</code>: 项目的编译配置信息，包括，源代码路径、输出路径</li><li><code>plugin.xml</code>：插件的操作配置信息，包含弹出菜单及点击菜单后对应的操作执行类等</li></ul><p>当eclipse启动时，会遍历plugins文件夹中的目录，扫描每个插件的清单文件<code>MANIFEST.MF</code>，并建立一个内部模型来记录它所找到的每个插件的信息，就实现了动态添加新的插件。</p><p>这也意味着是eclipse制定了一系列的规则，像是文件结构、类型、参数等。插件开发者遵循这些规则去开发自己的插件，eclipse并不需要知道插件具体是怎样开发的，只需要在启动的时候根据配置文件解析、加载到系统里就好了，是spi思想的一种体现。</p><h2 id="spi机制-spring中spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制-spring中spi机制"><span>SPI机制 - Spring中SPI机制</span></a></h2><p>在springboot的自动装配过程中，最终会加载<code>META-INF/spring.factories</code>文件，而加载的过程是由<code>SpringFactoriesLoader</code>加载的。从CLASSPATH下的每个Jar包中搜寻所有<code>META-INF/spring.factories</code>配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FACTORIES_RESOURCE_LOCATION</span> <span class="token operator">=</span> <span class="token string">&quot;META-INF/spring.factories&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// spring.factories文件的格式为：key=value1,value2,value3</span></span>
<span class="line"><span class="token comment">// 从所有的jar包中找到META-INF/spring.factories文件</span></span>
<span class="line"><span class="token comment">// 然后从文件中解析出key=factoryClass类名称的所有value值</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> factoryClass<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> factoryClassName <span class="token operator">=</span> factoryClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 取得资源文件的URL</span></span>
<span class="line">    <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> urls <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span><span class="token constant">FACTORIES_RESOURCE_LOCATION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 遍历所有的URL</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 根据资源文件URL解析properties文件，得到对应的一组@Configuration类</span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> factoryClassNames <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>factoryClassName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 组装数据，并返回</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>factoryClassNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="spi机制深入理解" tabindex="-1"><a class="header-anchor" href="#spi机制深入理解"><span>SPI机制深入理解</span></a></h1><h2 id="spi机制通常怎么使用" tabindex="-1"><a class="header-anchor" href="#spi机制通常怎么使用"><span>SPI机制通常怎么使用</span></a></h2><p>看完上面的几个例子解析，应该都能知道大概的流程了：</p><ul><li>有关组织或者公司定义标准。</li><li>具体厂商或者框架开发者实现。</li><li>程序猿使用。</li></ul>`,21)),p("h3",ts,[p("a",ls,[p("span",null,[p("a",ps,[n[364]||(n[364]=s("#")),a(o)]),n[365]||(n[365]=s(" 定义标准"))])])]),n[612]||(n[612]=p("p",null,[s("定义标准，就是定义接口。比如接口"),p("code",null,"java.sql.Driver")],-1)),p("h3",es,[p("a",os,[p("span",null,[p("a",is,[n[366]||(n[366]=s("#")),a(o)]),n[367]||(n[367]=s(" 具体厂商或者框架开发者实现"))])])]),n[613]||(n[613]=p("p",null,"厂商或者框架开发者开发具体的实现：",-1)),n[614]||(n[614]=p("p",null,[s("在"),p("code",null,"META-INF/services"),s("目录下定义一个名字为接口全限定名的文件，比如"),p("code",null,"java.sql.Driver"),s("文件，文件内容是具体的实现名字，比如"),p("code",null,"me.cxis.sql.MyDriver"),s("。")],-1)),n[615]||(n[615]=p("p",null,[s("写具体的实现"),p("code",null,"me.cxis.sql.MyDriver"),s("，都是对接口Driver的实现。")],-1)),p("h3",cs,[p("a",us,[p("span",null,[p("a",rs,[n[368]||(n[368]=s("#")),a(o)]),n[369]||(n[369]=s(" 程序猿使用"))])])]),n[616]||(n[616]=e(`<p>我们会引用具体厂商的jar包来实现我们的功能：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> loadedDrivers <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//获取迭代器</span></span>
<span class="line"><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> driversIterator <span class="token operator">=</span> loadedDrivers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//遍历</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span>driversIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    driversIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//可以做具体的业务逻辑</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),p("h3",ds,[p("a",ks,[p("span",null,[p("a",vs,[n[370]||(n[370]=s("#")),a(o)]),n[371]||(n[371]=s(" 使用规范"))])])]),n[617]||(n[617]=p("p",null,"最后总结一下jdk spi需要遵循的规范",-1)),n[618]||(n[618]=p("p",null,[p("img",{src:"https://cdn.nlark.com/yuque/0/2024/jpeg/35376129/1727095721741-0df15fba-0679-4903-8b99-dc354c2a823a.jpeg",alt:""})],-1)),p("h2",ms,[p("a",bs,[p("span",null,[p("a",gs,[n[372]||(n[372]=s("#")),a(o)]),n[373]||(n[373]=s(" SPI和API的区别是什么"))])])]),n[619]||(n[619]=e("<p>这里实际包含两个问题，第一个SPI和API的区别？第二个什么时候用API，什么时候用SPI？</p><p>SPI - “接口”位于“调用方”所在的“包”中</p><ul><li>概念上更依赖调用方。</li><li>组织上位于调用方所在的包中。</li><li>实现位于独立的包中。</li><li>常见的例子是：插件模式的插件。</li></ul><p>API - “接口”位于“实现方”所在的“包”中</p><ul><li>概念上更接近实现方。</li><li>组织上位于实现方所在的包中。</li><li>实现和接口在一个包中。</li></ul><p>参考：</p>",6)),p("ul",null,[p("li",null,[p("a",ys,[n[374]||(n[374]=s("difference-between-spi-and-api在新窗口打开")),a(o)])]),p("li",null,[p("a",fs,[n[375]||(n[375]=s("设计原则：小议 SPI 和 API在新窗口打开")),a(o)])])]),n[620]||(n[620]=e(`<p><img src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1727095745273-260d3d18-3d3c-43e5-a2ca-c79503005272.png" alt=""><img src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1727095752186-19fb91ed-6ac7-45d4-884a-9e51f1eea411.png" alt=""></p><h2 id="spi机制实现原理" tabindex="-1"><a class="header-anchor" href="#spi机制实现原理"><span>SPI机制实现原理</span></a></h2><p>不妨看下JDK中<code>ServiceLoader&lt;S&gt;</code>方法的具体实现：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//查找配置文件的目录</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;META-INF/services/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//表示要被加载的服务的类或接口</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//这个ClassLoader用来定位，加载，实例化服务提供者</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 访问控制上下文</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 缓存已经被实例化的服务提供者，按照实例化的顺序存储</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 迭代器</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LazyIterator</span> lookupIterator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//清空缓存中所有已实例化的服务提供者</span></span>
<span class="line">        providers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//新建一个迭代器，该迭代器会从头查找和实例化服务提供者</span></span>
<span class="line">        lookupIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyIterator</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//私有构造器</span></span>
<span class="line">    <span class="token comment">//使用指定的类加载器和服务创建服务加载器</span></span>
<span class="line">    <span class="token comment">//如果没有指定类加载器，使用系统类加载器，就是应用类加载器。</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> svc<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> cl<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        service <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>svc<span class="token punctuation">,</span> <span class="token string">&quot;Service interface cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        loader <span class="token operator">=</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cl<span class="token punctuation">;</span></span>
<span class="line">        acc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//解析失败处理的方法</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">ServiceConfigurationError</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConfigurationError</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">,</span></span>
<span class="line">                                            cause<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">ServiceConfigurationError</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConfigurationError</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">URL</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">ServiceConfigurationError</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//解析服务提供者配置文件中的一行</span></span>
<span class="line">    <span class="token comment">//首先去掉注释校验，然后保存</span></span>
<span class="line">    <span class="token comment">//返回下一行行号</span></span>
<span class="line">    <span class="token comment">//重复的配置项和已经被实例化的配置项不会被保存</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">parseLine</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">URL</span> u<span class="token punctuation">,</span> <span class="token class-name">BufferedReader</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> lc<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServiceConfigurationError</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//读取一行</span></span>
<span class="line">        <span class="token class-name">String</span> ln <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ln <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//#号代表注释行</span></span>
<span class="line">        <span class="token keyword">int</span> ci <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ci <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> ln <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ci<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        ln <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> n <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ln<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ln<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;\\t&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> <span class="token string">&quot;Illegal configuration-file syntax&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> cp <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isJavaIdentifierStart</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> <span class="token string">&quot;Illegal provider-class name: &quot;</span> <span class="token operator">+</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">charCount</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                cp <span class="token operator">=</span> ln<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isJavaIdentifierPart</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cp <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> <span class="token string">&quot;Illegal provider-class name: &quot;</span> <span class="token operator">+</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>providers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>names<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> lc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//解析配置文件，解析指定的url配置文件</span></span>
<span class="line">    <span class="token comment">//使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">URL</span> u<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">throws</span> <span class="token class-name">ServiceConfigurationError</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">BufferedReader</span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            in <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lc <span class="token operator">=</span> <span class="token function">parseLine</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> u<span class="token punctuation">,</span> r<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//服务提供者查找的迭代器</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LazyIterator</span></span>
<span class="line">        <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">;</span><span class="token comment">//服务提供者接口</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">;</span><span class="token comment">//类加载器</span></span>
<span class="line">        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> configs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//保存实现类的url</span></span>
<span class="line">        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pending <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//保存实现类的全名</span></span>
<span class="line">        <span class="token class-name">String</span> nextName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//迭代器中下一个实现类的全名</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">LazyIterator</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>loader <span class="token operator">=</span> loader<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>configs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">String</span> fullName <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">                        configs <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">else</span></span>
<span class="line">                        configs <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pending <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>pending<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configs<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                pending <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> configs<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            nextName <span class="token operator">=</span> pending<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">S</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> cn <span class="token operator">=</span> nextName<span class="token punctuation">;</span></span>
<span class="line">            nextName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>service<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">fail</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token string">&quot;Provider &quot;</span> <span class="token operator">+</span> cn  <span class="token operator">+</span> <span class="token string">&quot; not a subtype&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">S</span> p <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                providers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cn<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> p<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">hasNextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">S</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">public</span> <span class="token class-name">S</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">nextService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//获取迭代器</span></span>
<span class="line">    <span class="token comment">//返回遍历服务提供者的迭代器</span></span>
<span class="line">    <span class="token comment">//以懒加载的方式加载可用的服务提供者</span></span>
<span class="line">    <span class="token comment">//懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//按照实例化顺序返回已经缓存的服务提供者实例</span></span>
<span class="line">            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> knownProviders</span>
<span class="line">                <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>knownProviders<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> lookupIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">S</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>knownProviders<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> knownProviders<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> lookupIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//为指定的服务使用指定的类加载器来创建一个ServiceLoader</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span></span>
<span class="line">                                            <span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//使用线程上下文的类加载器来创建ServiceLoader</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//使用扩展类加载器为指定的服务创建ServiceLoader</span></span>
<span class="line">    <span class="token comment">//只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadInstalled</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ClassLoader</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            prev <span class="token operator">=</span> cl<span class="token punctuation">;</span></span>
<span class="line">            cl <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;java.util.ServiceLoader[&quot;</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>首先</strong>，<code>ServiceLoader</code>实现了<code>Iterable</code>接口，所以它有迭代器的属性，这里主要都是实现了迭代器的<code>hasNext</code>和<code>next</code>方法。这里主要都是调用的<code>lookupIterator</code>的相应<code>hasNext</code>和<code>next</code>方法，<code>lookupIterator</code>是懒加载迭代器。</p><p><strong>其次</strong>，<code>LazyIterator</code>中的<code>hasNext</code>方法，静态变量PREFIX就是<code>”META-INF/services/”</code>目录，这也就是为什么需要在<code>classpath</code>下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件。</p><p><strong>最后</strong>，通过反射方法<code>Class.forName()</code>加载类对象，并用<code>newInstance</code>方法将类实例化，并把实例化后的类缓存到<code>providers</code>对象中，(<code>LinkedHashMap&lt;String,S&gt;</code>类型）然后返回实例对象。</p><p>所以我们可以看到<code>ServiceLoader</code>不是实例化以后，就去读取配置文件中的具体实现，并进行实例化。而是等到使用迭代器去遍历的时候，才会加载对应的配置文件去解析，调用<code>hasNext</code>方法的时候会去加载配置文件进行解析，调用<code>next</code>方法的时候进行实例化并缓存。</p><p>所有的配置文件只会加载一次，服务提供者也只会被实例化一次，重新加载配置文件可使用<code>reload</code>方法。</p><h2 id="spi机制的缺陷" tabindex="-1"><a class="header-anchor" href="#spi机制的缺陷"><span>SPI机制的缺陷</span></a></h2><p>通过上面的解析，可以发现，我们使用SPI机制的缺陷：</p><ul><li>不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li><li>获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。</li><li>多个并发多线程使用 ServiceLoader 类的实例是不安全的。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><ul><li>https://cxis.me/2017/04/17/Java%E4%B8%ADSPI%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</li><li>https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top</li><li>https://zhuanlan.zhihu.com/p/28909673</li><li>http://blog.itpub.net/69912579/viewspace-2656555/</li><li>https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html</li><li>https://blog.csdn.net/sakurainluojia/article/details/53534949</li><li>https://www.jianshu.com/p/0d196ad23915</li></ul>`,14))])}const qs=c(d,[["render",ws],["__file","base08.html.vue"]]),xs=JSON.parse('{"path":"/blogs/docs/Java/base/base08.html","title":"Java基础","lang":"en-US","frontmatter":{"title":"Java基础","date":"2024/09/28","tags":["Java"],"categories":["Java"],"hideComments":false},"headers":[{"level":3,"title":"来自作者的说明","slug":"来自作者的说明","link":"#来自作者的说明","children":[]},{"level":3,"title":"基础理解","slug":"基础理解","link":"#基础理解","children":[]},{"level":3,"title":"Bad Practice","slug":"bad-practice","link":"#bad-practice","children":[]},{"level":3,"title":"Best and Pragmatic Practice","slug":"best-and-pragmatic-practice","link":"#best-and-pragmatic-practice","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"01、没有 Optional 会有什么问题","slug":"_01、没有-optional-会有什么问题","link":"#_01、没有-optional-会有什么问题","children":[]},{"level":3,"title":"02、Optional 是如何解决这个问题的","slug":"_02、optional-是如何解决这个问题的","link":"#_02、optional-是如何解决这个问题的","children":[]},{"level":3,"title":"03、创建 Optional 对象","slug":"_03、创建-optional-对象","link":"#_03、创建-optional-对象","children":[]},{"level":3,"title":"04、判断值是否存在","slug":"_04、判断值是否存在","link":"#_04、判断值是否存在","children":[]},{"level":3,"title":"05、非空表达式","slug":"_05、非空表达式","link":"#_05、非空表达式","children":[]},{"level":3,"title":"06、设置（获取）默认值","slug":"_06、设置-获取-默认值","link":"#_06、设置-获取-默认值","children":[]},{"level":3,"title":"07、获取值","slug":"_07、获取值","link":"#_07、获取值","children":[]},{"level":3,"title":"08、过滤值","slug":"_08、过滤值","link":"#_08、过滤值","children":[]},{"level":3,"title":"09、转换值","slug":"_09、转换值","link":"#_09、转换值","children":[]},{"level":2,"title":"SPI机制 - JDBC DriverManager","slug":"spi机制-jdbc-drivermanager","link":"#spi机制-jdbc-drivermanager","children":[{"level":3,"title":"# JDBC接口定义","slug":"jdbc接口定义","link":"#jdbc接口定义","children":[]},{"level":3,"title":"# mysql实现","slug":"mysql实现","link":"#mysql实现","children":[]},{"level":3,"title":"# postgresql实现","slug":"postgresql实现","link":"#postgresql实现","children":[]},{"level":3,"title":"# 使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":3,"title":"# 源码实现","slug":"源码实现","link":"#源码实现","children":[]}]},{"level":2,"title":"SPI机制 - Common-Logging","slug":"spi机制-common-logging","link":"#spi机制-common-logging","children":[]},{"level":2,"title":"SPI机制 - 插件体系","slug":"spi机制-插件体系","link":"#spi机制-插件体系","children":[]},{"level":2,"title":"SPI机制 - Spring中SPI机制","slug":"spi机制-spring中spi机制","link":"#spi机制-spring中spi机制","children":[]},{"level":2,"title":"SPI机制通常怎么使用","slug":"spi机制通常怎么使用","link":"#spi机制通常怎么使用","children":[{"level":3,"title":"# 定义标准","slug":"定义标准","link":"#定义标准","children":[]},{"level":3,"title":"# 具体厂商或者框架开发者实现","slug":"具体厂商或者框架开发者实现","link":"#具体厂商或者框架开发者实现","children":[]},{"level":3,"title":"# 程序猿使用","slug":"程序猿使用","link":"#程序猿使用","children":[]},{"level":3,"title":"# 使用规范","slug":"使用规范","link":"#使用规范","children":[]}]},{"level":2,"title":"# SPI和API的区别是什么","slug":"spi和api的区别是什么","link":"#spi和api的区别是什么","children":[]},{"level":2,"title":"SPI机制实现原理","slug":"spi机制实现原理","link":"#spi机制实现原理","children":[]},{"level":2,"title":"SPI机制的缺陷","slug":"spi机制的缺陷","link":"#spi机制的缺陷","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1727709468000,"updatedTime":1727967809000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":1}]},"filePathRelative":"blogs/docs/Java/base/base08.md"}');export{qs as comp,xs as data};
