import{_ as r,c as i,a as o,b as e,e as n,w as a,d as t,r as d,o as p}from"./app-BOT5Rvzn.js";const u={},b={id:"java-有没有-goto",tabindex:"-1"},g={class:"header-anchor",href:"#java-有没有-goto"},y={id:"final-有什么用",tabindex:"-1"},f={class:"header-anchor",href:"#final-有什么用"},v={id:"final-finally-finalize区别",tabindex:"-1"},m={class:"header-anchor",href:"#final-finally-finalize区别"},k={id:"this关键字的用法",tabindex:"-1"},x={class:"header-anchor",href:"#this关键字的用法"},c={id:"super关键字的用法",tabindex:"-1"},j={class:"header-anchor",href:"#super关键字的用法"},S={id:"this与super的区别",tabindex:"-1"},q={class:"header-anchor",href:"#this与super的区别"},w={id:"super-和this-类似",tabindex:"-1"},J={class:"header-anchor",href:"#super-和this-类似"},F={id:"static存在的主要意义",tabindex:"-1"},O={class:"header-anchor",href:"#static存在的主要意义"},E={id:"static应用场景",tabindex:"-1"},T={class:"header-anchor",href:"#static应用场景"},I={id:"static注意事项",tabindex:"-1"},z={class:"header-anchor",href:"#static注意事项"},A={id:"_3-数据溢出",tabindex:"-1"},P={class:"header-anchor",href:"#_3-数据溢出"},C={id:"各种录入方式",tabindex:"-1"},U={class:"header-anchor",href:"#各种录入方式"},D={id:"_8-输出",tabindex:"-1"},M={class:"header-anchor",href:"#_8-输出"},V={id:"格式化输出",tabindex:"-1"},L={class:"header-anchor",href:"#格式化输出"},N={id:"除法",tabindex:"-1"},B={class:"header-anchor",href:"#除法"},H={id:"取余-or-取模",tabindex:"-1"},Z={class:"header-anchor",href:"#取余-or-取模"},R={id:"应用-数值拆分",tabindex:"-1"},W={class:"header-anchor",href:"#应用-数值拆分"},K={id:"隐式转换-自动类型提升",tabindex:"-1"},X={class:"header-anchor",href:"#隐式转换-自动类型提升"},Y={id:"含义",tabindex:"-1"},G={class:"header-anchor",href:"#含义"},$={id:"两种提升规则",tabindex:"-1"},Q={class:"header-anchor",href:"#两种提升规则"},_={id:"取值范围从小到大的关系",tabindex:"-1"},h={class:"header-anchor",href:"#取值范围从小到大的关系"},ss={id:"注意点",tabindex:"-1"},ls={class:"header-anchor",href:"#注意点"},ns={id:"案例二",tabindex:"-1"},ts={class:"header-anchor",href:"#案例二"},as={id:"强制转换",tabindex:"-1"},es={class:"header-anchor",href:"#强制转换"},os={id:"概念",tabindex:"-1"},rs={class:"header-anchor",href:"#概念"},is={id:"书写格式",tabindex:"-1"},ds={class:"header-anchor",href:"#书写格式"},ps={id:"注意点-1",tabindex:"-1"},us={class:"header-anchor",href:"#注意点-1"},bs={id:"字符串的-操作",tabindex:"-1"},gs={class:"header-anchor",href:"#字符串的-操作"},ys={id:"核心操作",tabindex:"-1"},fs={class:"header-anchor",href:"#核心操作"},vs={id:"练习题",tabindex:"-1"},ms={class:"header-anchor",href:"#练习题"},ks={id:"案例1",tabindex:"-1"},xs={class:"header-anchor",href:"#案例1"},cs={id:"案例2",tabindex:"-1"},js={class:"header-anchor",href:"#案例2"},Ss={id:"案例3",tabindex:"-1"},qs={class:"header-anchor",href:"#案例3"},ws={id:"字符相加",tabindex:"-1"},Js={class:"header-anchor",href:"#字符相加"},Fs={id:"✨规则",tabindex:"-1"},Os={class:"header-anchor",href:"#✨规则"},Es={id:"案例",tabindex:"-1"},Ts={class:"header-anchor",href:"#案例"},Is={id:"练习题-1",tabindex:"-1"},zs={class:"header-anchor",href:"#练习题-1"},As={id:"总结-字符串只能进行加操作",tabindex:"-1"},Ps={class:"header-anchor",href:"#总结-字符串只能进行加操作"},Cs={id:"自增自减运算",tabindex:"-1"},Us={class:"header-anchor",href:"#自增自减运算"},Ds={id:"分类",tabindex:"-1"},Ms={class:"header-anchor",href:"#分类"},Vs={id:"使用方式",tabindex:"-1"},Ls={class:"header-anchor",href:"#使用方式"},Ns={id:"注意点-2",tabindex:"-1"},Bs={class:"header-anchor",href:"#注意点-2"},Hs={id:"案例-1",tabindex:"-1"},Zs={class:"header-anchor",href:"#案例-1"},Rs={id:"自增自减运算符的应用场景",tabindex:"-1"},Ws={class:"header-anchor",href:"#自增自减运算符的应用场景"},Ks={id:"赋值运算符",tabindex:"-1"},Xs={class:"header-anchor",href:"#赋值运算符"},Ys={id:"扩展赋值运算符",tabindex:"-1"},Gs={class:"header-anchor",href:"#扩展赋值运算符"},$s={id:"分类-1",tabindex:"-1"},Qs={class:"header-anchor",href:"#分类-1"},_s={id:"运算规则",tabindex:"-1"},hs={class:"header-anchor",href:"#运算规则"},sl={id:"案例-2",tabindex:"-1"},ll={class:"header-anchor",href:"#案例-2"},nl={id:"注意点-扩展的赋值运算符中底层还包含了一个强制转换-。",tabindex:"-1"},tl={class:"header-anchor",href:"#注意点-扩展的赋值运算符中底层还包含了一个强制转换-。"},al={id:"关系运算符",tabindex:"-1"},el={class:"header-anchor",href:"#关系运算符"},ol={id:"分类-2",tabindex:"-1"},rl={class:"header-anchor",href:"#分类-2"},il={style:{"text-align":"left"}},dl={style:{"text-align":"left"}},pl={style:{"text-align":"left"}},ul={style:{"text-align":"left"}},bl={style:{"text-align":"left"}},gl={style:{"text-align":"left"}},yl={style:{"text-align":"left"}},fl={style:{"text-align":"left"}},vl={style:{"text-align":"left"}},ml={style:{"text-align":"left"}},kl={style:{"text-align":"left"}},xl={style:{"text-align":"left"}},cl={style:{"text-align":"left"}},jl={style:{"text-align":"left"}},Sl={id:"注意点-3",tabindex:"-1"},ql={class:"header-anchor",href:"#注意点-3"},wl={id:"逻辑运算符",tabindex:"-1"},Jl={class:"header-anchor",href:"#逻辑运算符"},Fl={id:"和-的使用",tabindex:"-1"},Ol={class:"header-anchor",href:"#和-的使用"},El={id:"使用场景",tabindex:"-1"},Tl={class:"header-anchor",href:"#使用场景"},Il={id:"异或-的使用",tabindex:"-1"},zl={class:"header-anchor",href:"#异或-的使用"},Al={id:"_6-4-取反-的使用",tabindex:"-1"},Pl={class:"header-anchor",href:"#_6-4-取反-的使用"},Cl={id:"短路逻辑运算符",tabindex:"-1"},Ul={class:"header-anchor",href:"#短路逻辑运算符"},Dl={id:"-1",tabindex:"-1"},Ml={class:"header-anchor",href:"#-1"},Vl={id:"-2",tabindex:"-1"},Ll={class:"header-anchor",href:"#-2"},Nl={id:"逻辑核心",tabindex:"-1"},Bl={class:"header-anchor",href:"#逻辑核心"},Hl={id:"举例",tabindex:"-1"},Zl={class:"header-anchor",href:"#举例"},Rl={id:"总结",tabindex:"-1"},Wl={class:"header-anchor",href:"#总结"},Kl={id:"建议",tabindex:"-1"},Xl={class:"header-anchor",href:"#建议"},Yl={id:"三元运算符",tabindex:"-1"},Gl={class:"header-anchor",href:"#三元运算符"},$l={id:"格式",tabindex:"-1"},Ql={class:"header-anchor",href:"#格式"},_l={id:"计算规则",tabindex:"-1"},hl={class:"header-anchor",href:"#计算规则"},sn={id:"注意点-4",tabindex:"-1"},ln={class:"header-anchor",href:"#注意点-4"},nn={id:"案例-3",tabindex:"-1"},tn={class:"header-anchor",href:"#案例-3"},an={id:"_9-运算符的优先级",tabindex:"-1"},en={class:"header-anchor",href:"#_9-运算符的优先级"},on={id:"原码-补码-反码",tabindex:"-1"},rn={class:"header-anchor",href:"#原码-补码-反码"},dn={id:"一个字节-8个bit-字节",tabindex:"-1"},pn={class:"header-anchor",href:"#一个字节-8个bit-字节"},un={id:"原码",tabindex:"-1"},bn={class:"header-anchor",href:"#原码"},gn={id:"反码出现的目的",tabindex:"-1"},yn={class:"header-anchor",href:"#反码出现的目的"},fn={id:"补码出现的目的",tabindex:"-1"},vn={class:"header-anchor",href:"#补码出现的目的"},mn={id:"逻辑与",tabindex:"-1"},kn={class:"header-anchor",href:"#逻辑与"},xn={id:"逻辑或",tabindex:"-1"},cn={class:"header-anchor",href:"#逻辑或"},jn={id:"右移-正数补零-负数补一",tabindex:"-1"},Sn={class:"header-anchor",href:"#右移-正数补零-负数补一"},qn={id:"无符号右移",tabindex:"-1"},wn={class:"header-anchor",href:"#无符号右移"};function Jn(Fn,s){const l=d("font");return p(),i("div",null,[s[577]||(s[577]=o(`<h2 id="_1-注释-comment" tabindex="-1"><a class="header-anchor" href="#_1-注释-comment"><span>1 注释(comment)</span></a></h2><p>用于注解说明解释程序的文字（在程序指定位置添加的说明性文字），注释提高了代码的阅读性</p><p>简单的理解，就是对代码的一种解释，方便自已和他人阅读</p><h3 id="_1-1-单行注释" tabindex="-1"><a class="header-anchor" href="#_1-1-单行注释"><span>1.1 单行注释</span></a></h3><p>基本格式：<code>// 注释信息</code></p><p>使用细节</p><ul><li>被注释的文字不会被JVM解释执行</li></ul><h3 id="_1-2-多行注释" tabindex="-1"><a class="header-anchor" href="#_1-2-多行注释"><span>1.2 多行注释</span></a></h3><blockquote><p>/* 注释信息 */</p></blockquote><p>使用细节</p><ul><li>被注释的文字不会被JVM解释执行</li><li>多行注释里面不允许有多行注释嵌套</li></ul><p>不能嵌套运行</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">/*  wode  /*  nide mingzi */</span>   <span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-3-文档注释" tabindex="-1"><a class="header-anchor" href="#_1-3-文档注释"><span>1.3 文档注释</span></a></h3><p>格式<code> /**  注释信息*/</code></p><p>注释内容可以被 JDK 提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档，一般写在类</p><ul><li>基本格式</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">  * <span class="token keyword">@author</span> gzc</span>
<span class="line">  * <span class="token keyword">@version</span> 1.0</span>
<span class="line">  */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如何生成对应的文档注释</li><li>应用实例</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line">javadoc <span class="token operator">-</span>d 文件夹名 <span class="token operator">-</span>xx <span class="token operator">-</span>yy <span class="token punctuation">[</span><span class="token operator">-</span>encoding utf<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token class-name">Demo3</span><span class="token punctuation">.</span>java</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1708524466101-0bdafbdd-dc6e-489a-a268-782694d7e014.png"><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1708524480172-dd151761-c46d-4bc8-864c-bee83500a4df.png"><p>乱码的，还要在dos命令加上-encoding utf-8</p><ul><li>javadoc标签</li></ul><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1708524538418-de9e78c4-3071-4b88-8a81-713b3bca047e.png"><p>注释不会影响代码运行结果</p><p>例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> knowledge <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//叫做main方法，表示程序的主入口</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token doc-comment comment">/**叫做输出语句（打印语句）</span>
<span class="line">		  *会把小括里面的内容进行输出打印</span>
<span class="line">		  */</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java代码规范</p><p>1.类、方法的注释，要以 javadoc 的方式来写。</p><p>2.非 Java D6c 的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，如何修改，注意什么问题等</p><p>3.使用tab操作，实现缩进，默认整体向右边移动，时候用shift+tab整体向左移</p><p>4.运算符和=两边习惯性各加一个空格。比如：2+4*5+345-89</p><p>5.源文件使用utf-8编码</p><p>6.行宽度不要超过80字符</p><p>7.代码编写次行风格和行尾风格</p><h2 id="_2-关键字" tabindex="-1"><a class="header-anchor" href="#_2-关键字"><span>2 关键字</span></a></h2><h3 id="_2-1-含义" tabindex="-1"><a class="header-anchor" href="#_2-1-含义"><span>2.1 含义</span></a></h3><pre><code>被 java **赋予了特定含义**的**英文单词**。
</code></pre><h3 id="_2-2-特点" tabindex="-1"><a class="header-anchor" href="#_2-2-特点"><span>2.2 特点</span></a></h3><ul><li>1.关键字的字母<strong>全部小写</strong>。</li><li>2.常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。</li></ul><h3 id="_2-3-常见的关键字" tabindex="-1"><a class="header-anchor" href="#_2-3-常见的关键字"><span>2.3 常见的关键字</span></a></h3><h4 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>class</span></a></h4><p>用于（创建/定义）<strong>一个类是Java最基本的组成单元</strong>。</p>`,44)),e("h4",b,[e("a",g,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[0]||(s[0]=[t("Java 有没有 goto ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[1]||(s[1]=[t("goto ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[2]||(s[2]=[t("是")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[3]||(s[3]=[t(" Java ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[4]||(s[4]=[t("中的保留字，在目前版本的")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[5]||(s[5]=[t(" Java ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[6]||(s[6]=[t("中没有使用。 ")])),_:1}),e("h4",y,[e("a",f,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[7]||(s[7]=[t("final 有什么用？ ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[8]||(s[8]=[t("用于修饰类、属性和方法； ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[9]||(s[9]=[t("被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[10]||(s[10]=[t("final")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[11]||(s[11]=[t("修饰的类不可以被继承 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[12]||(s[12]=[t("被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[13]||(s[13]=[t("final")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[14]||(s[14]=[t("修饰的方法不可以被重写 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[15]||(s[15]=[t("被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[16]||(s[16]=[t("final")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[17]||(s[17]=[t("修饰的变量不可以被改变，被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[18]||(s[18]=[t("final")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[19]||(s[19]=[t("修饰不可变的是变量的引用，而不是引用指向的内容，引 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[20]||(s[20]=[t("用指向的内容是可以改变的 ")])),_:1}),e("h4",v,[e("a",m,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[21]||(s[21]=[t("final finally finalize区别 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[22]||(s[22]=[t("final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修 饰变量表示该变量是一个常量不能被重新赋值。 finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[23]||(s[23]=[t("finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代 码。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[24]||(s[24]=[t("finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾 回收器来调用，当我们调用System.gc() 方法的时候，由垃圾回收器调用finalize()，回收垃圾，一 个对象是否可回收的最后判断。 ")])),_:1}),e("h4",k,[e("a",x,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[25]||(s[25]=[t("this关键字的用法 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[26]||(s[26]=[t("this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指 针。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[27]||(s[27]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[28]||(s[28]=[t("的用法在")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[29]||(s[29]=[t("java")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[30]||(s[30]=[t("中大体可以分为")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[31]||(s[31]=[t("3")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[32]||(s[32]=[t("种： ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[33]||(s[33]=[t("1.")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[34]||(s[34]=[t("普通的直接引用，")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[35]||(s[35]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[36]||(s[36]=[t("相当于是指向当前对象本身。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[37]||(s[37]=[t("2.形参与成员名字重名，用this来区分： ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[38]||(s[38]=[t("3.")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[39]||(s[39]=[t("引用本类的构造函数 ")])),_:1}),s[578]||(s[578]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">String name<span class="token punctuation">,</span> int age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">private</span> String name<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">private</span> int age<span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">String name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}})])]),e("h4",c,[e("a",j,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[40]||(s[40]=[t("super关键字的用法 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[41]||(s[41]=[t("super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[42]||(s[42]=[t("super")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[43]||(s[43]=[t("也有三种用法： ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[44]||(s[44]=[t("1.普通的直接引用 ：与this类似，super相当于是指向当前对象的父类的引用，这样就可以用 super.xxx来引用父类的成员。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[45]||(s[45]=[t("2.子类中的成员变量或方法与父类中的成员变量或方法同名时，用super进行区分 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[46]||(s[46]=[t("3.")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[47]||(s[47]=[t("引用父类构造函数 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[48]||(s[48]=[t("super")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[49]||(s[49]=[t("（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[50]||(s[50]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[51]||(s[51]=[t("（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。 ")])),_:1}),e("h5",S,[e("a",q,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[52]||(s[52]=[t("this与super的区别 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[53]||(s[53]=[t("super: ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[54]||(s[54]=[t("它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[55]||(s[55]=[t("数，基类与派生类中有相同成员定义时如：")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[56]||(s[56]=[t("super.")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[57]||(s[57]=[t("变量名")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[58]||(s[58]=[t(" super.")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[59]||(s[59]=[t("成员函数据名（实参） ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[60]||(s[60]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[61]||(s[61]=[t("：它代表当前对象名（在程序中易产生二义性之处，应使用")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[62]||(s[62]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[63]||(s[63]=[t("来指明当前对象；如果函数的 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[64]||(s[64]=[t("形参与类中的成员数据同名，这时需用")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[65]||(s[65]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[66]||(s[66]=[t("来指明成员变量名） ")])),_:1}),e("h5",w,[e("a",J,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[67]||(s[67]=[t("super()和this()类似")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[68]||(s[68]=[t("区别是，super()在子类中调用父类的构造方法，this()在本类内调用本类的其它构造方法。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[69]||(s[69]=[t("super()")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[70]||(s[70]=[t("和")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[71]||(s[71]=[t("this()")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[72]||(s[72]=[t("均需放在构造方法内第一行。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[73]||(s[73]=[t("尽管可以用")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[74]||(s[74]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[75]||(s[75]=[t("调用一个构造器，但却不能调用两个。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[76]||(s[76]=[t("this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也会通过。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[77]||(s[77]=[t("this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量,static方法，static语句块。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[78]||(s[78]=[t("从本质上讲，")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[79]||(s[79]=[t("this")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[80]||(s[80]=[t("是一个指向本对象的指针")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[81]||(s[81]=[t(", ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[82]||(s[82]=[t("然而")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[83]||(s[83]=[t("super")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[84]||(s[84]=[t("是一个")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[85]||(s[85]=[t("Java")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[86]||(s[86]=[t("关键字。 ")])),_:1}),e("h5",F,[e("a",O,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[87]||(s[87]=[t("static存在的主要意义 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[88]||(s[88]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[89]||(s[89]=[t("的主要意义是在于创建独立于具体对象的域变量或者方法。以致于即使没有创建对象，也能使用属 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[90]||(s[90]=[t("性和调用方法！ ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[91]||(s[91]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[92]||(s[92]=[t("关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[93]||(s[93]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[94]||(s[94]=[t("块可以置于类中 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[95]||(s[95]=[t("的任何地方，类中可以有多个")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[96]||(s[96]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[97]||(s[97]=[t("块。在类初次被加载的时候，会按照")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[98]||(s[98]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[99]||(s[99]=[t("块的顺序来执行每个")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[100]||(s[100]=[t("static ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[101]||(s[101]=[t("块，并且只会执行一次。为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[102]||(s[102]=[t("执行一次。因此，很多时候会将一些只需要进行一次的初始化操作都放在")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[103]||(s[103]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[104]||(s[104]=[t("代码块中进行。 ")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[105]||(s[105]=[t("static")])),_:1}),s[107]||(s[107]=t("****")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[106]||(s[106]=[t("的独特之处 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[108]||(s[108]=[t("1")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[109]||(s[109]=[t("、被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[110]||(s[110]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[111]||(s[111]=[t("修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[112]||(s[112]=[t("实例对象，而是被类的实例对象所共享。 ")])),_:1}),e("blockquote",null,[n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[113]||(s[113]=[t("怎么理解 “被类的实例对象所共享” 这句话呢？就是说，一个类的静态成员，它是属于大伙的【大伙指的是这个类的多个对象实例，我们都知道一个类可以创建多个实例！】，所有的类对象共享的，不像成员变量是自个的【自个指的是这个类的单个实例对象】…我觉得我已经讲的很通俗了，你明白了咩？ ")])),_:1})]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[114]||(s[114]=[t("2")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[115]||(s[115]=[t("、在该类被第一次加载的时候，就会去加载被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[116]||(s[116]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[117]||(s[117]=[t("修饰的部分，而且只在类第一次使用时加载并进行 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[118]||(s[118]=[t("初始化，注意这是第一次用就要初始化，后面根据需要是可以再次赋值的。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[119]||(s[119]=[t("3")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[120]||(s[120]=[t("、")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[121]||(s[121]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[122]||(s[122]=[t("变量值在类加载的时候分配空间，以后创建类对象的时候不会重新分配。赋值的话，是可以任 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[123]||(s[123]=[t("意赋值的！ ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[124]||(s[124]=[t("4")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[125]||(s[125]=[t("、被")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[126]||(s[126]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[127]||(s[127]=[t("修饰的变量或者方法是优先于对象存在的，也就是说当一个类加载完毕之后，即便没有创建 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[128]||(s[128]=[t("对象，也可以去访问。 ")])),_:1}),e("h5",E,[e("a",T,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[129]||(s[129]=[t("static应用场景 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[130]||(s[130]=[t("因为")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[131]||(s[131]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[132]||(s[132]=[t("是被类的实例对象所共享，因此如果某个成员变量是被所有对象所共享的，那么这个成员变量 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[133]||(s[133]=[t("就应该定义为静态变量。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[134]||(s[134]=[t("因此比较常见的")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[135]||(s[135]=[t("static")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[136]||(s[136]=[t("应用场景有：")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[137]||(s[137]=[t("1、修饰成员变量 ")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[138]||(s[138]=[t("2")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[139]||(s[139]=[t("、修饰成员方法 ")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[140]||(s[140]=[t("3")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[141]||(s[141]=[t("、静态代码块 ")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[142]||(s[142]=[t("4")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[143]||(s[143]=[t("、修饰类【只能修饰内部类也就是静态内部类】 ")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[144]||(s[144]=[t("5")])),_:1}),n(l,{style:{color:"rgb(119,119,119)"}},{default:a(()=>s[145]||(s[145]=[t("、静态导包 ")])),_:1}),e("h5",I,[e("a",z,[e("span",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[146]||(s[146]=[t("static注意事项 ")])),_:1})])])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[147]||(s[147]=[t("1、静态只能访问静态。 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[148]||(s[148]=[t("2、非静态既可以访问非静态的，也可以访问静态的。")])),_:1}),s[579]||(s[579]=o(`<h2 id="_3-字面量" tabindex="-1"><a class="header-anchor" href="#_3-字面量"><span>3 字面量</span></a></h2><h3 id="_3-1-含义" tabindex="-1"><a class="header-anchor" href="#_3-1-含义"><span>3.1 含义</span></a></h3><pre><code>告诉数据在程序中的书写格式 。（就是数值或符号）
</code></pre><h3 id="_3-2-字面量的分类" tabindex="-1"><a class="header-anchor" href="#_3-2-字面量的分类"><span>3.2 字面量的分类</span></a></h3><table><thead><tr><th style="text-align:left;">字面量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td style="text-align:left;">整数类型</td><td>不带小数的数字</td><td>666，-8</td></tr><tr><td style="text-align:left;">小数类型</td><td>带小数点的数字</td><td>13.2，-9.0</td></tr><tr><td style="text-align:left;">字符串类型</td><td>用双引号括起来的内容</td><td>&quot;黑哦了 hello&quot;</td></tr><tr><td style="text-align:left;">字符类型</td><td>单引号括起来，内容只有一个</td><td>&#39;h&#39;，&#39;我&#39;</td></tr><tr><td style="text-align:left;">布尔类型</td><td>布尔值，表示真假</td><td>只有两个值：true false</td></tr><tr><td style="text-align:left;">空类型</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table><p>注意：</p><p>1.null不能直接打印，如果我们打印null ，只能用字符串输出</p><p>2.true false 是关键字，输出直接输出 true 和 false</p><h3 id="_3-3-特殊字符的字面量" tabindex="-1"><a class="header-anchor" href="#_3-3-特殊字符的字面量"><span>3.3 特殊字符的字面量</span></a></h3><blockquote><ol><li>\\t 在打印的时候，把前面的字符串的长度补齐到八，<strong>或者 8 的整数倍</strong>，最少补一个空格最多补八个空格</li></ol></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//\\t 制表符 目的：熟悉制表符基本用法</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token operator">+</span> <span class="token char">&#39;\\t&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>null</li></ol><h3 id="_3-4-字面量的默认值" tabindex="-1"><a class="header-anchor" href="#_3-4-字面量的默认值"><span>3.4 字面量的默认值</span></a></h3><p>Java程序中，任何变量必须初始化后才能使用。</p><table><thead><tr><th>数据类型</th><th>初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>char</td><td>&#39;u0000’（null）</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>所有引用类型</td><td>null</td></tr></tbody></table><p>但并不是所有的未初始化的变量都会有默认值。</p><h2 id="_4-变量" tabindex="-1"><a class="header-anchor" href="#_4-变量"><span>4 变量</span></a></h2><p>变量是程序的基本组成单位</p><p>变量相当内存中一个数据的存储空间的表示</p><h3 id="_4-1-变量的定义格式" tabindex="-1"><a class="header-anchor" href="#_4-1-变量的定义格式"><span>4.1 变量的定义格式</span></a></h3><p><em><strong><u>数据类型 变量名 = 数据值；</u></strong></em></p><p>数据类型：空间中储存的数据，加入类型限制：整数或小数......</p><p>变量名：为空间起的名字。</p><p>数据值：存在空间里面的数值。</p><p>数据类型：限定了变量当中能存储什么类型的数据。</p><pre><code>- 如果要存10，那么数据类型就需要写整数类型。
- 如果要存10.0，那么数据类型就需要写小数类型。
</code></pre><p>变量名：其实就是这个容器的名字。</p><pre><code>- 当以后想要使用变量里面的数据时，直接使用变量名就可以了。
</code></pre><p>数据值：真正存储在容器中的数据。</p><p>分号：表示语句的结束，就跟以前写作文时候的句号是一样的。</p><h3 id="_4-2-注意点" tabindex="-1"><a class="header-anchor" href="#_4-2-注意点"><span>4.2 <strong>注意点</strong></span></a></h3><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li><strong>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</strong></li><li><strong>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以</strong>）</li></ul><h2 id="_5-数据类型-与变量定义公式中数据类型相关" tabindex="-1"><a class="header-anchor" href="#_5-数据类型-与变量定义公式中数据类型相关"><span>5 数据类型 （与变量定义公式中数据类型相关）</span></a></h2>`,33)),e("p",null,[s[152]||(s[152]=t("定义：")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[149]||(s[149]=[t("Java 语言是")])),_:1}),e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[150]||(s[150]=[t("强类型语言")])),_:1})]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[151]||(s[151]=[t("，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同 大小的内存空间")])),_:1})]),s[580]||(s[580]=o(`<h3 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型"><span>1.基本数据类型</span></a></h3><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">关键字</th><th style="text-align:center;">内存占用/字节</th><th style="text-align:center;">取值范围</th></tr></thead><tbody><tr><td style="text-align:center;">整数</td><td style="text-align:center;">byte</td><td style="text-align:center;">1</td><td style="text-align:center;">负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">short</td><td style="text-align:center;">2</td><td style="text-align:center;">负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">int（默认）</td><td style="text-align:center;">4</td><td style="text-align:center;">负的2的31次方 ~ 2的31次方-1</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">long</td><td style="text-align:center;">8</td><td style="text-align:center;">负的2的63次方 ~ 2的63次方-1</td></tr><tr><td style="text-align:center;">浮点数</td><td style="text-align:center;">float</td><td style="text-align:center;">4</td><td style="text-align:center;">1.401298e-45 ~ 3.402823e+38</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">double（默认）</td><td style="text-align:center;">8</td><td style="text-align:center;">4.9000000e-324 ~ 1.797693e+308</td></tr><tr><td style="text-align:center;">字符</td><td style="text-align:center;">char</td><td style="text-align:center;">2</td><td style="text-align:center;">0-65535</td></tr><tr><td style="text-align:center;">布尔</td><td style="text-align:center;">boolean</td><td style="text-align:center;">1</td><td style="text-align:center;">true，false</td></tr></tbody></table><p><strong>说明：</strong></p><pre><code>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。

在java中整数默认是int类型，浮点数默认是double类型。
</code></pre>`,4)),e("p",null,[s[157]||(s[157]=t("**")),n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[153]||(s[153]=[t("char 采用 ")])),_:1}),s[158]||(s[158]=t("****Unicode **")),e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[154]||(s[154]=[t("字符集，")])),_:1}),s[156]||(s[156]=e("strong",null,[e("strong",null,"又称统一码字符集，它可以支持多种语言")],-1)),n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[155]||(s[155]=[t("。")])),_:1})])]),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[159]||(s[159]=[t("JVM按 utf-16 格式分配char 内存。输出时，采用 OS 默认编码，占两个字节")])),_:1})])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[160]||(s[160]=[t(`字符字面量可以表示为 "\\uxxxx" 形式的 Unicode 转义序列。这里，\\u 表示 Unicode 转义序列的开始，xxxx正好表示四个十六进制数字。由Xx表示的值是字符的Unicode值。字符'A'有6565十进制可以用十六进制表示为41的值的Unicode值。因此，字符'A'可以用Unicode转义序列表示为1u0041'.以下代码将相同的字符"A”分配给char变量c1和c2: `)])),_:1}),s[581]||(s[581]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">char c1  = &quot;A&quot;;</span>
<span class="line">char c2  = &quot;\\u0041&quot;; // Same as  c2  = &quot;A&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[161]||(s[161]=[t("switch 是否能作用在 byte 上，是否能作用在 long 上，是否 能作用在 String 上 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[162]||(s[162]=[t("在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java5 开始，Java 中引入 了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[163]||(s[163]=[t("用最有效率的方法计算")])),_:1}),e("strong",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[164]||(s[164]=[t(" 2 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[165]||(s[165]=[t("乘以")])),_:1}),s[167]||(s[167]=t("****")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[166]||(s[166]=[t(" 8 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[168]||(s[168]=[t("2 << 3")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[169]||(s[169]=[t("（左移")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[170]||(s[170]=[t(" 3 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[171]||(s[171]=[t("位相当于乘以")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[172]||(s[172]=[t(" 2 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[173]||(s[173]=[t("的")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[174]||(s[174]=[t(" 3 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[175]||(s[175]=[t("次方，右移")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[176]||(s[176]=[t(" 3 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[177]||(s[177]=[t("位相当于除以")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[178]||(s[178]=[t(" 2 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[179]||(s[179]=[t("的")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[180]||(s[180]=[t(" 3 ")])),_:1}),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[181]||(s[181]=[t("次 方）。 ")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[182]||(s[182]=[t("Math.round(11.5) ")])),_:1}),e("strong",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[183]||(s[183]=[t("等于多少？")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[184]||(s[184]=[t("Math.round(-11.5) ")])),_:1}),s[186]||(s[186]=t("****")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[185]||(s[185]=[t("等于多少 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[187]||(s[187]=[t("Math.round(11.5)的返回值是 12，Math.round(-11.5)的返回值是-11。")])),_:1}),s[582]||(s[582]=t("**")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[188]||(s[188]=[t("四舍五入的原理是在参数上加 0.5 然后进行下取整")])),_:1}),s[583]||(s[583]=t("**")),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[189]||(s[189]=[t("。 ")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[190]||(s[190]=[t("float f=3.4;是否正确 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[191]||(s[191]=[t("不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于 下转型（down-casting， 也称为窄化）会造成精度损失，因此需要强制类型转 换float f =(float)3.4; 或者写成 float f =3.4F;。 ")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[192]||(s[192]=[t("short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗 ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[193]||(s[193]=[t("对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int型，需要强制转换类型才 能赋值给 short 型。 而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short(s1 + 1);其中有隐含的强制类型转换。 ")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[194]||(s[194]=[t("编码")])),_:1}),e("strong",null,[e("strong",null,[n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[195]||(s[195]=[t("Java")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[196]||(s[196]=[t("语言采用何种编码方案？有何特点？ ")])),_:1})])]),n(l,{style:{color:"rgb(51,51,51)"}},{default:a(()=>s[197]||(s[197]=[t("Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一 个唯一的数值，因此在 任何的语言，平台，程序都可以放心的使用。")])),_:1}),s[584]||(s[584]=o(`<p><strong>需要记住的点：</strong></p><p>1.byte类型的取值范围：</p><pre><code>-128 ~ 127
</code></pre><p>2.int类型的大概取值范围：</p><pre><code>-21亿多  ~ 21亿多
</code></pre><p>3.整数类型和小数类型的取值范围大小关系：</p><pre><code>double &gt; float &gt; long &gt; int &gt; short &gt; byte
</code></pre><p>最为常用的数据类型选择：</p><ul><li>在定义变量的时候，要根据实际的情况来选择不同类型的变量。<br> 比如：人的年龄，可以选择 byte 类型。<br> 比如：地球的年龄，可以选择 long 类型。</li><li>如果整数类型中，不太确定范围，那么默认使用 int 类型。</li><li>如果小数类型中，不太确定范围，那么默认使用 double 类型。</li><li>如果要定义字符类型的变量，那么使用 char</li><li>如果要定义布尔类型的变量，那么使用 boolean</li></ul><p><strong>注意点</strong></p><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li><strong>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</strong></li><li><strong>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以</strong>）</li></ul><h3 id="_2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-引用数据类型"><span>2.引用数据类型</span></a></h3>`,12)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[198]||(s[198]=[t("class（class）")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[199]||(s[199]=[t("数组（[]）")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[200]||(s[200]=[t("接口（interface）")])),_:1}),e("h3",A,[e("a",P,[e("span",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[201]||(s[201]=[t("3 数据溢出")])),_:1})])])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[202]||(s[202]=[t(" 一个数据类型的最大值和最小值是一个循环，在最大值的基础上在扩大数据或者最小值的基础上再缩小数值，会跳到相反的值上面")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[203]||(s[203]=[t("注：")])),_:1})])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[204]||(s[204]=[t(" 1.int是基本数据类型，Integer是int的封装类，是引用类型。")])),_:1}),s[585]||(s[585]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[205]||(s[205]=[t("int默认值是0，而Integer默认值是null")])),_:1}),s[586]||(s[586]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[206]||(s[206]=[t("，所以Integer能区分出0和null的情况。一旦java看到null，就知道这个引用还没有指向某个对象，再任何引用使用前，必须为其指定一个对象，否则会报错。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[207]||(s[207]=[t(" 2.基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间，必须通过实例化开辟数据空间之后才可以赋值。数组对象也是一个引用对象，将一个数组赋值给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看的见。虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。")])),_:1}),s[587]||(s[587]=t("**")),n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[208]||(s[208]=[t("在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替")])),_:1}),s[588]||(s[588]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[209]||(s[209]=[t("，而")])),_:1}),s[589]||(s[589]=t("**")),n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[210]||(s[210]=[t("boolean数组在oracle虚拟机中，将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节")])),_:1}),s[590]||(s[590]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[211]||(s[211]=[t("，在数组中又是1个字节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的是32/64位系统，而是指CPU硬件层面），具有高效存取的特点")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[212]||(s[212]=[t("论调一。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[213]||(s[213]=[t("对于单独使用的 boolean 类型，JVM 并没有提供专用的字节码指令，而是使用 int 相关的指令 istore 来处理，那么 int 明确是 4 个字节，所以此时的 boolean 也占用 4 个字节。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[214]||(s[214]=[t("对于作为数组来使用的 boolean 类型，JVM 会按照 byte 的指令来处理（bastore），那么已知 byte 类型占用 1 个字节，所以此时的 boolean 也占用 1 个字节。")])),_:1}),s[591]||(s[591]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726659584241-3b95daa8-c910-4028-a875-79606440d951.png"},null,-1)),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[215]||(s[215]=[t("二哥的 Java 进阶之路：javap 验证")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[216]||(s[216]=[t("论调二，布尔具体占用的大小是不确定的，取决于 JVM 的具体实现。")])),_:1}),n(l,{style:{color:"rgb(102, 102, 102)"}},{default:a(()=>s[217]||(s[217]=[t(`boolean: The boolean data type has only two possible values: true and false. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its "size" isn't something that's precisely defined.`)])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[218]||(s[218]=[t("可以通过 JOL 工具打印出对象的内存布局，展示 boolean 单独使用和作为数组使用时在内存中的实际占用大小。")])),_:1}),s[592]||(s[592]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class BooleanSizeExample {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        boolean singleBoolean = true;</span>
<span class="line">        boolean[] booleanArray = new boolean[10];</span>
<span class="line">        </span>
<span class="line">        // 分析内存占用，可以使用第三方工具如 JOL（Java Object Layout）</span>
<span class="line">        System.out.println(&quot;Size of single boolean: &quot; + org.openjdk.jol.info.ClassLayout.parseInstance(singleBoolean).toPrintable());</span>
<span class="line">        System.out.println(&quot;Size of boolean array: &quot; + org.openjdk.jol.info.ClassLayout.parseInstance(booleanArray).toPrintable());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[219]||(s[219]=[t("运行结果如下（64 操作系统 JDK 8）：")])),_:1}),s[593]||(s[593]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Size of single boolean: java.lang.Boolean object internals:</span>
<span class="line"> OFFSET  SIZE      TYPE DESCRIPTION                               VALUE</span>
<span class="line">      0     4           (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span>
<span class="line">      4     4           (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span>
<span class="line">      8     4           (object header)                           dd 20 00 f8 (11011101 00100000 00000000 11111000) (-134209315)</span>
<span class="line">     12     1   boolean Boolean.value                             true</span>
<span class="line">     13     3           (loss due to the next object alignment)</span>
<span class="line">Instance size: 16 bytes</span>
<span class="line">Space losses: 0 bytes internal + 3 bytes external = 3 bytes total</span>
<span class="line"></span>
<span class="line">Size of boolean array: [Z object internals:</span>
<span class="line"> OFFSET  SIZE      TYPE DESCRIPTION                               VALUE</span>
<span class="line">      0     4           (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span>
<span class="line">      4     4           (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span>
<span class="line">      8     4           (object header)                           05 00 00 f8 (00000101 00000000 00000000 11111000) (-134217723)</span>
<span class="line">     12     4           (object header)                           0a 00 00 00 (00001010 00000000 00000000 00000000) (10)</span>
<span class="line">     16    10   boolean [Z.&lt;elements&gt;                             N/A</span>
<span class="line">     26     6           (loss due to the next object alignment)</span>
<span class="line">Instance size: 32 bytes</span>
<span class="line">Space losses: 0 bytes internal + 6 bytes external = 6 bytes total</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[220]||(s[220]=[t("对于单个 boolean 变量来说：")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[221]||(s[221]=[t("①、")])),_:1}),s[594]||(s[594]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[222]||(s[222]=[t("对象头（Object Header）")])),_:1}),s[595]||(s[595]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[223]||(s[223]=[t("占用了 12 个字节：")])),_:1}),e("ul",null,[e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[224]||(s[224]=[t("OFFSET 0 - 4")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[225]||(s[225]=[t("：对象头的一部分，包含对象的标记字段（Mark Word），用于存储对象的哈希码、GC 状态等。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[226]||(s[226]=[t("OFFSET 4 - 8")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[227]||(s[227]=[t("：对象头的另一部分，通常是指向类元数据的指针（Class Pointer）。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[228]||(s[228]=[t("OFFSET 8 - 12")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[229]||(s[229]=[t("：对象头的最后一部分，包含锁状态或其他信息。")])),_:1})])]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[230]||(s[230]=[t("②、实际的")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[596]||(s[596]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[231]||(s[231]=[t("boolean")])),_:1}),s[597]||(s[597]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[232]||(s[232]=[t("值占用 1 个字节，也就是")])),_:1}),s[598]||(s[598]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[233]||(s[233]=[t("OFFSET 12 - 13")])),_:1}),s[599]||(s[599]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[234]||(s[234]=[t("。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[235]||(s[235]=[t("③、为了满足 8 字节的对齐要求（HotSpot JVM 默认的对象对齐方式），有 3 个字节的填充。")])),_:1}),s[600]||(s[600]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[236]||(s[236]=[t("OFFSET 13 - 16")])),_:1}),s[601]||(s[601]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[237]||(s[237]=[t("。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[238]||(s[238]=[t("也就是说，尽管")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[602]||(s[602]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[239]||(s[239]=[t("boolean")])),_:1}),s[603]||(s[603]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[240]||(s[240]=[t("值本身只需要 1 个字节，但由于对象头和对齐要求，一个")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[604]||(s[604]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[241]||(s[241]=[t("boolean")])),_:1}),s[605]||(s[605]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[242]||(s[242]=[t("在内存中占用 16 字节。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[243]||(s[243]=[t("对于")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[606]||(s[606]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[244]||(s[244]=[t("boolean")])),_:1}),s[607]||(s[607]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[245]||(s[245]=[t("数组来说：")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[246]||(s[246]=[t("①、")])),_:1}),s[608]||(s[608]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[247]||(s[247]=[t("对象头（Object Header）")])),_:1}),s[609]||(s[609]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[248]||(s[248]=[t("占用了 12 个字节：")])),_:1}),e("ul",null,[e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[249]||(s[249]=[t("OFFSET 0 - 4")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[250]||(s[250]=[t("：对象头的一部分，包含对象的标记字段（Mark Word）。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[251]||(s[251]=[t("OFFSET 4 - 8")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[252]||(s[252]=[t("：对象头的另一部分，包含指向类元数据的指针（Class Pointer）。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[253]||(s[253]=[t("OFFSET 8 - 12")])),_:1})]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[254]||(s[254]=[t("：对象头的最后一部分，通常包含数组的长度信息。")])),_:1})])]),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[255]||(s[255]=[t("②、")])),_:1}),s[610]||(s[610]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[256]||(s[256]=[t("数组长度")])),_:1}),s[611]||(s[611]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[257]||(s[257]=[t("占用了 4 个字节，此处是 10，")])),_:1}),s[612]||(s[612]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[258]||(s[258]=[t("OFFSET 12 - 16")])),_:1}),s[613]||(s[613]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[259]||(s[259]=[t("。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[260]||(s[260]=[t("③、实际的")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[614]||(s[614]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[261]||(s[261]=[t("boolean")])),_:1}),s[615]||(s[615]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[262]||(s[262]=[t("数组元素，每个")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}}),s[616]||(s[616]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[263]||(s[263]=[t("boolean")])),_:1}),s[617]||(s[617]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[264]||(s[264]=[t("值占用 1 个字节，总共 10 个字节，")])),_:1}),s[618]||(s[618]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[265]||(s[265]=[t("OFFSET 16 - 26")])),_:1}),s[619]||(s[619]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[266]||(s[266]=[t("。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[267]||(s[267]=[t("④、为了满足 8 字节对齐要求，有 6 个字节的填充，")])),_:1}),s[620]||(s[620]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[268]||(s[268]=[t("OFFSET 26 - 32")])),_:1}),s[621]||(s[621]=t("**")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[269]||(s[269]=[t("。")])),_:1}),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[270]||(s[270]=[t("也就是说，每个 ")])),_:1}),s[622]||(s[622]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[271]||(s[271]=[t("boolean")])),_:1}),s[623]||(s[623]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[272]||(s[272]=[t(" 数组元素占用 1 个字节，加上对象头、对齐填充和数组长度，包含 10 个元素的 ")])),_:1}),s[624]||(s[624]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[273]||(s[273]=[t("boolean")])),_:1}),s[625]||(s[625]=t("`")),n(l,{style:{color:"rgb(44, 62, 80)"}},{default:a(()=>s[274]||(s[274]=[t(" 数组占用 32 字节。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[275]||(s[275]=[t("Java中的true字面值不等于1，false字面值也不等于0。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),s[626]||(s[626]=o(`<h2 id="_6-标识符-与变量定义式中变量名有关" tabindex="-1"><a class="header-anchor" href="#_6-标识符-与变量定义式中变量名有关"><span>6 标识符  （与变量定义式中变量名有关）</span></a></h2><h3 id="_6-1-含义" tabindex="-1"><a class="header-anchor" href="#_6-1-含义"><span>6.1 含义</span></a></h3><pre><code>就是给类，方法，变量等起的名字。
</code></pre><h3 id="_6-2-命名规则" tabindex="-1"><a class="header-anchor" href="#_6-2-命名规则"><span>6.2 命名规则</span></a></h3><p>必须要这么做，否则代码会报错。</p><ul><li><strong>必须由数字、字母、下划线_、美元符号$组成。</strong></li><li><strong>数字不能开头</strong></li><li><strong>不能是关键字</strong></li><li><strong>区分大小写的。</strong></li></ul><img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2023/png/35376129/1678268888659-8dac154f-44cf-4fc2-91f2-b5f5d544efd1.png"><h3 id="_6-3-小驼峰命名法" tabindex="-1"><a class="header-anchor" href="#_6-3-小驼峰命名法"><span>6.3 小驼峰命名法</span></a></h3><p>适用于<strong>变量名</strong>和<strong>方法名</strong></p><ul><li>如果是一个单词，那么全部小写，比如：name</li><li><strong>如果是多个单词，那么从第二个单词开始，首字母大写</strong>，比如：firstName、maxAge</li></ul><h3 id="_6-4-大驼峰命名法" tabindex="-1"><a class="header-anchor" href="#_6-4-大驼峰命名法"><span>6.4 大驼峰命名法</span></a></h3><p>适用于类名</p><ul><li>如果是一个单词，那么首字母大写。比如：Demo、Test。</li><li><strong>如果是多个单词，那么每一个单词首字母都需要大写</strong>。比如：HelloWorld</li></ul><p>不管起什么名字，都要做到见名知意。</p><h4 id="阿里巴巴命名规范细节" tabindex="-1"><a class="header-anchor" href="#阿里巴巴命名规范细节"><span>阿里巴巴命名规范细节：</span></a></h4><ol><li><strong>尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。</strong><br> 正确：alibaba、hangzhou、nanjing<br> 错误：jiage、dazhe</li><li><strong>平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。</strong><br> 错误：_name<br> 正确：name</li></ol><h2 id="_7-键盘录入" tabindex="-1"><a class="header-anchor" href="#_7-键盘录入"><span>7 键盘录入</span></a></h2><p>键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。</p><p>使用步骤：</p><p>第一步：</p><pre><code>**导包**：其实就是表示先找到Scanner这个类在哪。
</code></pre><p>第二步：</p><pre><code>**创建对象**：其实就表示申明一下，我准备开始用Scanner这个类了。
</code></pre><p>第三步：</p><pre><code>**接收数据**：也是真正干活的代码。**nextInt 中I 大写。**
</code></pre><p>代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//导包，其实就是先找到Scanner这个类在哪</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo1</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span></span>
<span class="line">		<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//3.接收数据</span></span>
<span class="line">		<span class="token comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)),e("h3",C,[e("a",U,[e("span",null,[n(l,{style:{color:"rgb(119, 119, 119)"}},{default:a(()=>s[276]||(s[276]=[t("各种录入方式")])),_:1})])])]),s[627]||(s[627]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">sc.nextInt();</span>
<span class="line">sc.nextDouble();</span>
<span class="line">sc.next();</span>
<span class="line">sc.nextLine();</span>
<span class="line">sc.hasNextInt();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h2",D,[e("a",M,[e("span",null,[n(l,{style:{color:"rgb(0, 119, 187)"}},{default:a(()=>s[277]||(s[277]=[t("8 输出")])),_:1})])])]),s[628]||(s[628]=e("p",null,"System.out.println();",-1)),e("h3",V,[e("a",L,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[278]||(s[278]=[t("格式化输出")])),_:1})])])]),e("table",null,[s[303]||(s[303]=e("thead",null,[e("tr",null,[e("th"),e("th"),e("th")])],-1)),e("tbody",null,[e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[279]||(s[279]=[t("s")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[280]||(s[280]=[t("字符串")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[281]||(s[281]=[t("Hello")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[282]||(s[282]=[t("e")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[283]||(s[283]=[t("指数浮点数")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[284]||(s[284]=[t("1.59e+01")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[285]||(s[285]=[t("d")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[286]||(s[286]=[t("十进制整数")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[287]||(s[287]=[t("159")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[288]||(s[288]=[t("X")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[289]||(s[289]=[t("十六进制整数")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[290]||(s[290]=[t("9f")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[291]||(s[291]=[t("o")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[292]||(s[292]=[t("八进制整数")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[293]||(s[293]=[t("237")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[294]||(s[294]=[t("f")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[295]||(s[295]=[t("定点浮点数")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[296]||(s[296]=[t("H")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[297]||(s[297]=[t("c")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[298]||(s[298]=[t("字符")])),_:1})]),s[299]||(s[299]=e("td",null,null,-1))]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[300]||(s[300]=[t("b")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[301]||(s[301]=[t("布尔")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[302]||(s[302]=[t("True")])),_:1})])])])]),e("table",null,[s[323]||(s[323]=e("thead",null,[e("tr",null,[e("th"),e("th"),e("th")])],-1)),e("tbody",null,[e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[304]||(s[304]=[t("+")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[305]||(s[305]=[t("打印正数和负数的符号")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[306]||(s[306]=[t("+3333.33")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[307]||(s[307]=[t("空格")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[308]||(s[308]=[t("在正数之前添加空格")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[309]||(s[309]=[t("0")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[310]||(s[310]=[t("数字前面补0")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[311]||(s[311]=[t("003333.33")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[312]||(s[312]=[t("-")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[313]||(s[313]=[t("左对齐")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[314]||(s[314]=[t("（")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[315]||(s[315]=[t("将负数括在括号内")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[316]||(s[316]=[t("(3333.33)")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[317]||(s[317]=[t("#")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[318]||(s[318]=[t("添加分组分隔符")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[319]||(s[319]=[t("3,333.33")])),_:1})])]),e("tr",null,[e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[320]||(s[320]=[t("<")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[321]||(s[321]=[t("格式化前面的数值 %d<x y以10进制和16进制打印同一个数值")])),_:1})]),e("td",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[322]||(s[322]=[t("159 9F")])),_:1})])])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[324]||(s[324]=[t("可以使用静态的String.format方法创建一个格式化的字符串，而不打印输出：")])),_:1}),s[629]||(s[629]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = &quot;www&quot;;</span>
<span class="line">int age = 1</span>
<span class="line"></span>
<span class="line">String message =String.format(&quot;Hello,%s.Next year,you&#39;ll be %d&quot;,name,age);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-运算符" tabindex="-1"><a class="header-anchor" href="#_9-运算符"><span>9 运算符</span></a></h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><ul><li><ul><li><ul><li>/ % //加减乘除 取模或取余</li></ul></li></ul></li></ul><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span>+ - *</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> operator <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// +</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		</span>
<span class="line">		<span class="token comment">// -</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		</span>
<span class="line">		<span class="token comment">// * (shift + 数字8)</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		</span>
<span class="line">		<span class="token comment">// / </span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		</span>
<span class="line">		<span class="token comment">//如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的</span></span>
<span class="line">		<span class="token comment">//具体原因：到了java.SE时候，会详细学习。</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">+</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.2</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.1</span></span>
<span class="line">		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">-</span> <span class="token number">1.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.09000000000000008</span></span>
<span class="line">		</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[325]||(s[325]=[t("注意")])),_:1})]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[326]||(s[326]=[t("：")])),_:1})]),e("p",null,[e("em",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[327]||(s[327]=[t("如果计算时候有小数参与 在代码中，如果有小数参与计算，结果可能不精确的.")])),_:1})])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[328]||(s[328]=[t("具体原因：到了java.SE时候，会详细学习。")])),_:1})]),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h4",N,[e("a",B,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[329]||(s[329]=[t("/ 除法")])),_:1})])])]),s[630]||(s[630]=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//除法</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.3333333333333335</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[330]||(s[330]=[t("整数参与 计算，结果只能是整数")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[331]||(s[331]=[t("小数参与计算，结果可能存在不精确的，如果我们需要精确计算，那么需要用到后面的知识点。")])),_:1})])]),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}})])]),e("h4",H,[e("a",Z,[e("span",null,[s[333]||(s[333]=t("% ")),n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[332]||(s[332]=[t("取余 or 取模")])),_:1})])])]),s[631]||(s[631]=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//取余</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[334]||(s[334]=[t("应用场景：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[335]||(s[335]=[t("1.可以用来取模来判断 A是否能被Ｂ整除。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[336]||(s[336]=[t("２.可以判断Ａ是否为偶数。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h4",R,[e("a",W,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[337]||(s[337]=[t("应用 -- 数值拆分")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[338]||(s[338]=[t("需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[339]||(s[339]=[t("代码示例：")])),_:1}),s[632]||(s[632]=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//1.键盘录入一个三位数</span></span>
<span class="line"><span class="token comment">//导包 --- 创建对象 --- 接收数据</span></span>
<span class="line"><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个三位数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> number <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//2.获取这个三位数的个位、十位、百位并打印出来</span></span>
<span class="line"><span class="token comment">//公式：</span></span>
<span class="line"><span class="token comment">//针对于任意的一个数而言</span></span>
<span class="line"><span class="token comment">//个位： 数字 % 10</span></span>
<span class="line"><span class="token keyword">int</span> ones <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//十位： 数字 / 10 % 10</span></span>
<span class="line"><span class="token keyword">int</span> tens <span class="token operator">=</span> number <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//百位： 数字 / 100 % 10</span></span>
<span class="line"><span class="token keyword">int</span> hundreds <span class="token operator">=</span> number <span class="token operator">/</span> <span class="token number">100</span>  <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//输出结果</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ones<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tens<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hundreds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[340]||(s[340]=[t("公式：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[341]||(s[341]=[t("获取任意一个数上每一位数。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[342]||(s[342]=[t("个位：数字 % 10")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[343]||(s[343]=[t("十位：数字 / 10 % 10")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[344]||(s[344]=[t("百位：数字 / 100 % 10")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[345]||(s[345]=[t("千位：数字 / 1000 % 10")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[346]||(s[346]=[t("。。。以此类推。。。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h3",K,[e("a",X,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[347]||(s[347]=[t("隐式转换（自动类型提升）")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[348]||(s[348]=[t("数字进行数据运算时，数据类型不一样的不能运算，需要转换成一样的，才能运算。")])),_:1}),e("h4",Y,[e("a",G,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[349]||(s[349]=[t("含义")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[350]||(s[350]=[t("取值范围小的数值变成取值范围大的数值。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[351]||(s[351]=[t("就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[352]||(s[352]=[t("简单记忆：就是小的给大的，可以直接给。")])),_:1})])]),e("h4",$,[e("a",Q,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[353]||(s[353]=[t("两种提升规则")])),_:1})])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[354]||(s[354]=[t("取值范围小的，和取值范围大的进行运算，")])),_:1}),s[357]||(s[357]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[355]||(s[355]=[t("小的会先提升为大的")])),_:1}),s[358]||(s[358]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[356]||(s[356]=[t("，再进行运算。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[359]||(s[359]=[t("byte、short、char ")])),_:1}),s[361]||(s[361]=t("****")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[360]||(s[360]=[t("三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。")])),_:1})])])]),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}})])]),e("h4",_,[e("a",h,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[362]||(s[362]=[t("取值范围从小到大的关系：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[363]||(s[363]=[t("byte short int long float double")])),_:1}),e("h4",ss,[e("a",ls,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[364]||(s[364]=[t("注意点")])),_:1})])])]),s[633]||(s[633]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">int a = 10;</span>
<span class="line">double b = 12.3;</span>
<span class="line">int c = a + b;</span>
<span class="line">System.out.println(c);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[365]||(s[365]=[t("这行代码会报错，等式右边是double型，不会随等号左边的数据类型变换，")])),_:1}),s[634]||(s[634]=o(`<img referrerpolicy="no-referrer" src="https://cdn.nlark.com/yuque/0/2024/png/35376129/1706949404878-fd3a7c1f-90d9-4465-9b8a-a807a375766e.png"><h4 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h4><h5 id="案例一" tabindex="-1"><a class="header-anchor" href="#案例一"><span>案例一</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[366]||(s[366]=[t("解释：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[367]||(s[367]=[t("10是整数，整数默认是int类型的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[368]||(s[368]=[t("而在取值范围的顺序中：byte short int long float double")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[369]||(s[369]=[t(" 在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h5",ns,[e("a",ts,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[370]||(s[370]=[t("案例二")])),_:1})])])]),s[635]||(s[635]=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">result <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment">//int</span></span>
<span class="line"><span class="token comment">//问变量result是什么类型的？</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[371]||(s[371]=[t("解释：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[372]||(s[372]=[t(" 因为b1和b2都是byte或者short类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h3",as,[e("a",es,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[373]||(s[373]=[t("强制转换")])),_:1})])])]),e("h4",os,[e("a",rs,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[374]||(s[374]=[t("概念")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[375]||(s[375]=[t("取值范围大的变成取值范围小的")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[376]||(s[376]=[t("如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[377]||(s[377]=[t(" 如果一定要这么干，就需要加入强制转换。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h4",is,[e("a",ds,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[378]||(s[378]=[t("书写格式")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[379]||(s[379]=[t("目标数据类型 变量名 = （目标数据类型）被强转的数据；")])),_:1}),e("h4",ps,[e("a",us,[e("span",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[380]||(s[380]=[t("注意点")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[381]||(s[381]=[t(" 强制转换有可能会导致数据发生错误。（数据的精度丢失）")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h3",bs,[e("a",gs,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[382]||(s[382]=[t("字符串的 + 操作")])),_:1})])])]),e("h4",ys,[e("a",fs,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[383]||(s[383]=[t("核心操作")])),_:1})])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[384]||(s[384]=[t("当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。")])),_:1})]),e("li",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[385]||(s[385]=[t("当连续进行+操作时，从左到右逐个执行的。")])),_:1})])])]),e("h4",vs,[e("a",ms,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[386]||(s[386]=[t("练习题")])),_:1})])])]),e("h5",ks,[e("a",xs,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[387]||(s[387]=[t("案例1：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[388]||(s[388]=[t('1 + 2 + "abc" + 2 + 1')])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[389]||(s[389]=[t("结果：“3abc21”")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[390]||(s[390]=[t("解释：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[391]||(s[391]=[t("第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[392]||(s[392]=[t('第二步：3 + "abc"。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串"3abc"。')])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[393]||(s[393]=[t('第三步："3abc" + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串"3abc2"。')])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[394]||(s[394]=[t('第四步："3abc2" + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”')])),_:1}),e("h5",cs,[e("a",js,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[395]||(s[395]=[t("案例2：")])),_:1})])])]),s[636]||(s[636]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String name = &quot;黑默丁格&quot;;</span>
<span class="line">System.out.println(&quot;我的名字是&quot; + name);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[396]||(s[396]=[t("结果： 我的名字是黑默丁格")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[397]||(s[397]=[t("解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。")])),_:1}),e("h5",Ss,[e("a",qs,[e("span",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[398]||(s[398]=[t("案例3：")])),_:1})])])]),s[637]||(s[637]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">System.out.println(1+2+&quot;age&quot;+true);</span>
<span class="line">//输出：“3agetrue”</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h3",ws,[e("a",Js,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[399]||(s[399]=[t("字符相加")])),_:1})])])]),e("h4",Fs,[e("a",Os,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[400]||(s[400]=[t("✨")])),_:1}),n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[401]||(s[401]=[t("规则")])),_:1})])])]),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[402]||(s[402]=[t("当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算")])),_:1})]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[403]||(s[403]=[t("。")])),_:1})]),e("h4",Es,[e("a",Ts,[e("span",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[404]||(s[404]=[t("案例")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[405]||(s[405]=[t("：")])),_:1})])])]),s[638]||(s[638]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">char c = &#39;a&#39;;</span>
<span class="line">int result = c + 0;</span>
<span class="line">System.out.println(result);//97</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[406]||(s[406]=[t("ASCII码表中：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[407]||(s[407]=[t("'a' ----- 97")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[408]||(s[408]=[t("'A' ----- 65")])),_:1}),e("h4",Is,[e("a",zs,[e("span",null,[n(l,{style:{color:"rgb(135, 206, 250)"}},{default:a(()=>s[409]||(s[409]=[t("练习题")])),_:1})])])]),s[639]||(s[639]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">System.out.println(&#39;a&#39; + &quot;age&quot;);</span>
<span class="line">//输出：aage</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h4",As,[e("a",Ps,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[410]||(s[410]=[t("总结 字符串只能进行加操作")])),_:1})])])]),e("h3",Cs,[e("a",Us,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[411]||(s[411]=[t("自增自减运算")])),_:1})])])]),e("h4",Ds,[e("a",Ms,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[412]||(s[412]=[t("分类：")])),_:1})])])]),s[640]||(s[640]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">++  自增运算符</span>
<span class="line">--  自减运算符</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[413]||(s[413]=[t("++：就是把变量里面的值+1")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[414]||(s[414]=[t("--：就是把变量里面的值-1")])),_:1}),e("h4",Vs,[e("a",Ls,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[415]||(s[415]=[t("使用方式：")])),_:1})])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[416]||(s[416]=[t("放在变量的前面，我们叫做先++。 比如：++a")])),_:1})]),e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[417]||(s[417]=[t("放在变量的后面，我们叫做后++。 比如：a++")])),_:1})])]),e("h4",Ns,[e("a",Bs,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[418]||(s[418]=[t("注意点：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[419]||(s[419]=[t("不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。")])),_:1}),e("h4",Hs,[e("a",Zs,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[420]||(s[420]=[t("案例：")])),_:1})])])]),s[641]||(s[641]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//++</span>
<span class="line">int a = 10;</span>
<span class="line">a++;//就是让变量a里面的值 + 1</span>
<span class="line">System.out.println(a);//11</span>
<span class="line">++a;//就是让变量a里面的值 + 1</span>
<span class="line">System.out.println(a);//12</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h4",Rs,[e("a",Ws,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[421]||(s[421]=[t("自增自减运算符的应用场景：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[422]||(s[422]=[t("某些情况下，变量需要进行加1或者减1的时候使用。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[423]||(s[423]=[t("比如：过生日多一岁，就用到了自增运算符。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[424]||(s[424]=[t("比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[425]||(s[425]=[t("比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。")])),_:1}),e("h3",Ks,[e("a",Xs,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[426]||(s[426]=[t("赋值运算符")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[427]||(s[427]=[t("最为常用的：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[428]||(s[428]=[t("=")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[429]||(s[429]=[t("运算过程：就是把等号右边的结果赋值给左边的变量")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[430]||(s[430]=[t("案例：")])),_:1}),s[642]||(s[642]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OperatorDemo6 {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        //1.最为简单的赋值运算符用法</span>
<span class="line">        int a = 10;//就是把10赋值给变量a</span>
<span class="line">        System.out.println(a);</span>
<span class="line"></span>
<span class="line">        //2.如果等号右边需要进行计算。</span>
<span class="line">        int b = 20;</span>
<span class="line">        int c = a + b;//先计算等号右边的，把计算的结果赋值给左边的变量</span>
<span class="line">        System.out.println(c);</span>
<span class="line"></span>
<span class="line">        //3.特殊的用法</span>
<span class="line">        a = a + 10;//先计算等号右边的，把计算的结果赋值给左边的变量</span>
<span class="line">        System.out.println(a);//20</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h3",Ys,[e("a",Gs,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[431]||(s[431]=[t("扩展赋值运算符")])),_:1})])])]),e("h4",$s,[e("a",Qs,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[432]||(s[432]=[t("分类：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[433]||(s[433]=[t("+=、-=、*=、/=、%=")])),_:1}),e("h4",_s,[e("a",hs,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[434]||(s[434]=[t("运算规则：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[435]||(s[435]=[t("就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。")])),_:1}),e("h4",sl,[e("a",ll,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[436]||(s[436]=[t("案例：")])),_:1})])])]),s[643]||(s[643]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OperatorDemo7 {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        //扩展赋值运算符</span>
<span class="line">        int a = 10;</span>
<span class="line">        int b = 20;</span>
<span class="line">        a += b;//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响</span>
<span class="line">        // 相当于 a = a + b;</span>
<span class="line">        System.out.println(a);//30</span>
<span class="line">        System.out.println(b);//20</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h4",nl,[e("a",tl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[437]||(s[437]=[t("注意点：")])),_:1}),e("strong",null,[n(l,{style:{color:"rgb(219, 63, 30)"}},{default:a(()=>s[438]||(s[438]=[t("扩展的赋值运算符中底层还包含了一个强制转换")])),_:1}),s[440]||(s[440]=t("****")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[439]||(s[439]=[t("。")])),_:1})])])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[441]||(s[441]=[t("以+=为例。")])),_:1}),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[442]||(s[442]=[t("a += b ;实际上相当于 a = (byte)(a + b);")])),_:1})])]),s[644]||(s[644]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OperatorDemo8 {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        byte a = 10;</span>
<span class="line">        byte b = 20;</span>
<span class="line">        //a += b;</span>
<span class="line">        a = (byte)(a + b);</span>
<span class="line">        System.out.println(a);//30</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}}),e("h3",al,[e("a",el,[e("span",null,[n(l,{style:{color:"rgb(0, 119, 187)"}},{default:a(()=>s[443]||(s[443]=[t("关系运算符")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[444]||(s[444]=[t("又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。")])),_:1}),e("h4",ol,[e("a",rl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[445]||(s[445]=[t("分类：")])),_:1})])])]),e("table",null,[e("thead",null,[e("tr",null,[e("th",il,[e("strong",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[446]||(s[446]=[t("符号")])),_:1})])]),e("th",dl,[e("strong",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[447]||(s[447]=[t("解释")])),_:1})])])])]),e("tbody",null,[e("tr",null,[e("td",pl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[448]||(s[448]=[t("==")])),_:1})]),e("td",ul,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[449]||(s[449]=[t("就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false")])),_:1})])]),e("tr",null,[e("td",bl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[450]||(s[450]=[t("!=")])),_:1})]),e("td",gl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[451]||(s[451]=[t("就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false")])),_:1})])]),e("tr",null,[e("td",yl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[452]||(s[452]=[t(">")])),_:1})]),e("td",fl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[453]||(s[453]=[t("就是判断左边是否大于右边，如果成立就是true，如果不成立就是false")])),_:1})])]),e("tr",null,[e("td",vl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[454]||(s[454]=[t(">=")])),_:1})]),e("td",ml,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[455]||(s[455]=[t("就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false")])),_:1})])]),e("tr",null,[e("td",kl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[456]||(s[456]=[t("<")])),_:1})]),e("td",xl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[457]||(s[457]=[t("就是判断左边是否小于右边，如果成立就是true，如果不成立就是false")])),_:1})])]),e("tr",null,[e("td",cl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[458]||(s[458]=[t("<=")])),_:1})]),e("td",jl,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[459]||(s[459]=[t("就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false")])),_:1})])])])]),e("h4",Sl,[e("a",ql,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[460]||(s[460]=[t("注意点：")])),_:1})])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[461]||(s[461]=[t("关系运算符最终的结果一定是布尔类型的。要么是true，要么是false")])),_:1})]),e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[462]||(s[462]=[t("在写==的时候，千万不要写成=")])),_:1})])]),e("h3",wl,[e("a",Jl,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[463]||(s[463]=[t("逻辑运算符")])),_:1})])])]),e("h4",Fl,[e("a",Ol,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[464]||(s[464]=[t("& 和 | 的使用：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[465]||(s[465]=[t("&：逻辑与（而且）")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[466]||(s[466]=[t("两边都为真，结果才是真，只要有一个为假，那么结果就是假。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[467]||(s[467]=[t("|：逻辑或（或者）")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[468]||(s[468]=[t("两边都为假，结果才是假，只要有一个为真，那么结果就是真。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[469]||(s[469]=[t("代码示例：")])),_:1}),s[645]||(s[645]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// &amp;  //两边都是真，结果才是真。</span>
<span class="line">System.out.println(true &amp; true);//true</span>
<span class="line">System.out.println(false &amp; false);//false</span>
<span class="line">System.out.println(true &amp; false);//false</span>
<span class="line">System.out.println(false &amp; true);//false</span>
<span class="line"></span>
<span class="line">System.out.println(&quot;===================================&quot;);</span>
<span class="line"></span>
<span class="line">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span>
<span class="line">System.out.println(true | true);//true</span>
<span class="line">System.out.println(false | false);//false</span>
<span class="line">System.out.println(true | false);//true</span>
<span class="line">System.out.println(false | true);//true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h4",El,[e("a",Tl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[470]||(s[470]=[t("使用场景：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[471]||(s[471]=[t("根据固定的场景，来选择使用&还是使用|")])),_:1}),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[472]||(s[472]=[t("用户登录。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[473]||(s[473]=[t("用户名输入正确 & 密码输入正确")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[474]||(s[474]=[t("因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[475]||(s[475]=[t("使用技巧：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[476]||(s[476]=[t("当我们需要同时满足左边和右边两种情况时，可以使用且")])),_:1})]),e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[477]||(s[477]=[t("丈母娘选女婿")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[478]||(s[478]=[t("丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[479]||(s[479]=[t("买个房子 | 买辆车")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[480]||(s[480]=[t("两个条件中，只要满足其中一个，就可以穿走小棉袄了。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[481]||(s[481]=[t("使用技巧：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[482]||(s[482]=[t("当两种条件只要满足其中一个的时候，可以使用或")])),_:1})])]),e("h4",Il,[e("a",zl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[483]||(s[483]=[t("^（异或）的使用：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[484]||(s[484]=[t("在以后用的不多，了解一下即可。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[485]||(s[485]=[t("计算规则：如果两边相同，结果为 false，如果两边不同，结果为true")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[486]||(s[486]=[t("代码示例：")])),_:1}),s[646]||(s[646]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">//^   //左右不相同，结果才是true，左右相同结果就是false</span>
<span class="line">System.out.println(true ^ true);//false</span>
<span class="line">System.out.println(false ^ false);//false</span>
<span class="line">System.out.println(true ^ false);//true</span>
<span class="line">System.out.println(false ^ true);//true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h4",Al,[e("a",Pl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[487]||(s[487]=[t("6.4 !（取反）的使用：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[488]||(s[488]=[t("是取反，也叫做非。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[489]||(s[489]=[t("计算规则：false取反就是true，true取反就是false")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[490]||(s[490]=[t("温馨提示：")])),_:1}),s[647]||(s[647]=t("**")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[491]||(s[491]=[t("取反最多只用一个。")])),_:1}),s[648]||(s[648]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[492]||(s[492]=[t("代码示例：")])),_:1}),s[649]||(s[649]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">System.out.println(!false);//true</span>
<span class="line">System.out.println(!true);//false</span>
<span class="line"></span>
<span class="line">System.out.println(!!false);//注意点：取反最多只用一个。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h3",Cl,[e("a",Ul,[e("span",null,[n(l,{style:{color:"rgb(0, 119, 187)"}},{default:a(()=>s[493]||(s[493]=[t("短路逻辑运算符")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[494]||(s[494]=[t("分类： && ||")])),_:1}),e("h4",Dl,[e("a",Ml,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[495]||(s[495]=[t("&&：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[496]||(s[496]=[t("运算结果跟&是一模一样的，只不过具有短路效果。")])),_:1}),e("h4",Vl,[e("a",Ll,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[497]||(s[497]=[t("||：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[498]||(s[498]=[t("运算结果跟|是一模一样的。只不过具有短路效果。")])),_:1}),e("h4",Nl,[e("a",Bl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[499]||(s[499]=[t("逻辑核心：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),s[650]||(s[650]=t("**")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[500]||(s[500]=[t("当左边不能确定整个表达式的结果，右边才会执行。")])),_:1}),s[651]||(s[651]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}}),s[652]||(s[652]=t("**")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[501]||(s[501]=[t("当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。")])),_:1}),s[653]||(s[653]=t("**")),e("h4",Hl,[e("a",Zl,[e("span",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[502]||(s[502]=[t("举例：")])),_:1})])])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[503]||(s[503]=[t("用户登录案例")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[504]||(s[504]=[t("用户名正确 & 密码正确")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[505]||(s[505]=[t("如果使用一个&，不管用户名是否正确都会去验证密码。")])),_:1})])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[506]||(s[506]=[t("思考：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[507]||(s[507]=[t("如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[508]||(s[508]=[t("但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[509]||(s[509]=[t("如果使用一个&，那么左边和右边不管什么情况下，都会执行。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[510]||(s[510]=[t("用户名正确 && 密码正确")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[511]||(s[511]=[t("如果用户名输入正确了，那么才会验证密码是否输入正确。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[512]||(s[512]=[t("如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。")])),_:1}),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[513]||(s[513]=[t("丈母娘选女婿")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[514]||(s[514]=[t("有房 | 有车")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[515]||(s[515]=[t("首先先看看有没有房，发现有，然后再去看看有没有车。")])),_:1})])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[516]||(s[516]=[t("思考：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[517]||(s[517]=[t("既然都有房子，干嘛还要去看车呢？多此一举。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[518]||(s[518]=[t("有房 || 有车")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[519]||(s[519]=[t("首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[520]||(s[520]=[t("如果没有房子，才会去看右边有没有车。")])),_:1}),e("h4",Rl,[e("a",Wl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[521]||(s[521]=[t("总结：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[522]||(s[522]=[t("&& 和 & 、||和|的运行结果都是一模一样的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[523]||(s[523]=[t("但是短路逻辑运算符可以提高程序的运行效率。")])),_:1}),e("h4",Kl,[e("a",Xl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[524]||(s[524]=[t("建议：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[525]||(s[525]=[t("最为常用： && || ！")])),_:1}),e("h3",Yl,[e("a",Gl,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[526]||(s[526]=[t("三元运算符")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[527]||(s[527]=[t("又叫做：三元表达式或者问号冒号表达式。")])),_:1}),e("h4",$l,[e("a",Ql,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[528]||(s[528]=[t("格式：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[529]||(s[529]=[t("关系表达式 ？ 表达式1 ：表达式2 ；")])),_:1}),e("h4",_l,[e("a",hl,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[530]||(s[530]=[t("计算规则：")])),_:1})])])]),e("ul",null,[e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[531]||(s[531]=[t("计算关系表达式的值。")])),_:1})]),e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[532]||(s[532]=[t("如果关系表达式的值为真，那么执行表达式1。")])),_:1})]),e("li",null,[n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[533]||(s[533]=[t("如果关系表达式的值为假，那么执行表达式2。")])),_:1})])]),e("h4",sn,[e("a",ln,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[534]||(s[534]=[t("注意点：")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[535]||(s[535]=[t("三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。")])),_:1}),e("h4",nn,[e("a",tn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[536]||(s[536]=[t("案例：")])),_:1})])])]),s[654]||(s[654]=o(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class OperatorDemo12 {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        //需求：求两个数的较大值</span>
<span class="line">        int a = 10;</span>
<span class="line">        int b = 20;</span>
<span class="line"></span>
<span class="line">        //格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span>
<span class="line">        //注意点：</span>
<span class="line">        //三元运算符的最终结果一定要被使用。</span>
<span class="line">        //要么赋值给一个变量，要么直接输出。</span>
<span class="line">       int max =  a &gt; b ? a : b ;</span>
<span class="line">        System.out.println(max);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        System.out.println(a &gt; b ? a : b);</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("h3",an,[e("a",en,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[537]||(s[537]=[t("9. 运算符的优先级")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[538]||(s[538]=[t("在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[539]||(s[539]=[t("咱们只要知道其中一点：")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[540]||(s[540]=[t(" 小括号优先于所有。")])),_:1}),s[655]||(s[655]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950105229-7ddbc697-ccad-4fbe-b1e2-05a500f63f7d.png"},null,-1)),e("h3",on,[e("a",rn,[e("span",null,[n(l,{style:{color:"rgb(106, 90, 205)"}},{default:a(()=>s[541]||(s[541]=[t("原码 补码 反码")])),_:1})])])]),e("p",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[542]||(s[542]=[t("原码")])),_:1})]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[543]||(s[543]=[t("：十进制数据的二进制表现形式，")])),_:1}),e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[544]||(s[544]=[t("最左边是符号位，0为正，1为负")])),_:1})])]),s[656]||(s[656]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950144202-5fcd6930-0d0e-4cd0-b305-1dd26a9fa96e.png"},null,-1)),e("h4",dn,[e("a",pn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[545]||(s[545]=[t("一个字节：8个bit（字节）")])),_:1})])])]),s[657]||(s[657]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950148657-ff3e060b-f0d1-4e9f-8c4b-821024fd36e8.png"},null,-1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[546]||(s[546]=[t("原码的弊端")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[547]||(s[547]=[t("1.当是-1时，")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[548]||(s[548]=[t("反码：为了解决原码不能计算负数的问题而出现的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[549]||(s[549]=[t("计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1,1变0.")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)","background-color":"rgb(242, 242, 242)"}}),s[658]||(s[658]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950169832-e5c63e09-89df-43ee-b11d-08fb85922542.png"},null,-1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[550]||(s[550]=[t("-56 + 1")])),_:1}),s[659]||(s[659]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950177144-25083e04-addb-4d17-ba72-147e69318b13.png"},null,-1)),s[660]||(s[660]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950182009-06876820-7c2c-4167-8c09-68aac3ab7303.png"},null,-1)),s[661]||(s[661]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950187469-343c71b0-2c33-4a6d-83e0-8ce8f73e5b11.png"},null,-1)),s[662]||(s[662]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950191523-3ff53a96-93dc-4b3d-961d-b07a78cbfb7d.png"},null,-1)),s[663]||(s[663]=e("p",null,"​",-1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[551]||(s[551]=[t("然而,当-1 + 1 时,反码:1111 1111 再加 1 反码:0000 0000 还是0")])),_:1}),s[664]||(s[664]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950196381-83dd0d16-114e-421a-ab21-75fe5e577f9a.png"},null,-1)),e("h4",un,[e("a",bn,[e("span",null,[e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[552]||(s[552]=[t("原码")])),_:1})])])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[553]||(s[553]=[t("十进制数据的二进制表现形式，最左边是符号位，0为正，1为负。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[554]||(s[554]=[t("原码的弊端")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[555]||(s[555]=[t("利用原码进行计算的时候，如果是正数完全没有问题。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[556]||(s[556]=[t("但是如果是负数计算，结果就出错，实际运算的方向，跟正确的运算方向是相反的。")])),_:1}),e("h4",gn,[e("a",yn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[557]||(s[557]=[t("反码出现的目的")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[558]||(s[558]=[t("为了解决原码不能计算负数的问题而出现的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[559]||(s[559]=[t("反码的计算规则")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[560]||(s[560]=[t("正数的反码不变，负数的反码在原码的基础上，符不颈，缴值取反，0变1,1变0。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[561]||(s[561]=[t("反码的弊端")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[562]||(s[562]=[t("负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差。")])),_:1}),e("h4",fn,[e("a",vn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[563]||(s[563]=[t("补码出现的目的")])),_:1})])])]),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[564]||(s[564]=[t("为了解决负数计算时跨0的问题而出现的。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[565]||(s[565]=[t("补码的计算规则")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[566]||(s[566]=[t("正数的补码不变，负数的补码在反码的基础上+1。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[567]||(s[567]=[t("另外补码还能多记录一个特殊的值-128，该数据在1个字节下，没有原码和反码。")])),_:1}),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[568]||(s[568]=[t("补码的注意点")])),_:1}),s[665]||(s[665]=t("**")),n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[569]||(s[569]=[t("计算机中的存储和计算都是以补码的形式进行的。")])),_:1}),s[666]||(s[666]=t("**")),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[570]||(s[570]=[t("基本的数据类型")])),_:1}),s[667]||(s[667]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950228665-b2893ffc-4969-4e3c-b218-282417be35b9.png"},null,-1)),s[668]||(s[668]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950239038-15272288-2bcb-4bb1-990c-d43242245ad7.png"},null,-1)),n(l,{style:{color:"rgb(51, 51, 51)"}},{default:a(()=>s[571]||(s[571]=[t("强制转换，砍掉前面多余的位，正负，由保留下来的最高位代替。")])),_:1}),s[669]||(s[669]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950250649-905abfa1-4cab-4b11-9b90-24d9401f20b9.png"},null,-1)),e("h4",mn,[e("a",kn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[572]||(s[572]=[t("逻辑与")])),_:1})])])]),s[670]||(s[670]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950255235-bc5a1ae0-5d48-4c4d-89e9-39b8ab9a1b22.png"},null,-1)),e("h4",xn,[e("a",cn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[573]||(s[573]=[t("逻辑或 |")])),_:1})])])]),s[671]||(s[671]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950260905-1c0480b2-7860-4879-920d-1b88a963a050.png"},null,-1)),e("h4",jn,[e("a",Sn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[574]||(s[574]=[t("右移:")])),_:1}),e("strong",null,[n(l,{style:{color:"rgb(64, 224, 208)"}},{default:a(()=>s[575]||(s[575]=[t("正数补零,负数补一")])),_:1})])])])]),s[672]||(s[672]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950266601-0696a91a-cb1b-4bd5-a7f0-eb53760df2fb.png"},null,-1)),e("h4",qn,[e("a",wn,[e("span",null,[n(l,{style:{color:"rgb(26, 143, 55)"}},{default:a(()=>s[576]||(s[576]=[t("无符号右移")])),_:1})])])]),s[673]||(s[673]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1706950271784-620fc5eb-493b-4400-af40-f078041eb139.png"},null,-1))])}const En=r(u,[["render",Jn],["__file","base02.html.vue"]]),Tn=JSON.parse('{"path":"/blogs/docs/Java/base/base02.html","title":"注释|关键字|字面量|变量|数据类型|标识符|运算符","lang":"en-US","frontmatter":{"title":"注释|关键字|字面量|变量|数据类型|标识符|运算符","date":"2024/09/28","tags":["注释","关键字","字面量","变量","数据类型","标识符","运算符"],"categories":["Java"],"hideComments":false},"headers":[{"level":2,"title":"1 注释(comment)","slug":"_1-注释-comment","link":"#_1-注释-comment","children":[{"level":3,"title":"1.1 单行注释","slug":"_1-1-单行注释","link":"#_1-1-单行注释","children":[]},{"level":3,"title":"1.2 多行注释","slug":"_1-2-多行注释","link":"#_1-2-多行注释","children":[]},{"level":3,"title":"1.3 文档注释","slug":"_1-3-文档注释","link":"#_1-3-文档注释","children":[]}]},{"level":2,"title":"2 关键字","slug":"_2-关键字","link":"#_2-关键字","children":[{"level":3,"title":"2.1 含义","slug":"_2-1-含义","link":"#_2-1-含义","children":[]},{"level":3,"title":"2.2 特点","slug":"_2-2-特点","link":"#_2-2-特点","children":[]},{"level":3,"title":"2.3 常见的关键字","slug":"_2-3-常见的关键字","link":"#_2-3-常见的关键字","children":[]}]},{"level":2,"title":"3 字面量","slug":"_3-字面量","link":"#_3-字面量","children":[{"level":3,"title":"3.1 含义","slug":"_3-1-含义","link":"#_3-1-含义","children":[]},{"level":3,"title":"3.2 字面量的分类","slug":"_3-2-字面量的分类","link":"#_3-2-字面量的分类","children":[]},{"level":3,"title":"3.3 特殊字符的字面量","slug":"_3-3-特殊字符的字面量","link":"#_3-3-特殊字符的字面量","children":[]},{"level":3,"title":"3.4 字面量的默认值","slug":"_3-4-字面量的默认值","link":"#_3-4-字面量的默认值","children":[]}]},{"level":2,"title":"4 变量","slug":"_4-变量","link":"#_4-变量","children":[{"level":3,"title":"4.1 变量的定义格式","slug":"_4-1-变量的定义格式","link":"#_4-1-变量的定义格式","children":[]},{"level":3,"title":"4.2 注意点","slug":"_4-2-注意点","link":"#_4-2-注意点","children":[]}]},{"level":2,"title":"5 数据类型 （与变量定义公式中数据类型相关）","slug":"_5-数据类型-与变量定义公式中数据类型相关","link":"#_5-数据类型-与变量定义公式中数据类型相关","children":[{"level":3,"title":"1.基本数据类型","slug":"_1-基本数据类型","link":"#_1-基本数据类型","children":[]},{"level":3,"title":"2.引用数据类型","slug":"_2-引用数据类型","link":"#_2-引用数据类型","children":[]},{"level":3,"title":"3 数据溢出","slug":"_3-数据溢出","link":"#_3-数据溢出","children":[]}]},{"level":2,"title":"6 标识符  （与变量定义式中变量名有关）","slug":"_6-标识符-与变量定义式中变量名有关","link":"#_6-标识符-与变量定义式中变量名有关","children":[{"level":3,"title":"6.1 含义","slug":"_6-1-含义","link":"#_6-1-含义","children":[]},{"level":3,"title":"6.2 命名规则","slug":"_6-2-命名规则","link":"#_6-2-命名规则","children":[]},{"level":3,"title":"6.3 小驼峰命名法","slug":"_6-3-小驼峰命名法","link":"#_6-3-小驼峰命名法","children":[]},{"level":3,"title":"6.4 大驼峰命名法","slug":"_6-4-大驼峰命名法","link":"#_6-4-大驼峰命名法","children":[]}]},{"level":2,"title":"7 键盘录入","slug":"_7-键盘录入","link":"#_7-键盘录入","children":[{"level":3,"title":"各种录入方式","slug":"各种录入方式","link":"#各种录入方式","children":[]}]},{"level":2,"title":"8 输出","slug":"_8-输出","link":"#_8-输出","children":[{"level":3,"title":"格式化输出","slug":"格式化输出","link":"#格式化输出","children":[]}]},{"level":2,"title":"9 运算符","slug":"_9-运算符","link":"#_9-运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"隐式转换（自动类型提升）","slug":"隐式转换-自动类型提升","link":"#隐式转换-自动类型提升","children":[]},{"level":3,"title":"强制转换","slug":"强制转换","link":"#强制转换","children":[]},{"level":3,"title":"字符串的 + 操作","slug":"字符串的-操作","link":"#字符串的-操作","children":[]},{"level":3,"title":"字符相加","slug":"字符相加","link":"#字符相加","children":[]},{"level":3,"title":"自增自减运算","slug":"自增自减运算","link":"#自增自减运算","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"扩展赋值运算符","slug":"扩展赋值运算符","link":"#扩展赋值运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"短路逻辑运算符","slug":"短路逻辑运算符","link":"#短路逻辑运算符","children":[]},{"level":3,"title":"三元运算符","slug":"三元运算符","link":"#三元运算符","children":[]},{"level":3,"title":"9. 运算符的优先级","slug":"_9-运算符的优先级","link":"#_9-运算符的优先级","children":[]},{"level":3,"title":"原码 补码 反码","slug":"原码-补码-反码","link":"#原码-补码-反码","children":[]}]}],"git":{"createdTime":1727536792000,"updatedTime":1727709468000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":1}]},"filePathRelative":"blogs/docs/Java/base/base02.md"}');export{En as comp,Tn as data};
