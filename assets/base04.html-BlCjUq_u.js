import{_ as u,c,a as p,b as t,d as a,w as e,e as s,r as i,o as r}from"./app-su1kDT7D.js";const d={},k={id:"基本数据类型缓存池",tabindex:"-1"},v={class:"header-anchor",href:"#基本数据类型缓存池"},m={href:"https://javabetter.cn/oo/static.html",target:"_blank",rel:"noopener noreferrer"},b={id:"面试题1-以下代码会输出什么",tabindex:"-1"},g={class:"header-anchor",href:"#面试题1-以下代码会输出什么"},y={id:"面试题2-以下代码输出什么",tabindex:"-1"},f={class:"header-anchor",href:"#面试题2-以下代码输出什么"},w={id:"_1-方法",tabindex:"-1"},j={class:"header-anchor",href:"#_1-方法"},x={id:"_1-1-概念-1",tabindex:"-1"},q={class:"header-anchor",href:"#_1-1-概念-1"},S={id:"_1-2-实际开发中-什么时候用到方法",tabindex:"-1"},I={class:"header-anchor",href:"#_1-2-实际开发中-什么时候用到方法"},A={id:"_1-3-实际开发中-方法有什么好处",tabindex:"-1"},L={class:"header-anchor",href:"#_1-3-实际开发中-方法有什么好处"},C={id:"_1-4-方法的定义",tabindex:"-1"},M={class:"header-anchor",href:"#_1-4-方法的定义"},U={id:"_1-5-方法的调用",tabindex:"-1"},E={class:"header-anchor",href:"#_1-5-方法的调用"},D={id:"_1-6-最简单的方法定义和调用",tabindex:"-1"},V={class:"header-anchor",href:"#_1-6-最简单的方法定义和调用"},J={id:"_1-7-带参数的方法定义和调用",tabindex:"-1"},O={class:"header-anchor",href:"#_1-7-带参数的方法定义和调用"},z={id:"_1-8-形参和实参",tabindex:"-1"},R={class:"header-anchor",href:"#_1-8-形参和实参"},B={id:"_1-9-带返回值方法的定义和调用",tabindex:"-1"},T={class:"header-anchor",href:"#_1-9-带返回值方法的定义和调用"},N={id:"_1-10-注意事项",tabindex:"-1"},P={class:"header-anchor",href:"#_1-10-注意事项"},X={id:"_1-11-方法的通用格式",tabindex:"-1"},H={class:"header-anchor",href:"#_1-11-方法的通用格式"},F={id:"_2-方法的重载-overload",tabindex:"-1"},K={class:"header-anchor",href:"#_2-方法的重载-overload"},Q={id:"_2-1-概念",tabindex:"-1"},W={class:"header-anchor",href:"#_2-1-概念"},G={id:"_3-练习题",tabindex:"-1"},Y={class:"header-anchor",href:"#_3-练习题"},Z={id:"_3-1-数组遍历",tabindex:"-1"},$={class:"header-anchor",href:"#_3-1-数组遍历"},h={id:"_4-方法的基本内存原理",tabindex:"-1"},_={class:"header-anchor",href:"#_4-方法的基本内存原理"},nn={id:"_4-1-方法调用的基本内存原理",tabindex:"-1"},sn={class:"header-anchor",href:"#_4-1-方法调用的基本内存原理"},an={id:"_5-基本数据类型-和-·引用数据类型",tabindex:"-1"},ln={class:"header-anchor",href:"#_5-基本数据类型-和-·引用数据类型"},en={id:"从内存角度-基本数据类型和引用数据类型区别",tabindex:"-1"},tn={class:"header-anchor",href:"#从内存角度-基本数据类型和引用数据类型区别"},pn={id:"_6-方法的值的传递",tabindex:"-1"},on={class:"header-anchor",href:"#_6-方法的值的传递"},un={id:"_6-1-方法传递基本数据类型的原理",tabindex:"-1"},cn={class:"header-anchor",href:"#_6-1-方法传递基本数据类型的原理"},rn={id:"java中的四种引用-强弱软虚",tabindex:"-1"},dn={class:"header-anchor",href:"#java中的四种引用-强弱软虚"},kn={id:"强引用",tabindex:"-1"},vn={class:"header-anchor",href:"#强引用"},mn={id:"软引用",tabindex:"-1"},bn={class:"header-anchor",href:"#软引用"},gn={id:"弱引用",tabindex:"-1"},yn={class:"header-anchor",href:"#弱引用"},fn={id:"虚引用",tabindex:"-1"},wn={class:"header-anchor",href:"#虚引用"};function jn(xn,n){const l=i("font"),o=i("ExternalLinkIcon");return r(),c("div",null,[n[275]||(n[275]=p(`<h2 id="_1-集合-arraylist" tabindex="-1"><a class="header-anchor" href="#_1-集合-arraylist"><span>1. 集合（ArrayList）</span></a></h2><h4 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念"><span>1.1 概念</span></a></h4><ul><li>什么是集合<br> 提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</li><li>ArrayList集合的特点<br> 长度可以变化，只能存储引用数据类型。</li><li>泛型的使用（在ArrayList中是   这个    &lt;数据类型&gt;  ）<br><strong>用于约束集合中存储元素的数据类型</strong></li></ul><h4 id="集合和数组的优势对比" tabindex="-1"><a class="header-anchor" href="#集合和数组的优势对比"><span>集合和数组的优势对比：</span></a></h4><ol><li>长度可变，删除元素集合自动减。</li><li>添加数据的时候不需要考虑索引，默认将数据添加到末尾</li><li>存储类型</li></ol><table><thead><tr><th>数组</th><th>可以存基本数据类型和引用数据类型</th></tr></thead><tbody><tr><td>集合</td><td>可以存引用数据类型，基本数据类型需要变换成包装类</td></tr></tbody></table><h4 id="_1-2-arraylist类常用方法" tabindex="-1"><a class="header-anchor" href="#_1-2-arraylist类常用方法"><span>1.2 ArrayList类常用方法</span></a></h4><h5 id="_1-2-1-构造方法" tabindex="-1"><a class="header-anchor" href="#_1-2-1-构造方法"><span>1.2.1 构造方法</span></a></h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">//JDK7之前</span></span>
<span class="line"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//JDK7及之后 等号之后的数据类型可以不写，但必须留着。</span></span>
<span class="line"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-2-2-成员方法" tabindex="-1"><a class="header-anchor" href="#_1-2-2-成员方法"><span>1.2.2 成员方法</span></a></h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(要添加的元素)增</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public boolean remove(要删除的元素)删</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>public E  remove(int   index)删</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E   set(int index,E   element)改</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E   get(int   index)查</td><td>返回指定索引处的元素</td></tr><tr><td>public int   size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><h5 id="_1-2-3-示例代码" tabindex="-1"><a class="header-anchor" href="#_1-2-3-示例代码"><span>1.2.3 示例代码</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo02</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//创建集合</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">//此时输出 []</span></span>
<span class="line">        <span class="token comment">///此时我们创建的是ArrayList的对象，而ArrayList是java已经写好的一个类</span></span>
<span class="line">        <span class="token comment">//这个类在底层做了一些处理</span></span>
<span class="line">        <span class="token comment">//打印对象不是地址值，而是集合中存储数据内容</span></span>
<span class="line">        <span class="token comment">//在展示的时候会拿[]把所有的数据进行包裹</span></span>
<span class="line">        <span class="token comment">//添加元素</span></span>
<span class="line">        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.remove(&quot;world&quot;));</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.remove(&quot;javaee&quot;));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.remove(1));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//IndexOutOfBoundsException</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.remove(3));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.set(1,&quot;javaee&quot;));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//IndexOutOfBoundsException</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.set(3,&quot;javaee&quot;));</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//public E get(int index)：返回指定索引处的元素</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.get(0));</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.get(1));</span></span>
<span class="line">        <span class="token comment">//        System.out.println(array.get(2));</span></span>
<span class="line">        <span class="token comment">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//public int size()：返回集合中的元素的个数</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//输出集合</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;array:&quot;</span> <span class="token operator">+</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-arraylist存储字符串并遍历" tabindex="-1"><a class="header-anchor" href="#_1-3-arraylist存储字符串并遍历"><span>1.3 ArrayList存储字符串并遍历</span></a></h4><h5 id="_1-3-1-案例需求" tabindex="-1"><a class="header-anchor" href="#_1-3-1-案例需求"><span>1.3.1 案例需求</span></a></h5><pre><code>创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合
</code></pre><h5 id="_1-3-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-3-2-代码实现"><span>1.3.2 代码实现</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.创建集合对象</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.添加元素</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.遍历</span></span>
<span class="line">        <span class="token comment">//快捷键: list.fori 正向遍历</span></span>
<span class="line">        <span class="token comment">//list.forr 倒着遍历</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//i 依次表示集合里面的每一个索引</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//最大索引</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//非最大索引</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-arraylist存储学生对象并遍历" tabindex="-1"><a class="header-anchor" href="#_1-4-arraylist存储学生对象并遍历"><span>1.4 ArrayList存储学生对象并遍历</span></a></h4><h5 id="_1-4-1-案例需求" tabindex="-1"><a class="header-anchor" href="#_1-4-1-案例需求"><span>1.4.1 案例需求</span></a></h5><pre><code>创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合
</code></pre><h5 id="_1-4-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-4-2-代码实现"><span>1.4.2 代码实现</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo4</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.创建集合对象，用来存储数据</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.创建学生对象</span></span>
<span class="line">        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.把学生对象添加到集合中</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4.遍历</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//i 依次表示集合中的每一个索引</span></span>
<span class="line">            <span class="token class-name">Student</span> stu <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">		for (int i = 0; i &lt; list.size(); i++) {</span>
<span class="line">            Student stu = list.get(i);</span>
<span class="line">            System.out.println(stu);</span>
<span class="line"></span>
<span class="line">        }</span>
<span class="line">        输出结果为：</span>
<span class="line">        Student{name = zhangsan, age = 23}</span>
<span class="line">		Student{name = lisi, age = 24}</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-查找用户的索引" tabindex="-1"><a class="header-anchor" href="#_1-5-查找用户的索引"><span>1.5 查找用户的索引</span></a></h4><p>需求：</p><p>1，main方法中定义一个集合，存入三个用户对象。</p><p>用户属性为：id，username，password</p><p>2，要求：定义一个方法，根据id查找对应的学生信息。</p><p>如果存在，返回索引</p><p>如果不存在，返回-1</p><p><strong>注意</strong><br> 如果我们要返回多个数据，可以把这些数据先放到一个容器当中，再把容器返回集合数组。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo6</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/*需求：</span>
<span class="line">        1，main方法中定义一个集合，存入三个用户对象。</span>
<span class="line">        用户属性为：id，username，password</span>
<span class="line">        2，要求：定义一个方法，根据id查找对应的学生信息。</span>
<span class="line">        如果存在，返回索引</span>
<span class="line">        如果不存在，返回-1*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.创建集合对象</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.创建用户对象</span></span>
<span class="line">        <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima001&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima002&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima003&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1234qwer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.把用户对象添加到集合当中</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4.调用方法，通过id获取对应的索引</span></span>
<span class="line">        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;heima001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//1.我要干嘛？  根据id查找对应的学生信息</span></span>
<span class="line">    <span class="token comment">//2.我干这件事情需要什么才能完成？   集合 id</span></span>
<span class="line">    <span class="token comment">//3.方法的调用处是否需要继续使用方法的结果？</span></span>
<span class="line">    <span class="token comment">//要用必须返回，不要用可以返回也可以不返回</span></span>
<span class="line">    <span class="token comment">//明确说明需要有返回值 int</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//遍历集合得到每一个元素</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">User</span> u <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> uid <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>uid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-判断用户的是否存在" tabindex="-1"><a class="header-anchor" href="#_1-6-判断用户的是否存在"><span>1.6 判断用户的是否存在</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo5</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">/* 需求：</span>
<span class="line">        1，main方法中定义一个集合，存入三个用户对象。</span>
<span class="line">        用户属性为：id，username，password</span>
<span class="line">        2，要求：定义一个方法，根据id查找对应的学生信息。</span>
<span class="line">        如果存在，返回true</span>
<span class="line">        如果不存在，返回false*/</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//1.定义集合</span></span>
<span class="line">        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.创建对象</span></span>
<span class="line">        <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima001&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima002&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;12345678&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;heima003&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1234qwer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//3.把用户对象添加到集合当中</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//4.调用方法，查询id是否存在</span></span>
<span class="line">        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">contains</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;heima001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//定义在测试类中的方法需要加static</span></span>
<span class="line">    <span class="token comment">//1.我要干嘛？ 我要根据id查询学生是否存在</span></span>
<span class="line">    <span class="token comment">//2.我干这件事情，需要什么才能完成？ 集合 id</span></span>
<span class="line">    <span class="token comment">//3.方法的调用处是否需要使用方法的结果？</span></span>
<span class="line">    <span class="token comment">//如果要用，必须返回，如果不用，可以返回也可以不返回</span></span>
<span class="line">    <span class="token comment">//但是本题明确说明需要返回</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//循环遍历集合，得到集合里面的每一个元素</span></span>
<span class="line">        <span class="token comment">//再进行判断</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//i 索引  list.get(i); 元素</span></span>
<span class="line">            <span class="token class-name">User</span> u <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//判断id是否存在，我是拿着谁跟谁比较</span></span>
<span class="line">            <span class="token comment">//需要把用户对象里面的id拿出来再进行比较。</span></span>
<span class="line">            <span class="token class-name">String</span> uid <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//return 关键字：作用就是结束方法。</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//只有当集合里面所有的元素全部比较完毕才能认为是不存在的。</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="易错点" tabindex="-1"><a class="header-anchor" href="#易错点"><span>易错点</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">//1.创建集合</span></span>
<span class="line">	<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>list <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token comment">//长度为0</span></span>
<span class="line">	<span class="token comment">//2.键盘录入学生的信息并添加到集合当中</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;看看我执行了吗？&quot;</span><span class="token punctuation">)</span>；</span>
<span class="line">	<span class="token class-name">Student</span> s <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">//集合里面是否有学生对象</span></span>
<span class="line">	<span class="token comment">//f</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-基本数据类型的对应包装类" tabindex="-1"><a class="header-anchor" href="#_2-基本数据类型的对应包装类"><span>2 基本数据类型的对应包装类</span></a></h2><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td><strong>char</strong></td><td><strong>Character</strong></td></tr><tr><td><strong>int</strong><br> jdk5 之后int 与Integer 可以相互转化</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>integer<span class="token punctuation">&gt;</span></span>list <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//2.添加元素</span></span>
<span class="line"><span class="token operator">/</span>jdk5以后<span class="token keyword">int</span> <span class="token class-name">Integer</span>之间是可以互相转化的</span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装箱" tabindex="-1"><a class="header-anchor" href="#装箱"><span>装箱</span></a></h3>`,42)),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[0]||(n[0]=[s("装箱就是自动将基本数据类型转换为包装器类型（int-->Integer）；调用方法(原理)：Integer的valueOf(int) 方法 ")])),_:1})])]),n[276]||(n[276]=t("h3",{id:"拆箱",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#拆箱"},[t("span",null,"拆箱")])],-1)),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[1]||(n[1]=[s("拆箱就是自动将包装器类型转换为基本数据类型（Integer-->int）。调用方法（原理）：Integer的intValue方法 ")])),_:1})])]),a(l,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[2]||(n[2]=[s("我们有以下自动拆装箱的代码：")])),_:1}),n[277]||(n[277]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Integer</span> integer<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//装箱</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token operator">=</span>integer<span class="token punctuation">;</span> <span class="token comment">//拆箱</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[3]||(n[3]=[s("对以上代码进行反编译后可以得到以下代码：")])),_:1}),n[278]||(n[278]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Integer</span> integer<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">int</span> i<span class="token operator">=</span>integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[4]||(n[4]=[s("在")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[5]||(n[5]=[s("Java SE5")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[6]||(n[6]=[s("之前，如果要生成一个数值为")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[7]||(n[7]=[s("10")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[8]||(n[8]=[s("的")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[9]||(n[9]=[s("Integer")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[10]||(n[10]=[s("对象，必须这样进行： ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[11]||(n[11]=[s("而在从")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[12]||(n[12]=[s("Java SE5")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[13]||(n[13]=[s("开始就提供了自动装箱的特性，如果要生成一个数值为")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[14]||(n[14]=[s("10")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[15]||(n[15]=[s("的")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[16]||(n[16]=[s("Integer")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[17]||(n[17]=[s("对象，只需要 ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[18]||(n[18]=[s("这样就可以了： ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}}),t("h3",k,[t("a",v,[t("span",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[19]||(n[19]=[s("基本数据类型缓存池")])),_:1})])])]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[20]||(n[20]=[s("基本数据类型的包装类除了 Float 和 Double 之外，其他六个包装器类（Byte、Short、Integer、Long、Character、Boolean）都有常量缓存池。")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[21]||(n[21]=[s("Byte：-128~127，也就是所有的 byte 值")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[22]||(n[22]=[s("Short：-128~127")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[23]||(n[23]=[s("Long：-128~127")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[24]||(n[24]=[s("Character：\\u0000 - \\u007F")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[25]||(n[25]=[s("Boolean：true 和 false")])),_:1})])]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[26]||(n[26]=[s("拿 Integer 来举例子，Integer 类内部中内置了 256 个 Integer 类型的缓存数据，当使用的数据范围在 -128~127 之间时，会直接返回常量池中数据的引用，而不是创建对象，超过这个范围时会创建新的对象。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[27]||(n[27]=[s("18 在 -128~127 之间，300 不在。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[28]||(n[28]=[s("来看一下 valueOf 方法的源码吧。")])),_:1}),n[279]||(n[279]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static Integer valueOf(int i) {</span>
<span class="line">    if (i &gt;=IntegerCache.low &amp;&amp; i &lt;=IntegerCache.high)</span>
<span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span>
<span class="line">    return new Integer(i);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[29]||(n[29]=[s("“哦，原来是因为 Integer.IntegerCache 这个内部类的原因啊！”三妹好像发现了新大陆。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[30]||(n[30]=[s("“是滴。来看一下 IntegerCache 这个静态内部类的源码吧。”")])),_:1}),n[280]||(n[280]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">private static class IntegerCache {</span>
<span class="line">    static final int low = -128;</span>
<span class="line">    static final int high;</span>
<span class="line">    static final Integer cache[];</span>
<span class="line"></span>
<span class="line">    static {</span>
<span class="line">        // high value may be configured by property</span>
<span class="line">        int h = 127;</span>
<span class="line">        String integerCacheHighPropValue =</span>
<span class="line">                sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);</span>
<span class="line">        if (integerCacheHighPropValue != null) {</span>
<span class="line">            try {</span>
<span class="line">                int i = parseInt(integerCacheHighPropValue);</span>
<span class="line">                i = Math.max(i, 127);</span>
<span class="line">                // Maximum array size is Integer.MAX_VALUE</span>
<span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</span>
<span class="line">            } catch( NumberFormatException nfe) {</span>
<span class="line">                // If the property cannot be parsed into an int, ignore it.</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        high = h;</span>
<span class="line"></span>
<span class="line">        cache = new Integer[(high - low) + 1];</span>
<span class="line">        int j = low;</span>
<span class="line">        for(int k = 0; k &lt; cache.length; k++)</span>
<span class="line">            cache[k] = new Integer(j++);</span>
<span class="line"></span>
<span class="line">        // range [-128, 127] must be interned (JLS7 5.1.7)</span>
<span class="line">        assert Integer.IntegerCache.high &gt;= 127;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    private IntegerCache() {}</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[31]||(n[31]=[s("详细解释下：当我们通过")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[281]||(n[281]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[32]||(n[32]=[s("Integer.valueOf()")])),_:1}),n[282]||(n[282]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[33]||(n[33]=[s("方法获取整数对象时，会先检查该整数是否在 IntegerCache 中，如果在，则返回缓存中的对象，否则创建一个新的对象并缓存起来。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[34]||(n[34]=[s("需要注意的是，如果使用")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[283]||(n[283]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[35]||(n[35]=[s("new Integer()")])),_:1}),n[284]||(n[284]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[36]||(n[36]=[s("创建对象，即使值在 -128 到 127 范围内，也不会被缓存，每次都会创建新的对象。因此，推荐使用")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[285]||(n[285]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[37]||(n[37]=[s("Integer.valueOf()")])),_:1}),n[286]||(n[286]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[38]||(n[38]=[s("方法获取整数对象。")])),_:1}),t("p",null,[t("a",m,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[39]||(n[39]=[s("学习 static 关键字")])),_:1}),a(o)]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[40]||(n[40]=[s("的时候，会详细解释静态代码块，你暂时先记住，静态代码块通常用来初始化一些静态变量，它会优先于 main() 方法执行。")])),_:1})]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[41]||(n[41]=[s("在静态代码块中，low 为 -128，也就是缓存池的最小值；high 默认为 127，也就是缓存池的最大值，共计 256 个。")])),_:1}),t("p",null,[t("em",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[42]||(n[42]=[s("可以在 JVM 启动的时候，通过 ")])),_:1})]),n[44]||(n[44]=t("code",null,'_<font style="color:rgb(44, 62, 80);">-XX:AutoBoxCacheMax=NNN</font>_',-1)),t("em",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[43]||(n[43]=[s(" 来设置缓存池的大小，当然了，不能无限大，最大到 ")])),_:1})]),n[45]||(n[45]=t("code",null,'_<font style="color:rgb(44, 62, 80);">Integer.MAX_VALUE - 129</font>_',-1))]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[46]||(n[46]=[s("之后，初始化 cache 数组的大小，然后遍历填充，下标从 0 开始。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[47]||(n[47]=[s("“明白了吧？三妹。”我喝了一口水后，扭头看了看旁边的三妹。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[48]||(n[48]=[s("“这段代码不难理解，难理解的是")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[287]||(n[287]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[49]||(n[49]=[s("assert Integer.IntegerCache.high >= 127;")])),_:1}),n[288]||(n[288]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[50]||(n[50]=[s("，这行代码是干嘛的呀？”三妹很是不解。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[51]||(n[51]=[s("“哦哦，你挺细心的呀！”三妹真不错，求知欲望越来越强烈了。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[52]||(n[52]=[s("assert 是 Java 中的一个关键字，寓意是断言，为了方便调试程序，并不是发布程序的组成部分。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[53]||(n[53]=[s("默认情况下，断言是关闭的，可以在命令行运行 Java 程序的时候加上")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[289]||(n[289]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[54]||(n[54]=[s("-ea")])),_:1}),n[290]||(n[290]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[55]||(n[55]=[s("参数打开断言。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[56]||(n[56]=[s("来看这段代码。")])),_:1}),n[291]||(n[291]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class AssertTest {</span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        int high = 126;</span>
<span class="line">        assert high &gt;= 127;</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[57]||(n[57]=[s("假设手动设置的缓存池大小为 126，显然不太符合缓存池的预期值 127，结果会输出什么呢？")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[58]||(n[58]=[s("直接在 Intellij IDEA 中打开命令行终端，进入 classes 文件，执行：")])),_:1}),n[292]||(n[292]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">/usr/libexec/java_home -v 1.8 --exec java -ea com.itwanger.s51.AssertTest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),t("p",null,[t("em",null,[a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[59]||(n[59]=[s("我用的 macOS 环境，装了好多个版本的 JDK，该命令可以切换到 JDK 8")])),_:1})])]),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[60]||(n[60]=[s("也可以不指定 Java 版本直接执行（加上")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}}),n[293]||(n[293]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[61]||(n[61]=[s("-ea")])),_:1}),n[294]||(n[294]=s("`")),a(l,{style:{color:"rgb(44, 62, 80)"}}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[62]||(n[62]=[s("参数）：")])),_:1}),n[295]||(n[295]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">java -ea com.itwanger.s51.AssertTest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[63]||(n[63]=[s("“呀，报错了呀。”三妹喊道。")])),_:1}),n[296]||(n[296]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">Exception in thread &quot;main&quot; java.lang.AssertionError</span>
<span class="line">        at com.itwanger.s51.AssertTest.main(AssertTest.java:9)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[64]||(n[64]=[s("“是滴，因为 126 小于 127。”我回答道。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[65]||(n[65]=[s("“原来 assert 是这样用的啊，我明白了。”三妹表示学会了。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[66]||(n[66]=[s("在 Java 中，针对一些基本数据类型（如 Integer、Long、Boolean 等），Java 会在程序启动时创建一些常用的对象并缓存在内存中，以提高程序的性能和节省内存开销。这些常用对象被缓存在一个固定的范围内，超出这个范围的值会被重新创建新的对象。")])),_:1}),a(l,{style:{color:"rgb(44, 62, 80)"}},{default:e(()=>n[67]||(n[67]=[s("使用数据类型缓存池可以有效提高程序的性能和节省内存开销，但需要注意的是，在特定的业务场景下，缓存池可能会带来一些问题，例如缓存池中的对象被不同的线程同时修改，导致数据错误等问题。因此，在实际开发中，需要根据具体的业务需求来决定是否使用数据类型缓存池。")])),_:1}),t("h3",b,[t("a",g,[t("span",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[68]||(n[68]=[s("面试题1： 以下代码会输出什么？ ")])),_:1})])])]),n[297]||(n[297]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">     </span>
<span class="line">     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[69]||(n[69]=[s("运行结果： ")])),_:1}),n[298]||(n[298]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token boolean">true</span></span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[70]||(n[70]=[s("为什么会出现这样的结果？输出结果表明 i1 和 i2 指向的是同一个对象，而 i3 和 i4 指向的是不同的对 ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[71]||(n[71]=[s("象。此时只需一看源码便知究竟，下面这段代码是")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[72]||(n[72]=[s("Integer")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[73]||(n[73]=[s("的")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[74]||(n[74]=[s("valueOf")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[75]||(n[75]=[s("方法的具体实现： ")])),_:1}),n[299]||(n[299]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">else</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[76]||(n[76]=[s("其中IntegerCache类的实现为：")])),_:1}),n[300]||(n[300]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token comment">// high value may be configured by property</span></span>
<span class="line">         <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token comment">// java.lang.Long.decode() 方法将 String 解码为 Long。它接受十进制、十六进制和八进制数。</span></span>
<span class="line">             <span class="token comment">// Use Long.decode here to avoid invoking methods that</span></span>
<span class="line">             <span class="token comment">// require Integer&#39;s autoboxing cache to be initialized</span></span>
<span class="line">             <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span></span>
<span class="line">             h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">         high <span class="token operator">=</span> h<span class="token punctuation">;</span></span>
<span class="line">         cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">         cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">     <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[77]||(n[77]=[s("从这")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[78]||(n[78]=[s("2")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[79]||(n[79]=[s("段代码可以看出，在通过")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[80]||(n[80]=[s("valueOf")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[81]||(n[81]=[s("方法创建")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[82]||(n[82]=[s("Integer")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[83]||(n[83]=[s("对象的时候，如果数值在")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[84]||(n[84]=[s("[-128,127]")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[85]||(n[85]=[s("之间， ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[86]||(n[86]=[s("便返回指向")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[87]||(n[87]=[s("IntegerCache.cache")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[88]||(n[88]=[s("中已经存在的对象的引用；否则创建一个新的")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[89]||(n[89]=[s("Integer")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[90]||(n[90]=[s("对象。 ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[91]||(n[91]=[s("上面的代码中")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[92]||(n[92]=[s("i1")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[93]||(n[93]=[s("和")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[94]||(n[94]=[s("i2")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[95]||(n[95]=[s("的数值为")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[96]||(n[96]=[s("100")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[97]||(n[97]=[s("，因此会直接从")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[98]||(n[98]=[s("cache")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[99]||(n[99]=[s("中取已经存在的对象，所以")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[100]||(n[100]=[s("i1")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[101]||(n[101]=[s("和")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[102]||(n[102]=[s("i2")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[103]||(n[103]=[s("指向的是 ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[104]||(n[104]=[s("同一个对象，而i3和i4则是分别指向不同的对象。")])),_:1}),a(l,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[105]||(n[105]=[s("Integer缓存支持-128到127之间的自动装箱过程。最大值127可以通过")])),_:1}),a(l,{style:{color:"rgb(25, 27, 31)","background-color":"rgb(248, 248, 250)"}},{default:e(()=>n[106]||(n[106]=[s("-XX:AutoBoxCacheMax=size")])),_:1}),t("h3",y,[t("a",f,[t("span",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[107]||(n[107]=[s("面试题2：以下代码输出什么")])),_:1})])])]),n[301]||(n[301]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">     <span class="token class-name">Double</span> i1 <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Double</span> i2 <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Double</span> i3 <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">Double</span> i4 <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span></span>
<span class="line">     </span>
<span class="line">     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p>`,2)),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[108]||(n[108]=[s("false ")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[109]||(n[109]=[s("false")])),_:1}),a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[110]||(n[110]=[s("原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。 ")])),_:1}),n[302]||(n[302]=t("h2",{id:"_3-方法",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_3-方法"},[t("span",null,"3 方法")])],-1)),t("h3",w,[t("a",j,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[111]||(n[111]=[s("1.方法")])),_:1})])])]),t("h4",x,[t("a",q,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[112]||(n[112]=[s("1.1 概念")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}}),n[303]||(n[303]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[113]||(n[113]=[s("方法（method）")])),_:1}),n[304]||(n[304]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[114]||(n[114]=[s("是程序中")])),_:1}),n[305]||(n[305]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[115]||(n[115]=[s("最小的执行单元")])),_:1}),n[306]||(n[306]=s("**")),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[116]||(n[116]=[s("注意：")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[117]||(n[117]=[s("方法必须先创建才可以使用，该过程成为方法定义")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[118]||(n[118]=[s("方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用")])),_:1})])])])]),t("h4",S,[t("a",I,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[119]||(n[119]=[s("1.2. 实际开发中，什么时候用到方法？")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[120]||(n[120]=[s("重复的代码、具有独立功能的代码可以抽取到方法中。")])),_:1}),t("h4",A,[t("a",L,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[121]||(n[121]=[s("1.3. 实际开发中，方法有什么好处？")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[122]||(n[122]=[s("● 可以提高代码的复用性")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[123]||(n[123]=[s("● 可以提高代码的可维护性")])),_:1}),t("h4",C,[t("a",M,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[124]||(n[124]=[s("1.4 方法的定义")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[125]||(n[125]=[s("通俗来说，就是把一些代码打包起来，")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[126]||(n[126]=[s("带返回值方法的定义：")])),_:1}),t("h4",U,[t("a",E,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[127]||(n[127]=[s("1.5 方法的调用")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[128]||(n[128]=[s("方法定义后并不是直接运行的，而是手动调用才能知执行")])),_:1}),t("h4",D,[t("a",V,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[129]||(n[129]=[s("1.6 ")])),_:1}),t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[130]||(n[130]=[s("最简单的方法定义")])),_:1})]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[131]||(n[131]=[s("和调用：")])),_:1})])])]),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[132]||(n[132]=[s("定义")])),_:1})])]),n[307]||(n[307]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void 方法名 () {</span>
<span class="line">     方法体（就是打包起来的代码）; </span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[133]||(n[133]=[s("调用")])),_:1})])]),n[308]||(n[308]=t("p",null,"方法名();",-1)),t("h4",J,[t("a",O,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[134]||(n[134]=[s("1.7 带参数的方法定义和调用")])),_:1})])])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[135]||(n[135]=[s("参数：由数据类型和变量名组成 - 数据类型 变量名")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[136]||(n[136]=[s("示例：int a")])),_:1}),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[137]||(n[137]=[s("定义")])),_:1})])]),n[309]||(n[309]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static void 方法名 (参数1) {</span>
<span class="line">     方法体;</span>
<span class="line"> }</span>
<span class="line"> </span>
<span class="line"> public static void 方法名 (参数1, 参数2, 参数3...) {</span>
<span class="line">     方法体;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[138]||(n[138]=[s("方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[139]||(n[139]=[s("方法定义时，多个参数之间使用逗号( ，)分隔")])),_:1}),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[140]||(n[140]=[s("调用")])),_:1})])]),n[310]||(n[310]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">方法名(参数);</span>
<span class="line"> </span>
<span class="line"> 方法名(参数1,参数2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("h4",z,[t("a",R,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[141]||(n[141]=[s("1.8 形参和实参")])),_:1})])])]),t("ol",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[142]||(n[142]=[s("形参：方法定义中的参数")])),_:1})])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[143]||(n[143]=[s("等同于变量定义格式，例如：int number")])),_:1}),t("ol",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[144]||(n[144]=[s("实参：方法调用中的参数")])),_:1})])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[145]||(n[145]=[s("等同于使用变量或常量，例如： 10 number")])),_:1}),t("h4",B,[t("a",T,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[146]||(n[146]=[s("1.9 带返回值方法的定义和调用")])),_:1})])])]),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[147]||(n[147]=[s("定义")])),_:1})])]),n[311]||(n[311]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static 数据类型 方法名 ( 参数 ) { </span>
<span class="line">     return 数据 ;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[148]||(n[148]=[s("调用")])),_:1})])]),n[312]||(n[312]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">方法名 ( 参数 ) ;</span>
<span class="line"> 数据类型 变量名 = 方法名 ( 参数 ) ;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("h4",N,[t("a",P,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[149]||(n[149]=[s("1.10 注意事项")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[150]||(n[150]=[s("方法不能嵌套定义")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[151]||(n[151]=[s("示例代码：")])),_:1})])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[152]||(n[152]=[s("void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[153]||(n[153]=[s("示例代码：")])),_:1})])])])]),n[313]||(n[313]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class MethodDemo {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line"> </span>
<span class="line">     }</span>
<span class="line"> </span>
<span class="line">     public static void methodOne() {</span>
<span class="line">         public static void methodTwo() {</span>
<span class="line">             // 这里会引发编译错误!!!</span>
<span class="line">         }</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class MethodDemo {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line"> </span>
<span class="line">     }</span>
<span class="line">     public static void methodTwo() {</span>
<span class="line">         //return 100; 编译错误，因为没有具体返回值类型</span>
<span class="line">         return; </span>
<span class="line">         //System.out.println(100); return语句后面不能跟数据或代码</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t("h4",X,[t("a",H,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[154]||(n[154]=[s("1.11 方法的通用格式")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[155]||(n[155]=[s("格式：")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[156]||(n[156]=[s("解释：")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[157]||(n[157]=[s("public static ")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[158]||(n[158]=[s("修饰符，目前先记住这个格式")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[159]||(n[159]=[s("返回值类型")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[160]||(n[160]=[s("方法操作完毕之后返回的数据的数据类型")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[161]||(n[161]=[s("如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[162]||(n[162]=[s("方法名")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[163]||(n[163]=[s("调用方法时候使用的标识")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[164]||(n[164]=[s("参数")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[165]||(n[165]=[s("由数据类型和变量名组成，多个参数之间用逗号隔开")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[166]||(n[166]=[s("方法体")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[167]||(n[167]=[s("完成功能的代码块")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[168]||(n[168]=[s("return")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[169]||(n[169]=[s("如果方法操作完毕，有数据返回，用于把数据返回给调用者")])),_:1})])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[170]||(n[170]=[s("定义方法时，要做到两个明确")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[171]||(n[171]=[s("明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[172]||(n[172]=[s("明确参数：主要是明确参数的类型和数量")])),_:1})])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[173]||(n[173]=[s("调用方法时的注意：")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[174]||(n[174]=[s("void类型的方法，直接调用即可")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[175]||(n[175]=[s("非void类型的方法，推荐用变量接收调用")])),_:1})])])])]),n[314]||(n[314]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public static 返回值类型 方法名(参数) {</span>
<span class="line">    方法体; </span>
<span class="line">    return 数据 ;</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("h3",F,[t("a",K,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[176]||(n[176]=[s("2 方法的重载 ")])),_:1}),t("strong",null,[a(l,{style:{color:"rgb(51,51,51)"}},{default:e(()=>n[177]||(n[177]=[s("Overload")])),_:1})])])])]),t("h4",Q,[t("a",W,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[178]||(n[178]=[s("2.1 概念")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[179]||(n[179]=[s("方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载")])),_:1}),n[211]||(n[211]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[180]||(n[180]=[s("简单记")])),_:1}),n[212]||(n[212]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[181]||(n[181]=[s("：")])),_:1}),n[213]||(n[213]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[182]||(n[182]=[s("同一个类中，")])),_:1}),n[214]||(n[214]=s("****")),a(l,{style:{color:"rgb(0, 0, 0)","background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[183]||(n[183]=[s("方法名相同")])),_:1}),n[215]||(n[215]=s("****")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[184]||(n[184]=[s("，")])),_:1}),n[216]||(n[216]=s("****")),a(l,{style:{color:"rgb(0, 0, 0)","background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[185]||(n[185]=[s("参数不同")])),_:1}),n[217]||(n[217]=s("****")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[186]||(n[186]=[s("的方法。")])),_:1}),n[218]||(n[218]=s("****")),a(l,{style:{color:"rgb(0, 0, 0)","background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[187]||(n[187]=[s("与返回值")])),_:1}),n[219]||(n[219]=s("****")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[188]||(n[188]=[s("无关。")])),_:1}),n[220]||(n[220]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[189]||(n[189]=[s("参数不同：")])),_:1}),n[221]||(n[221]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[190]||(n[190]=[s("个数")])),_:1}),n[222]||(n[222]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[191]||(n[191]=[s("，")])),_:1}),n[223]||(n[223]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[192]||(n[192]=[s("类型")])),_:1}),n[224]||(n[224]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[193]||(n[193]=[s("，")])),_:1}),n[225]||(n[225]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[194]||(n[194]=[s("顺序")])),_:1}),n[226]||(n[226]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[195]||(n[195]=[s("不同。")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[196]||(n[196]=[s("java虚拟机会通过参数的不同来区分同名的方法")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[197]||(n[197]=[s("多个方法在同一个类中")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[198]||(n[198]=[s("多个方法具有相同的方法名")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[199]||(n[199]=[s("多个方法的")])),_:1}),n[205]||(n[205]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[200]||(n[200]=[s("参数不相同")])),_:1}),n[206]||(n[206]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[201]||(n[201]=[s("，")])),_:1}),n[207]||(n[207]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[202]||(n[202]=[s("类型不同")])),_:1}),n[208]||(n[208]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[203]||(n[203]=[s("或者")])),_:1}),n[209]||(n[209]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[204]||(n[204]=[s("数量不同")])),_:1}),n[210]||(n[210]=s("**"))])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[227]||(n[227]=[s("注意：")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[228]||(n[228]=[s("重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[229]||(n[229]=[s("重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载")])),_:1})])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[230]||(n[230]=[s("正确范例：")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[231]||(n[231]=[s("错误范例：")])),_:1})])]),n[315]||(n[315]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class MethodDemo {</span>
<span class="line">     public static void fn(int a) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line">     public static int fn(double a) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"> </span>
<span class="line"> public class MethodDemo {</span>
<span class="line">     public static float fn(int a) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line">     public static int fn(int a , int b) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class MethodDemo {</span>
<span class="line">     public static void fn(int a) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line">     public static int fn(int a) {   /*错误原因：重载与返回值无关*/</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"> </span>
<span class="line"> public class MethodDemo01 {</span>
<span class="line">     public static void fn(int a) {</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line"> } </span>
<span class="line"> public class MethodDemo02 {</span>
<span class="line">     public static int fn(double a) { /*错误原因：这是两个类的两个fn方法*/</span>
<span class="line">         //方法体</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),t("p",null,[t("strong",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[232]||(n[232]=[s("顺序不同")])),_:1})])]),n[316]||(n[316]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270237602-e53d4c8a-b89c-4f0a-8695-ba17f7bd8f16.png"},null,-1)),t("h3",G,[t("a",Y,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[233]||(n[233]=[s("3. 练习题")])),_:1})])])]),t("h4",Z,[t("a",$,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[234]||(n[234]=[s("3.1 数组遍历")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[235]||(n[235]=[s("需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] ")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[236]||(n[236]=[s("思路：")])),_:1}),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[237]||(n[237]=[s("①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);")])),_:1}),n[241]||(n[241]=s("**")),a(l,{style:{"background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[238]||(n[238]=[s("System.out.println(“内容”); 输出内容并换行")])),_:1}),n[242]||(n[242]=s("****")),a(l,{style:{"background-color":"rgb(255, 255, 0)"}},{default:e(()=>n[239]||(n[239]=[s("System.out.print(“内容”); 输出内容不换行")])),_:1}),n[243]||(n[243]=s("**")),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[240]||(n[240]=[s("System.out.println(); 起到换行的作用")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[244]||(n[244]=[s("②定义一个数组，用静态初始化完成数组元素初始化")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[245]||(n[245]=[s("③定义一个方法，用数组遍历通用格式对数组进行遍历")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[246]||(n[246]=[s("④用新的输出语句修改遍历操作")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[247]||(n[247]=[s("⑤调用遍历方法")])),_:1})])])]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[248]||(n[248]=[s("代码：")])),_:1})])]),n[317]||(n[317]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">public class Test1 {</span>
<span class="line">     public static void main(String[] args) {</span>
<span class="line">       /*  //先打印数据，再进行换行</span>
<span class="line">         System.out.println(&quot;aaa&quot;);</span>
<span class="line">         //只打印不换行</span>
<span class="line">         System.out.print(&quot;bbb&quot;);</span>
<span class="line">         System.out.print(&quot;ddd&quot;);</span>
<span class="line">         //不打印任何内容，只换行</span>
<span class="line">         System.out.println();</span>
<span class="line">         System.out.print(&quot;cc&quot;);*/</span>
<span class="line">         //设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]</span>
<span class="line">         int[] arr = {1,2,3,4,5};</span>
<span class="line">         printArr(arr);</span>
<span class="line">     }</span>
<span class="line">     //1.我要遍历数组</span>
<span class="line">     //2.需要什么？  数组</span>
<span class="line">     //3.调用处是否需要使用方法的结果。</span>
<span class="line">     public static void printArr(int[] arr){</span>
<span class="line">         System.out.print(&quot;[&quot;);</span>
<span class="line">         for (int i = 0; i &lt; arr.length; i++) {</span>
<span class="line">             if(i == arr.length - 1){</span>
<span class="line">                 System.out.println(arr[i] + &quot;]&quot;);</span>
<span class="line">             }else{</span>
<span class="line">                 System.out.print(arr[i] + &quot;, &quot;);</span>
<span class="line">             }</span>
<span class="line">         }</span>
<span class="line">     }</span>
<span class="line"> }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("h3",h,[t("a",_,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[249]||(n[249]=[s("4 方法的基本内存原理")])),_:1})])])]),t("h4",nn,[t("a",sn,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[250]||(n[250]=[s("4.1 方法调用的基本内存原理")])),_:1})])])]),n[318]||(n[318]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270247735-782c6085-9d18-4a60-93eb-73b7349d3802.png"},null,-1)),t("h3",an,[t("a",ln,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[251]||(n[251]=[s("5 基本数据类型 和 ·引用数据类型")])),_:1})])])]),n[319]||(n[319]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270253630-8a6c4726-64c7-4f09-9a2e-ed5b9e2e8144.png"},null,-1)),n[320]||(n[320]=t("h4",{id:"",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#"},[t("span")])],-1)),n[321]||(n[321]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270269954-fec1cb40-e2f7-4fa0-87e9-5daf5983130c.png"},null,-1)),t("h4",en,[t("a",tn,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[252]||(n[252]=[s("从内存角度：基本数据类型和引用数据类型区别")])),_:1})])])]),n[322]||(n[322]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270262699-90aa6bde-2318-4253-9cad-1c4e0fca1e30.png"},null,-1)),t("h3",pn,[t("a",on,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[253]||(n[253]=[s("6 方法的值的传递")])),_:1})])])]),t("h4",un,[t("a",cn,[t("span",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[254]||(n[254]=[s("6.1 方法传递基本数据类型的原理")])),_:1})])])]),n[323]||(n[323]=t("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2023/png/35376129/1678270279285-c222c462-ed61-4240-a30e-cf1ec398a10a.png"},null,-1)),t("h2",rn,[t("a",dn,[t("span",null,[a(l,{style:{color:"rgb(0, 119, 187)"}},{default:e(()=>n[255]||(n[255]=[s("java中的四种引用，强弱软虚")])),_:1})])])]),t("h3",kn,[t("a",vn,[t("span",null,[a(l,{style:{color:"rgb(106, 90, 205)"}},{default:e(()=>n[256]||(n[256]=[s("强引用")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[257]||(n[257]=[s("强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[258]||(n[258]=[s("使用方式")])),_:1})])]),n[324]||(n[324]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">String str = new String(&quot;str&quot;);</span>
<span class="line">System.out.println(str);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("h3",mn,[t("a",bn,[t("span",null,[a(l,{style:{color:"rgb(106, 90, 205)"}},{default:e(()=>n[259]||(n[259]=[s("软引用")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[260]||(n[260]=[s("软引用在程序内存不足时，会被回收")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[261]||(n[261]=[s("使用方式：")])),_:1})])]),n[325]||(n[325]=p(`<div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre class="language-plain"><code><span class="line">// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的，</span>
<span class="line">// 这里的软引用指的是指向new String(&quot;str&quot;)的引用，也就是SoftReference类中T</span>
<span class="line">SoftReference&lt;String&gt; wrf = new SoftReference&lt;String&gt;(new String(&quot;str&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[262]||(n[262]=[s("可用场景： ")])),_:1})])]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[263]||(n[263]=[s(" 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的对象。")])),_:1}),t("h3",gn,[t("a",yn,[t("span",null,[a(l,{style:{color:"rgb(106, 90, 205)"}},{default:e(()=>n[264]||(n[264]=[s("弱引用")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[265]||(n[265]=[s("弱引用就是只要JVM垃圾回收器发现了它，就会将之回收")])),_:1})]),n[268]||(n[268]=t("li",null,[t("code",null,"WeakReference<String> wrf = new WeakReference<String>(str);")],-1)),t("li",null,[t("strong",null,[a(l,{style:{color:"rgb(64, 224, 208)"}},{default:e(()=>n[266]||(n[266]=[s("可用场景：")])),_:1})]),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[267]||(n[267]=[s(" Java源码中的 java.util.WeakHashMap 中的 key 就是使用弱引用，我的理解就是，一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。")])),_:1})])]),t("h3",fn,[t("a",wn,[t("span",null,[a(l,{style:{color:"rgb(106, 90, 205)"}},{default:e(()=>n[269]||(n[269]=[s("虚引用")])),_:1})])])]),t("ul",null,[t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[270]||(n[270]=[s("虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入ReferenceQueue 中。注意哦，其它引用是被JVM回收后才被传入 ReferenceQueue 中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有 ReferenceQueue ，")])),_:1})]),t("li",null,[a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[271]||(n[271]=[s("使用例子")])),_:1})])]),n[326]||(n[326]=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> prf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[272]||(n[272]=[s("可用场景： ")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[273]||(n[273]=[s("对象销毁前的一些操作，比如说资源释放等。 Object.finalize() 虽然也可以做这类动作，但是这个方式即不安全又低效，")])),_:1}),a(l,{style:{color:"rgb(51, 51, 51)"}},{default:e(()=>n[274]||(n[274]=[s("上诉所说的几类引用，都是指对象本身的引用，而不是指Reference的四个子类的引用(SoftReference等)")])),_:1})])}const Sn=u(d,[["render",jn],["__file","base04.html.vue"]]),In=JSON.parse('{"path":"/blogs/docs/Java/base04.html","title":"集合|包装类|方法|四种引用","lang":"en-US","frontmatter":{"title":"集合|包装类|方法|四种引用","date":"2024/09/28","tags":["集合","包装类","方法","四种引用"],"categories":["Java"]},"headers":[{"level":2,"title":"1. 集合（ArrayList）","slug":"_1-集合-arraylist","link":"#_1-集合-arraylist","children":[]},{"level":2,"title":"2 基本数据类型的对应包装类","slug":"_2-基本数据类型的对应包装类","link":"#_2-基本数据类型的对应包装类","children":[{"level":3,"title":"装箱","slug":"装箱","link":"#装箱","children":[]},{"level":3,"title":"拆箱","slug":"拆箱","link":"#拆箱","children":[]},{"level":3,"title":"基本数据类型缓存池","slug":"基本数据类型缓存池","link":"#基本数据类型缓存池","children":[]},{"level":3,"title":"面试题1： 以下代码会输出什么？","slug":"面试题1-以下代码会输出什么","link":"#面试题1-以下代码会输出什么","children":[]},{"level":3,"title":"面试题2：以下代码输出什么","slug":"面试题2-以下代码输出什么","link":"#面试题2-以下代码输出什么","children":[]}]},{"level":2,"title":"3 方法","slug":"_3-方法","link":"#_3-方法","children":[{"level":3,"title":"1.方法","slug":"_1-方法","link":"#_1-方法","children":[]},{"level":3,"title":"2 方法的重载 Overload","slug":"_2-方法的重载-overload","link":"#_2-方法的重载-overload","children":[]},{"level":3,"title":"3. 练习题","slug":"_3-练习题","link":"#_3-练习题","children":[]},{"level":3,"title":"4 方法的基本内存原理","slug":"_4-方法的基本内存原理","link":"#_4-方法的基本内存原理","children":[]},{"level":3,"title":"5 基本数据类型 和 ·引用数据类型","slug":"_5-基本数据类型-和-·引用数据类型","link":"#_5-基本数据类型-和-·引用数据类型","children":[]},{"level":3,"title":"6 方法的值的传递","slug":"_6-方法的值的传递","link":"#_6-方法的值的传递","children":[]}]},{"level":2,"title":"java中的四种引用，强弱软虚","slug":"java中的四种引用-强弱软虚","link":"#java中的四种引用-强弱软虚","children":[{"level":3,"title":"强引用","slug":"强引用","link":"#强引用","children":[]},{"level":3,"title":"软引用","slug":"软引用","link":"#软引用","children":[]},{"level":3,"title":"弱引用","slug":"弱引用","link":"#弱引用","children":[]},{"level":3,"title":"虚引用","slug":"虚引用","link":"#虚引用","children":[]}]}],"git":{"createdTime":1727536792000,"updatedTime":1727609348000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":1}]},"filePathRelative":"blogs/docs/Java/base04.md"}');export{Sn as comp,In as data};
