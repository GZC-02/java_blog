import{_ as d,c as n,b as e,e as o,w as s,d as r,r as a,o as u}from"./app-BOT5Rvzn.js";const g={},b={id:"什么是跨平台性-原理是什么",tabindex:"-1"},f={class:"header-anchor",href:"#什么是跨平台性-原理是什么"},y={id:"java语言有哪些特点",tabindex:"-1"},i={class:"header-anchor",href:"#java语言有哪些特点"},v={id:"什么是字节码-采用字节码的大好处是什么",tabindex:"-1"},J={class:"header-anchor",href:"#什么是字节码-采用字节码的大好处是什么"},p={id:"什么是java程序的主类-应用程序和小程序的主类有何不同",tabindex:"-1"},j={class:"header-anchor",href:"#什么是java程序的主类-应用程序和小程序的主类有何不同"},m={id:"java应用程序与小程序之间有那些差别",tabindex:"-1"},k={class:"header-anchor",href:"#java应用程序与小程序之间有那些差别"},D={id:"java和c-的区别",tabindex:"-1"},K={class:"header-anchor",href:"#java和c-的区别"},x={id:"oracle-jdk-和-openjdk-的对比",tabindex:"-1"},E={class:"header-anchor",href:"#oracle-jdk-和-openjdk-的对比"},O={id:"面向对象和面向过程的区别",tabindex:"-1"},C={class:"header-anchor",href:"#面向对象和面向过程的区别"},V={id:"java的三大平台",tabindex:"-1"},M={class:"header-anchor",href:"#java的三大平台"},T={id:"javase",tabindex:"-1"},I={class:"header-anchor",href:"#javase"},R={id:"javame",tabindex:"-1"},S={class:"header-anchor",href:"#javame"},q={id:"javaee",tabindex:"-1"},N={class:"header-anchor",href:"#javaee"},B={id:"jvm的工作原理",tabindex:"-1"},G={class:"header-anchor",href:"#jvm的工作原理"},P={id:"jit",tabindex:"-1"},w={class:"header-anchor",href:"#jit"},A={id:"垃圾回收机制",tabindex:"-1"},L={class:"header-anchor",href:"#垃圾回收机制"};function U(W,l){const t=a("font");return u(),n("div",null,[l[143]||(l[143]=e("h2",{id:"jvm、jre和jdk的关系",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jvm、jre和jdk的关系"},[e("span",null,"JVM、JRE和JDK的关系")])],-1)),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[0]||(l[0]=[r("JVM ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[1]||(l[1]=[r("Java Virtual Machine 是 Java 虚拟机，Java 程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此 Java 语言可以实现跨平台。 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[2]||(l[2]=[r("JRE ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[3]||(l[3]=[r("Java Runtime Environment 包括 Java 虚拟机和 Java 程序所需的核心类库等。核 心类库主要是java.lang 包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包 如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[4]||(l[4]=[r("JDK ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[5]||(l[5]=[r("Java Development Kit 是提供给 Java 开发人员使用的，其中包含了 Java 的开发工具，也包括了 JRE。所以 安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等")])),_:1}),l[144]||(l[144]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1715914143468-55be02f2-ecbf-4d48-92df-46fa0cc5f91b.png"},null,-1)),e("h2",b,[e("a",f,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[6]||(l[6]=[r("什么是跨平台性？原理是什么")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[7]||(l[7]=[r("跨平台性，是指")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[8]||(l[8]=[r("java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[9]||(l[9]=[r("语言编写的程序，一次编译后，可以在多个系统平台上 运行。 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[10]||(l[10]=[r("实现原理：Java 程序是通过 java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 java 虚拟机， 该系统就可以运行 java 程序")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}}),e("h2",y,[e("a",i,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[11]||(l[11]=[r("Java语言有哪些特点 ")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[12]||(l[12]=[r("简单易学（")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[13]||(l[13]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[14]||(l[14]=[r("语言的语法与")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[15]||(l[15]=[r("C")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[16]||(l[16]=[r("语言和")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[17]||(l[17]=[r("C++")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[18]||(l[18]=[r("语言很接近） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[19]||(l[19]=[r("面向对象（封装，继承，多态） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[20]||(l[20]=[r("平台无关性（")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[21]||(l[21]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[22]||(l[22]=[r("虚拟机实现平台无关性） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[23]||(l[23]=[r("支持网络编程并且很方便（")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[24]||(l[24]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[25]||(l[25]=[r("语言诞生本身就是为简化网络编程设计的） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[26]||(l[26]=[r("支持多线程（多线程机制使应用程序在同一时间并行执行多项任） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[27]||(l[27]=[r("健壮性（")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[28]||(l[28]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[29]||(l[29]=[r("语言的强类型机制、异常处理、垃圾的自动收集等） ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[30]||(l[30]=[r("安全性")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}}),e("h2",v,[e("a",J,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[31]||(l[31]=[r("什么是字节码？采用字节码的大好处是什么 ")])),_:1})])])]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[32]||(l[32]=[r("字节码")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[33]||(l[33]=[r("：Java 源代码经过虚拟机编译器编译后产生的文件（即扩展为 .class 的文 件），它不面向任何特 定的处理器，只面向虚拟机。 ")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[34]||(l[34]=[r("采用字节码的好处： ")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[35]||(l[35]=[r("Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的 问题，同时又保留了解 释型语言可移植的特点。所以 Java 程序运行时比较高效， 而且，由于字节码并不专对一种特定的机器， 因此，Java 程序无须重新编译便可 在多种不同的计算机上运行。 ")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[36]||(l[36]=[r("先看下java中的编译器和解释器： ")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[37]||(l[37]=[r("Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。编译程 序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代 码转换为特定系统的机器码执行。在Java中，这种供虚拟机理解的代码叫做字节码（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译 器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节 码送给解释器，解释器将其翻译成特定机器上的机器码， 然后在特定的机器上运行，这就是上面提到的Java的特点的编译与解释并存的解释。 ")])),_:1})]),e("h2",p,[e("a",j,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[38]||(l[38]=[r("什么是Java程序的主类？应用程序和小程序的主类有何不同？ ")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[39]||(l[39]=[r("一个程序中可以有多个类，但只能有一个类是主类。在Java应用程序中，这个主类是指包含main()方法 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[40]||(l[40]=[r("的类。而在Java小程序中，这个主类是一个继承自")])),_:1}),l[145]||(l[145]=r("**")),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[41]||(l[41]=[r("系统类 JApplet 或 Applet 的子类")])),_:1}),l[146]||(l[146]=r("**")),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[42]||(l[42]=[r("。应用程序的主类不一 定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。 ")])),_:1}),e("h2",m,[e("a",k,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[43]||(l[43]=[r("Java应用程序与小程序之间有那些差别？ ")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[44]||(l[44]=[r("简单说应用程序是从主线程启动(也就是 main() 方法)。applet 小程序没有 main 方法，主要是嵌在浏览器 页面上运行(调用 init() 线程或者 run() 来启动)，嵌入浏览器这点跟 flash 的小游戏类似。 ")])),_:1}),e("h2",D,[e("a",K,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[45]||(l[45]=[r("Java和C++的区别 ")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[46]||(l[46]=[r("我知道很多人没学过")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[47]||(l[47]=[r("C++")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[48]||(l[48]=[r("，但是面试官就是没事喜欢拿咱们")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[49]||(l[49]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[50]||(l[50]=[r("和")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[51]||(l[51]=[r("C++")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[52]||(l[52]=[r("比呀！ 没办法！！！就算没学过 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[53]||(l[53]=[r("C++")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[54]||(l[54]=[r("，也要记下来！ ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[55]||(l[55]=[r("都是面向对象的语言，都支持封装、继承和多态 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[56]||(l[56]=[r("Java")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[57]||(l[57]=[r("不提供指针来直接访问内存，程序内存更加安全 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[58]||(l[58]=[r("Java的类是单继承的，C++支持多重继承；虽然Java的类不可以多继承，但是接口可以多继承。 ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[59]||(l[59]=[r("Java有")])),_:1}),l[147]||(l[147]=r("**")),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[60]||(l[60]=[r("自动内存管理机制")])),_:1}),l[148]||(l[148]=r("**")),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[61]||(l[61]=[r("，不需要程序员手动释放无用内存 ")])),_:1}),e("h2",x,[e("a",E,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[62]||(l[62]=[r("Oracle JDK 和 OpenJDK 的对比 ")])),_:1})])])]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[63]||(l[63]=[r("1. Oracle JDK")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[64]||(l[64]=[r("版本将每三年发布一次，而")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[65]||(l[65]=[r("OpenJDK")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[66]||(l[66]=[r("版本每三个月发布一 次； ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[67]||(l[67]=[r("2. OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是 OpenJDK的一个实现，并不是完全开源的； ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[68]||(l[68]=[r("3. Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎 相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企 业/商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳 定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题； ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[69]||(l[69]=[r("4. ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[70]||(l[70]=[r("在响应性和")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[71]||(l[71]=[r("JVM")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[72]||(l[72]=[r("性能方面，")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[73]||(l[73]=[r("Oracle JDK")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[74]||(l[74]=[r("与")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[75]||(l[75]=[r("OpenJDK")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[76]||(l[76]=[r("相比提供了更好的 性能； ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[77]||(l[77]=[r("5. Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过 更新到最新版本获得支持来获取最新版本； ")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[78]||(l[78]=[r("6. Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。")])),_:1}),o(t,{style:{color:"rgb(51,51,51)"}}),e("h2",O,[e("a",C,[e("span",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[79]||(l[79]=[r("面向对象和面向过程的区别")])),_:1})])])]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[80]||(l[80]=[r("面向过程")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[81]||(l[81]=[r("：是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发 ")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[82]||(l[82]=[r("面向对象")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[83]||(l[83]=[r("：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[84]||(l[84]=[r("封装、继承、多态")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}},{default:s(()=>l[85]||(l[85]=[r("的特 性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低")])),_:1})]),o(t,{style:{color:"rgb(51,51,51)"}}),e("h2",V,[e("a",M,[e("span",null,[o(t,{style:{color:"rgb(26, 143, 55)"}},{default:s(()=>l[86]||(l[86]=[r("Java的三大平台")])),_:1})])])]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[87]||(l[87]=[r("JavaSE、JavaME、JavaEE")])),_:1}),e("h3",T,[e("a",I,[e("span",null,[o(t,{style:{color:"rgb(106, 90, 205)"}},{default:s(()=>l[88]||(l[88]=[r("JavaSE")])),_:1})])])]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[89]||(l[89]=[r("是其他两个版本的基础。")])),_:1}),e("h3",R,[e("a",S,[e("span",null,[o(t,{style:{color:"rgb(106, 90, 205)"}},{default:s(()=>l[90]||(l[90]=[r("JavaME")])),_:1})])])]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[91]||(l[91]=[r("Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[92]||(l[92]=[r("其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[93]||(l[93]=[r("但是，安卓也是可以用Java来开发的。")])),_:1}),e("h3",q,[e("a",N,[e("span",null,[o(t,{style:{color:"rgb(106, 90, 205)"}},{default:s(()=>l[94]||(l[94]=[r("JavaEE")])),_:1})])])]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[95]||(l[95]=[r("用于Web方向的网站开发。（主要从事后台服务器的开发）")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[96]||(l[96]=[r(" 在服务器领域，Java是当之无愧的龙头老大。")])),_:1}),l[149]||(l[149]=e("img",{referrerpolicy:"no-referrer",src:"https://cdn.nlark.com/yuque/0/2024/png/35376129/1726231782038-7121e037-43d6-4d06-bd76-061497abb808.png"},null,-1)),e("h2",B,[e("a",G,[e("span",null,[o(t,{style:{color:"rgb(0, 119, 187)"}},{default:s(()=>l[97]||(l[97]=[r("JVM的工作原理")])),_:1})])])]),e("h2",P,[e("a",w,[e("span",null,[o(t,{style:{color:"rgb(0, 119, 187)"}},{default:s(()=>l[98]||(l[98]=[r("JIT ")])),_:1})])])]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[99]||(l[99]=[r("当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码“")])),_:1}),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(219, 63, 30)"}},{default:s(()=>l[100]||(l[100]=[r("JIT编译(just-in-time compilation)")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[101]||(l[101]=[r("狭义来说是热点代码即将第一次被执行时进行编译（将字节码编译为硬件可执行的机器码)因而叫“即时编译”")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[102]||(l[102]=[r("JIT的出现使得JVM不只是解释执行机器码，而是通过优化技术，将一部分字节码编译成机器码执行，提高程序的执行效率")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[103]||(l[103]=[r("Java编译器针对Java虚拟机产生class文件，是独立于平台的。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[104]||(l[104]=[r("Java虚拟机(JVM)读取并处理经编译过的平台无关的字节码class文件 。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[105]||(l[105]=[r("Java解释器负责将Java虚拟机的代码转换成特定平台上的机器码执行。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[106]||(l[106]=[r("一个典型的Jav程序开发过程")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[107]||(l[107]=[r("编写Java程序通常经历5个阶段：")])),_:1}),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[108]||(l[108]=[r("1.")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[109]||(l[109]=[r("Edit")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[110]||(l[110]=[r("（编辑）")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[111]||(l[111]=[r(":程序员书写代码并保存到磁盘上")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[112]||(l[112]=[r("2.")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[113]||(l[113]=[r("Compile")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[114]||(l[114]=[r("（编译）")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[115]||(l[115]=[r(":")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[116]||(l[116]=[r("编译器生成字节码（")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[117]||(l[117]=[r("byte code）")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[118]||(l[118]=[r("3.")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[119]||(l[119]=[r("Load")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[120]||(l[120]=[r("（装入）")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[121]||(l[121]=[r(":")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[122]||(l[122]=[r("类装载器（")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[123]||(l[123]=[r("Class loader）在内存中保存字节码")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[124]||(l[124]=[r("4.")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[125]||(l[125]=[r("Verify")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[126]||(l[126]=[r("（校验）")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[127]||(l[127]=[r(":")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[128]||(l[128]=[r("校验器")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[129]||(l[129]=[r("Verifier保证字节码不违反安全规则")])),_:1})]),e("p",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[130]||(l[130]=[r("5.")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[131]||(l[131]=[r("Execute")])),_:1}),e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[132]||(l[132]=[r("（执行）")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[133]||(l[133]=[r(":解释器将字节码翻译成机器码")])),_:1})]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[134]||(l[134]=[r("解释执行方式:JVM通过解释器将字节码逐条读入，逐条解释翻译成对应的机器指令。很显然，这种执行方式虽灵活但执行速度会比较低。为了提高执行速度，引入了JIT（Just-in-time compilation）技术。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[135]||(l[135]=[r("即时编译方式（即JIT):当JIT编译启用时（默认是启用的），JVM将解释后的字节码文件发给JIT编译器，JIT编译器将字节码编译成本机机器代码，并把编译过的机器码保存起来，已备下次使用。为了加快执行速度，JIT目前只对经常使用的热代码进行编译。")])),_:1}),e("h3",A,[e("a",L,[e("span",null,[e("strong",null,[o(t,{style:{color:"rgb(64, 224, 208)"}},{default:s(()=>l[136]||(l[136]=[r("垃圾回收机制")])),_:1})])])])]),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[137]||(l[137]=[r("“垃圾回收”(GC,Garbage Collection)就是清理不再使用的对象，释放内存空间，Java程序的内存分配和回收都是由JRE在后台自动进行的。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[138]||(l[138]=[r("垃圾回收特点：")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[139]||(l[139]=[r("内存优化：回收无用对象并释放内存空间，也可以清除内存记录碎片")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[140]||(l[140]=[r("动态回收：动态存储管理技术，自动识别不再被程序引用的对象并回收。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[141]||(l[141]=[r("回收的不确定性：在CPU空闲或内存不足时自动进行。")])),_:1}),o(t,{style:{color:"rgb(51, 51, 51)"}},{default:s(()=>l[142]||(l[142]=[r(" 占用系统开销：JRE使用后台线程进行检测和控制垃圾回收")])),_:1})])}const F=d(g,[["render",U],["__file","base01.html.vue"]]),H=JSON.parse('{"path":"/blogs/docs/Java/base/base01.html","title":"Java基础","lang":"en-US","frontmatter":{"title":"Java基础","date":"2024/09/28","categories":["Java"],"hideComments":false},"headers":[{"level":2,"title":"JVM、JRE和JDK的关系","slug":"jvm、jre和jdk的关系","link":"#jvm、jre和jdk的关系","children":[]},{"level":2,"title":"什么是跨平台性？原理是什么","slug":"什么是跨平台性-原理是什么","link":"#什么是跨平台性-原理是什么","children":[]},{"level":2,"title":"Java语言有哪些特点","slug":"java语言有哪些特点","link":"#java语言有哪些特点","children":[]},{"level":2,"title":"什么是字节码？采用字节码的大好处是什么","slug":"什么是字节码-采用字节码的大好处是什么","link":"#什么是字节码-采用字节码的大好处是什么","children":[]},{"level":2,"title":"什么是Java程序的主类？应用程序和小程序的主类有何不同？","slug":"什么是java程序的主类-应用程序和小程序的主类有何不同","link":"#什么是java程序的主类-应用程序和小程序的主类有何不同","children":[]},{"level":2,"title":"Java应用程序与小程序之间有那些差别？","slug":"java应用程序与小程序之间有那些差别","link":"#java应用程序与小程序之间有那些差别","children":[]},{"level":2,"title":"Java和C++的区别","slug":"java和c-的区别","link":"#java和c-的区别","children":[]},{"level":2,"title":"Oracle JDK 和 OpenJDK 的对比","slug":"oracle-jdk-和-openjdk-的对比","link":"#oracle-jdk-和-openjdk-的对比","children":[]},{"level":2,"title":"面向对象和面向过程的区别","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":2,"title":"Java的三大平台","slug":"java的三大平台","link":"#java的三大平台","children":[{"level":3,"title":"JavaSE","slug":"javase","link":"#javase","children":[]},{"level":3,"title":"JavaME","slug":"javame","link":"#javame","children":[]},{"level":3,"title":"JavaEE","slug":"javaee","link":"#javaee","children":[]}]},{"level":2,"title":"JVM的工作原理","slug":"jvm的工作原理","link":"#jvm的工作原理","children":[]},{"level":2,"title":"JIT","slug":"jit","link":"#jit","children":[{"level":3,"title":"垃圾回收机制","slug":"垃圾回收机制","link":"#垃圾回收机制","children":[]}]}],"git":{"createdTime":1727536792000,"updatedTime":1727709468000,"contributors":[{"name":"橘子掀开夜晚","email":"487331044@qq.com","commits":1}]},"filePathRelative":"blogs/docs/Java/base/base01.md"}');export{F as comp,H as data};
